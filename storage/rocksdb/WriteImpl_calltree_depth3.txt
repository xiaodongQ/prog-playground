  
  DBImpl::WriteImpl	[vim db/db_impl/db_impl_write.cc +68]
  ├── Status::Corruption [+]
  │   ├── Corruption	[vim tools/ldb_cmd.cc +2120]
  │   │   └── ToString [+]
  │   │       ├── Configurable::ToString	[vim options/configurable.cc +458]
  │   │       │   └── SerializeOptions
  │   │       ├── Status::ToString	[vim util/status.cc +79]
  │   │       │   ├── code
  │   │       │   └── result	[OUT-OF-TREE]
  │   │       ├── ToString	[vim util/string_util.h +23]
  │   │       │   └── std::to_string	[OUT-OF-TREE]
  │   │       ├── Slice::ToString	[vim util/slice.cc +157]
  │   │       │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   └── toHex	[vim util/slice.cc +120]
  │   │       ├── ToString	[vim include/rocksdb/configurable.h +180]
  │   │       │   └── ToString
  │   │       ├── ToString	[vim include/rocksdb/table_properties.h +146]
  │   │       │   └── Name
  │   │       ├── ToString	[vim include/rocksdb/utilities/ldb_cmd_execute_result.h +27]
  │   │       ├── ToString	[vim include/rocksdb/statistics.h +564]
  │   │       │   └── std::string	[OUT-OF-TREE]
  │   │       ├── ToString	[vim include/rocksdb/file_system.h +132]
  │   │       │   └── str	[OUT-OF-TREE]
  │   │       ├── ToString	[vim utilities/simulator_cache/sim_cache.cc +287]
  │   │       │   ├── std::to_string	[OUT-OF-TREE]
  │   │       │   ├── get_miss_counter	[vim utilities/simulator_cache/sim_cache.cc +272]
  │   │       │   └── get_hit_counter	[vim utilities/simulator_cache/sim_cache.cc +276]
  │   │       ├── CompactOnDeletionCollectorFactory::ToString	[vim utilities/table_properties_collectors/compact_on_deletion_collector.cc +105]
  │   │       │   ├── Name
  │   │       │   └── str	[OUT-OF-TREE]
  │   │       ├── PersistentCacheConfig::ToString	[vim utilities/persistent_cache/persistent_cache_tier.cc +16]
  │   │       │   └── c_str	[OUT-OF-TREE]
  │   │       ├── ToString	[vim table/block_based/filter_block.h +151]
  │   │       │   └── error_msg	[OUT-OF-TREE]
  │   │       ├── BlockBasedFilterBlockReader::ToString	[vim table/block_based/block_based_filter_block.cc +306]
  │   │       │   ├── FilterBlockReaderCommon::GetOrReadFilterBlock	[vim table/block_based/filter_block_reader_common.cc +66]
  │   │       │   ├── BlockBasedFilterBlockReader::ParseFieldsFromBlock	[vim table/block_based/block_based_filter_block.cc +221]
  │   │       │   ├── GetValue
  │   │       │   ├── std::string	[OUT-OF-TREE]
  │   │       │   ├── s_bo	[OUT-OF-TREE]
  │   │       │   ├── s_hd	[OUT-OF-TREE]
  │   │       │   ├── s_fb	[OUT-OF-TREE]
  │   │       │   ├── DecodeFixed32	[vim util/coding_lean.h +74]
  │   │       │   ├── ROCKSDB_NAMESPACE::ToString
  │   │       │   ├── Slice
  │   │       │   ├── AppendItem
  │   │       │   └── ToString
  │   │       ├── TableProperties::ToString	[vim table/table_properties.cc +72]
  │   │       │   ├── ROCKSDB_NAMESPACE::ToString
  │   │       │   ├── std::string	[OUT-OF-TREE]
  │   │       │   └── AppendProperty
  │   │       ├── BlockHandle::ToString	[vim table/format.cc +82]
  │   │       │   ├── EncodeTo
  │   │       │   ├── Slice
  │   │       │   └── ToString
  │   │       ├── IndexValue::ToString	[vim table/format.cc +136]
  │   │       │   ├── EncodeTo
  │   │       │   ├── Slice
  │   │       │   └── ToString
  │   │       ├── Footer::ToString	[vim table/format.cc +262]
  │   │       │   ├── IsLegacyFooterFormat	[vim table/format.cc +147]
  │   │       │   ├── ToString
  │   │       │   └── ROCKSDB_NAMESPACE::ToString
  │   │       ├── BackupStatistics::ToString	[vim utilities/backupable/backupable_db.cc +81]
  │   │       │   ├── BackupStatistics::GetNumberSuccessBackup	[vim utilities/backupable/backupable_db.cc +74]
  │   │       │   └── BackupStatistics::GetNumberFailBackup	[vim utilities/backupable/backupable_db.cc +77]
  │   │       ├── HistogramWindowingImpl::ToString	[vim monitoring/histogram_windowing.cc +98]
  │   │       │   └── ToString
  │   │       ├── PerfContext::ToString	[vim monitoring/perf_context.cc +450]
  │   │       ├── IOStatsContext::ToString	[vim monitoring/iostats_context.cc +43]
  │   │       │   ├── IOSTATS_CONTEXT_OUTPUT	[OUT-OF-TREE]
  │   │       │   ├── str	[OUT-OF-TREE]
  │   │       │   └── find_last_not_of	[OUT-OF-TREE]
  │   │       ├── HistogramStat::ToString	[vim monitoring/histogram.cc +182]
  │   │       │   ├── num
  │   │       │   ├── Average
  │   │       │   ├── StandardDeviation
  │   │       │   ├── min
  │   │       │   ├── Median
  │   │       │   ├── max
  │   │       │   ├── Percentile
  │   │       │   ├── bucket_at	[vim monitoring/histogram.h +73]
  │   │       │   ├── BucketLimit	[vim monitoring/histogram.h +42]
  │   │       │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       ├── HistogramImpl::ToString	[vim monitoring/histogram.cc +279]
  │   │       │   └── ToString
  │   │       └── StatisticsImpl::ToString	[vim monitoring/statistics.cc +380]
  │   │           ├── StatisticsImpl::getTickerCountLocked	[vim monitoring/statistics.cc +265]
  │   │           ├── StatisticsImpl::getHistogramImplLocked	[vim monitoring/statistics.cc +280]
  │   │           ├── Data
  │   │           ├── c_str	[OUT-OF-TREE]
  │   │           └── shrink_to_fit	[OUT-OF-TREE]
  │   ├── Corruption	[vim include/rocksdb/io_status.h +85]
  │   │   ├── Slice [+]
  │   │   │   ├── Slice::Slice	[vim util/slice.cc +142]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +38]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +41]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +45]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +50]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   └── Slice	[vim include/rocksdb/slice.h +55]
  │   │   │       ├── data_	[OUT-OF-TREE]
  │   │   │       └── strlen	[OUT-OF-TREE]
  │   │   └── IOStatus [+]
  │   │       ├── IOStatus	[vim include/rocksdb/io_status.h +39]
  │   │       │   └── IOStatus
  │   │       ├── IOStatus	[vim include/rocksdb/io_status.h +144]
  │   │       │   ├── Status
  │   │       │   ├── retryable_	[OUT-OF-TREE]
  │   │       │   ├── data_loss_	[OUT-OF-TREE]
  │   │       │   └── scope_	[OUT-OF-TREE]
  │   │       ├── IOStatus	[vim include/rocksdb/io_status.h +151]
  │   │       │   └── IOStatus
  │   │       ├── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +155]
  │   │       │   ├── Status
  │   │       │   ├── retryable_	[OUT-OF-TREE]
  │   │       │   ├── data_loss_	[OUT-OF-TREE]
  │   │       │   └── scope_	[OUT-OF-TREE]
  │   │       ├── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +177]
  │   │       │   ├── Status
  │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │       └── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +205]
  │   │           ├── IOStatus
  │   │           └── std::move	[OUT-OF-TREE]
  │   ├── Corruption	[vim include/rocksdb/io_status.h +88]
  │   │   └── IOStatus [+]
  │   │       ├── IOStatus	[vim include/rocksdb/io_status.h +39]
  │   │       │   └── IOStatus
  │   │       ├── IOStatus	[vim include/rocksdb/io_status.h +144]
  │   │       │   ├── Status
  │   │       │   ├── retryable_	[OUT-OF-TREE]
  │   │       │   ├── data_loss_	[OUT-OF-TREE]
  │   │       │   └── scope_	[OUT-OF-TREE]
  │   │       ├── IOStatus	[vim include/rocksdb/io_status.h +151]
  │   │       │   └── IOStatus
  │   │       ├── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +155]
  │   │       │   ├── Status
  │   │       │   ├── retryable_	[OUT-OF-TREE]
  │   │       │   ├── data_loss_	[OUT-OF-TREE]
  │   │       │   └── scope_	[OUT-OF-TREE]
  │   │       ├── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +177]
  │   │       │   ├── Status
  │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │       └── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +205]
  │   │           ├── IOStatus
  │   │           └── std::move	[OUT-OF-TREE]
  │   ├── Corruption	[vim include/rocksdb/status.h +174]
  │   │   ├── Slice [+]
  │   │   │   ├── Slice::Slice	[vim util/slice.cc +142]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +38]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +41]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +45]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +50]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   └── Slice	[vim include/rocksdb/slice.h +55]
  │   │   │       ├── data_	[OUT-OF-TREE]
  │   │   │       └── strlen	[OUT-OF-TREE]
  │   │   └── Status [+]
  │   │       ├── Status::Status	[vim util/status.cc +60]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   └── sev_	[OUT-OF-TREE]
  │   │       ├── Status	[vim include/rocksdb/status.h +37]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── state_	[OUT-OF-TREE]
  │   │       ├── Status	[vim include/rocksdb/status.h +519]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── state_	[OUT-OF-TREE]
  │   │       ├── Status	[vim include/rocksdb/status.h +523]
  │   │       │   └── Status
  │   │       ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │       ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │       └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │           ├── Status
  │   │           └── std::move	[OUT-OF-TREE]
  │   ├── Corruption	[vim include/rocksdb/status.h +177]
  │   │   └── Status [+]
  │   │       ├── Status::Status	[vim util/status.cc +60]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   └── sev_	[OUT-OF-TREE]
  │   │       ├── Status	[vim include/rocksdb/status.h +37]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── state_	[OUT-OF-TREE]
  │   │       ├── Status	[vim include/rocksdb/status.h +519]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── state_	[OUT-OF-TREE]
  │   │       ├── Status	[vim include/rocksdb/status.h +523]
  │   │       │   └── Status
  │   │       ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │       ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │       └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │           ├── Status
  │   │           └── std::move	[OUT-OF-TREE]
  │   ├── Corruption	[vim db/transaction_log_impl.h +96]
  │   │   ├── ROCKS_LOG_ERROR	[OUT-OF-TREE]
  │   │   ├── ToString [+]
  │   │   │   ├── Configurable::ToString	[vim options/configurable.cc +458]
  │   │   │   │   └── SerializeOptions
  │   │   │   ├── Status::ToString	[vim util/status.cc +79]
  │   │   │   │   ├── code
  │   │   │   │   └── result	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim util/string_util.h +23]
  │   │   │   │   └── std::to_string	[OUT-OF-TREE]
  │   │   │   ├── Slice::ToString	[vim util/slice.cc +157]
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   └── toHex	[vim util/slice.cc +120]
  │   │   │   ├── ToString	[vim include/rocksdb/configurable.h +180]
  │   │   │   │   └── ToString
  │   │   │   ├── ToString	[vim include/rocksdb/table_properties.h +146]
  │   │   │   │   └── Name
  │   │   │   ├── ToString	[vim include/rocksdb/utilities/ldb_cmd_execute_result.h +27]
  │   │   │   ├── ToString	[vim include/rocksdb/statistics.h +564]
  │   │   │   │   └── std::string	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim include/rocksdb/file_system.h +132]
  │   │   │   │   └── str	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim utilities/simulator_cache/sim_cache.cc +287]
  │   │   │   │   ├── std::to_string	[OUT-OF-TREE]
  │   │   │   │   ├── get_miss_counter	[vim utilities/simulator_cache/sim_cache.cc +272]
  │   │   │   │   └── get_hit_counter	[vim utilities/simulator_cache/sim_cache.cc +276]
  │   │   │   ├── CompactOnDeletionCollectorFactory::ToString	[vim utilities/table_properties_collectors/compact_on_deletion_collector.cc +105]
  │   │   │   │   ├── Name
  │   │   │   │   └── str	[OUT-OF-TREE]
  │   │   │   ├── PersistentCacheConfig::ToString	[vim utilities/persistent_cache/persistent_cache_tier.cc +16]
  │   │   │   │   └── c_str	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim table/block_based/filter_block.h +151]
  │   │   │   │   └── error_msg	[OUT-OF-TREE]
  │   │   │   ├── BlockBasedFilterBlockReader::ToString	[vim table/block_based/block_based_filter_block.cc +306]
  │   │   │   │   ├── FilterBlockReaderCommon::GetOrReadFilterBlock	[vim table/block_based/filter_block_reader_common.cc +66]
  │   │   │   │   ├── BlockBasedFilterBlockReader::ParseFieldsFromBlock	[vim table/block_based/block_based_filter_block.cc +221]
  │   │   │   │   ├── GetValue
  │   │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │   │   │   ├── s_bo	[OUT-OF-TREE]
  │   │   │   │   ├── s_hd	[OUT-OF-TREE]
  │   │   │   │   ├── s_fb	[OUT-OF-TREE]
  │   │   │   │   ├── DecodeFixed32	[vim util/coding_lean.h +74]
  │   │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │   │   │   ├── Slice
  │   │   │   │   ├── AppendItem
  │   │   │   │   └── ToString
  │   │   │   ├── TableProperties::ToString	[vim table/table_properties.cc +72]
  │   │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │   │   │   └── AppendProperty
  │   │   │   ├── BlockHandle::ToString	[vim table/format.cc +82]
  │   │   │   │   ├── EncodeTo
  │   │   │   │   ├── Slice
  │   │   │   │   └── ToString
  │   │   │   ├── IndexValue::ToString	[vim table/format.cc +136]
  │   │   │   │   ├── EncodeTo
  │   │   │   │   ├── Slice
  │   │   │   │   └── ToString
  │   │   │   ├── Footer::ToString	[vim table/format.cc +262]
  │   │   │   │   ├── IsLegacyFooterFormat	[vim table/format.cc +147]
  │   │   │   │   ├── ToString
  │   │   │   │   └── ROCKSDB_NAMESPACE::ToString
  │   │   │   ├── BackupStatistics::ToString	[vim utilities/backupable/backupable_db.cc +81]
  │   │   │   │   ├── BackupStatistics::GetNumberSuccessBackup	[vim utilities/backupable/backupable_db.cc +74]
  │   │   │   │   └── BackupStatistics::GetNumberFailBackup	[vim utilities/backupable/backupable_db.cc +77]
  │   │   │   ├── HistogramWindowingImpl::ToString	[vim monitoring/histogram_windowing.cc +98]
  │   │   │   │   └── ToString
  │   │   │   ├── PerfContext::ToString	[vim monitoring/perf_context.cc +450]
  │   │   │   ├── IOStatsContext::ToString	[vim monitoring/iostats_context.cc +43]
  │   │   │   │   ├── IOSTATS_CONTEXT_OUTPUT	[OUT-OF-TREE]
  │   │   │   │   ├── str	[OUT-OF-TREE]
  │   │   │   │   └── find_last_not_of	[OUT-OF-TREE]
  │   │   │   ├── HistogramStat::ToString	[vim monitoring/histogram.cc +182]
  │   │   │   │   ├── num
  │   │   │   │   ├── Average
  │   │   │   │   ├── StandardDeviation
  │   │   │   │   ├── min
  │   │   │   │   ├── Median
  │   │   │   │   ├── max
  │   │   │   │   ├── Percentile
  │   │   │   │   ├── bucket_at	[vim monitoring/histogram.h +73]
  │   │   │   │   ├── BucketLimit	[vim monitoring/histogram.h +42]
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── HistogramImpl::ToString	[vim monitoring/histogram.cc +279]
  │   │   │   │   └── ToString
  │   │   │   └── StatisticsImpl::ToString	[vim monitoring/statistics.cc +380]
  │   │   │       ├── StatisticsImpl::getTickerCountLocked	[vim monitoring/statistics.cc +265]
  │   │   │       ├── StatisticsImpl::getHistogramImplLocked	[vim monitoring/statistics.cc +280]
  │   │   │       ├── Data
  │   │   │       ├── c_str	[OUT-OF-TREE]
  │   │   │       └── shrink_to_fit	[OUT-OF-TREE]
  │   │   └── c_str	[OUT-OF-TREE]
  │   ├── Corruption	[vim db/version_set.h +1236]
  │   └── Corruption	[vim db/db_impl/db_impl_secondary.h +54]
  │       ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │       ├── ToString [+]
  │       │   ├── Configurable::ToString	[vim options/configurable.cc +458]
  │       │   │   └── SerializeOptions
  │       │   ├── Status::ToString	[vim util/status.cc +79]
  │       │   │   ├── code
  │       │   │   └── result	[OUT-OF-TREE]
  │       │   ├── ToString	[vim util/string_util.h +23]
  │       │   │   └── std::to_string	[OUT-OF-TREE]
  │       │   ├── Slice::ToString	[vim util/slice.cc +157]
  │       │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │       │   │   └── toHex	[vim util/slice.cc +120]
  │       │   ├── ToString	[vim include/rocksdb/configurable.h +180]
  │       │   │   └── ToString
  │       │   ├── ToString	[vim include/rocksdb/table_properties.h +146]
  │       │   │   └── Name
  │       │   ├── ToString	[vim include/rocksdb/utilities/ldb_cmd_execute_result.h +27]
  │       │   ├── ToString	[vim include/rocksdb/statistics.h +564]
  │       │   │   └── std::string	[OUT-OF-TREE]
  │       │   ├── ToString	[vim include/rocksdb/file_system.h +132]
  │       │   │   └── str	[OUT-OF-TREE]
  │       │   ├── ToString	[vim utilities/simulator_cache/sim_cache.cc +287]
  │       │   │   ├── std::to_string	[OUT-OF-TREE]
  │       │   │   ├── get_miss_counter	[vim utilities/simulator_cache/sim_cache.cc +272]
  │       │   │   └── get_hit_counter	[vim utilities/simulator_cache/sim_cache.cc +276]
  │       │   ├── CompactOnDeletionCollectorFactory::ToString	[vim utilities/table_properties_collectors/compact_on_deletion_collector.cc +105]
  │       │   │   ├── Name
  │       │   │   └── str	[OUT-OF-TREE]
  │       │   ├── PersistentCacheConfig::ToString	[vim utilities/persistent_cache/persistent_cache_tier.cc +16]
  │       │   │   └── c_str	[OUT-OF-TREE]
  │       │   ├── ToString	[vim table/block_based/filter_block.h +151]
  │       │   │   └── error_msg	[OUT-OF-TREE]
  │       │   ├── BlockBasedFilterBlockReader::ToString	[vim table/block_based/block_based_filter_block.cc +306]
  │       │   │   ├── FilterBlockReaderCommon::GetOrReadFilterBlock	[vim table/block_based/filter_block_reader_common.cc +66]
  │       │   │   ├── BlockBasedFilterBlockReader::ParseFieldsFromBlock	[vim table/block_based/block_based_filter_block.cc +221]
  │       │   │   ├── GetValue
  │       │   │   ├── std::string	[OUT-OF-TREE]
  │       │   │   ├── s_bo	[OUT-OF-TREE]
  │       │   │   ├── s_hd	[OUT-OF-TREE]
  │       │   │   ├── s_fb	[OUT-OF-TREE]
  │       │   │   ├── DecodeFixed32	[vim util/coding_lean.h +74]
  │       │   │   ├── ROCKSDB_NAMESPACE::ToString
  │       │   │   ├── Slice
  │       │   │   ├── AppendItem
  │       │   │   └── ToString
  │       │   ├── TableProperties::ToString	[vim table/table_properties.cc +72]
  │       │   │   ├── ROCKSDB_NAMESPACE::ToString
  │       │   │   ├── std::string	[OUT-OF-TREE]
  │       │   │   └── AppendProperty
  │       │   ├── BlockHandle::ToString	[vim table/format.cc +82]
  │       │   │   ├── EncodeTo
  │       │   │   ├── Slice
  │       │   │   └── ToString
  │       │   ├── IndexValue::ToString	[vim table/format.cc +136]
  │       │   │   ├── EncodeTo
  │       │   │   ├── Slice
  │       │   │   └── ToString
  │       │   ├── Footer::ToString	[vim table/format.cc +262]
  │       │   │   ├── IsLegacyFooterFormat	[vim table/format.cc +147]
  │       │   │   ├── ToString
  │       │   │   └── ROCKSDB_NAMESPACE::ToString
  │       │   ├── BackupStatistics::ToString	[vim utilities/backupable/backupable_db.cc +81]
  │       │   │   ├── BackupStatistics::GetNumberSuccessBackup	[vim utilities/backupable/backupable_db.cc +74]
  │       │   │   └── BackupStatistics::GetNumberFailBackup	[vim utilities/backupable/backupable_db.cc +77]
  │       │   ├── HistogramWindowingImpl::ToString	[vim monitoring/histogram_windowing.cc +98]
  │       │   │   └── ToString
  │       │   ├── PerfContext::ToString	[vim monitoring/perf_context.cc +450]
  │       │   ├── IOStatsContext::ToString	[vim monitoring/iostats_context.cc +43]
  │       │   │   ├── IOSTATS_CONTEXT_OUTPUT	[OUT-OF-TREE]
  │       │   │   ├── str	[OUT-OF-TREE]
  │       │   │   └── find_last_not_of	[OUT-OF-TREE]
  │       │   ├── HistogramStat::ToString	[vim monitoring/histogram.cc +182]
  │       │   │   ├── num
  │       │   │   ├── Average
  │       │   │   ├── StandardDeviation
  │       │   │   ├── min
  │       │   │   ├── Median
  │       │   │   ├── max
  │       │   │   ├── Percentile
  │       │   │   ├── bucket_at	[vim monitoring/histogram.h +73]
  │       │   │   ├── BucketLimit	[vim monitoring/histogram.h +42]
  │       │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │       │   ├── HistogramImpl::ToString	[vim monitoring/histogram.cc +279]
  │       │   │   └── ToString
  │       │   └── StatisticsImpl::ToString	[vim monitoring/statistics.cc +380]
  │       │       ├── StatisticsImpl::getTickerCountLocked	[vim monitoring/statistics.cc +265]
  │       │       ├── StatisticsImpl::getHistogramImplLocked	[vim monitoring/statistics.cc +280]
  │       │       ├── Data
  │       │       ├── c_str	[OUT-OF-TREE]
  │       │       └── shrink_to_fit	[OUT-OF-TREE]
  │       └── c_str	[OUT-OF-TREE]
  ├── Write [+]
  │   ├── Write	[vim include/rocksdb/env.h +1588]
  │   │   └── Write
  │   ├── Write	[vim include/rocksdb/utilities/stackable_db.h +184]
  │   │   └── Write
  │   ├── Write	[vim include/rocksdb/utilities/transaction_db.h +240]
  │   │   └── Write
  │   ├── Write	[vim include/rocksdb/file_system.h +1417]
  │   │   └── Write
  │   ├── TraceWriterJniCallback::Write	[vim java/rocksjni/trace_writer_jnicallback.cc +38]
  │   │   ├── getJniEnv [+]
  │   │   │   ├── getJniEnv	[vim java/rocksjni/portal.h +1579]
  │   │   │   │   ├── GetEnv
  │   │   │   │   └── AttachCurrentThread	[OUT-OF-TREE]
  │   │   │   └── JniCallback::getJniEnv	[vim java/rocksjni/jnicallback.cc +33]
  │   │   │       └── JniUtil::getJniEnv
  │   │   ├── CallShortMethod	[OUT-OF-TREE]
  │   │   ├── ExceptionCheck	[OUT-OF-TREE]
  │   │   ├── ExceptionDescribe	[OUT-OF-TREE]
  │   │   ├── Status::IOError [+]
  │   │   │   ├── IOError	[vim include/rocksdb/io_status.h +100]
  │   │   │   │   ├── Slice
  │   │   │   │   └── IOStatus
  │   │   │   ├── IOError	[vim include/rocksdb/io_status.h +103]
  │   │   │   │   └── IOStatus
  │   │   │   ├── IOError	[vim include/rocksdb/status.h +195]
  │   │   │   │   ├── Slice
  │   │   │   │   └── Status
  │   │   │   ├── IOError	[vim include/rocksdb/status.h +198]
  │   │   │   │   └── Status
  │   │   │   ├── IOError	[vim env/io_posix.cc +56]
  │   │   │   │   ├── IOStatus::NoSpace
  │   │   │   │   ├── SetRetryable	[vim include/rocksdb/io_status.h +58]
  │   │   │   │   ├── IOStatus::PathNotFound
  │   │   │   │   ├── IOStatus::IOError
  │   │   │   │   ├── IOErrorMsg	[vim env/io_posix.cc +47]
  │   │   │   │   └── strerror	[OUT-OF-TREE]
  │   │   │   ├── IOError	[vim env/env_hdfs.cc +38]
  │   │   │   │   ├── Status::NoSpace
  │   │   │   │   ├── Status::PathNotFound
  │   │   │   │   ├── Status::IOError
  │   │   │   │   └── strerror	[OUT-OF-TREE]
  │   │   │   └── IOError	[vim port/win/io_win.h +38]
  │   │   │       ├── Status::NoSpace
  │   │   │       ├── Status::PathNotFound
  │   │   │       ├── Status::IOError
  │   │   │       └── strerror	[OUT-OF-TREE]
  │   │   ├── StatusJni::toCppStatus [+]
  │   │   │   ├── toCppStatus	[vim java/rocksjni/portal.h +513]
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::OK
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::NotFound
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::Corruption
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::NotSupported
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::InvalidArgument
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::IOError
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::MergeInProgress
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::Incomplete
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::ShutdownInProgress
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::TimedOut
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::Aborted
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::Busy
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::Expired
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::TryAgain
  │   │   │   │   ├── std::unique_ptr	[OUT-OF-TREE]
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::ColumnFamilyDropped
  │   │   │   │   └── ROCKSDB_NAMESPACE::SubCodeJni::toCppSubCode
  │   │   │   ├── toCppStatus	[vim java/rocksjni/portal.h +625]
  │   │   │   │   ├── getCodeMethod	[vim java/rocksjni/portal.h +334]
  │   │   │   │   ├── ROCKSDB_NAMESPACE::CodeJni::getValueMethod
  │   │   │   │   ├── getSubCodeMethod	[vim java/rocksjni/portal.h +355]
  │   │   │   │   ├── ROCKSDB_NAMESPACE::SubCodeJni::getValueMethod
  │   │   │   │   ├── CallByteMethod	[OUT-OF-TREE]
  │   │   │   │   ├── getStateMethod	[vim java/rocksjni/portal.h +376]
  │   │   │   │   ├── CallObjectMethod	[OUT-OF-TREE]
  │   │   │   │   ├── ExceptionCheck	[OUT-OF-TREE]
  │   │   │   │   ├── toCppStatus
  │   │   │   │   └── DeleteLocalRef	[OUT-OF-TREE]
  │   │   │   └── toCppStatus	[vim java/rocksjni/portal.h +959]
  │   │   │       ├── IsInstanceOf	[vim include/rocksdb/customizable.h +86]
  │   │   │       ├── getJClass
  │   │   │       ├── getStatusMethod	[vim java/rocksjni/portal.h +946]
  │   │   │       ├── CallObjectMethod	[OUT-OF-TREE]
  │   │   │       ├── ExceptionCheck	[OUT-OF-TREE]
  │   │   │       └── ROCKSDB_NAMESPACE::StatusJni::toCppStatus
  │   │   ├── releaseJniEnv [+]
  │   │   │   ├── releaseJniEnv	[vim java/rocksjni/portal.h +1621]
  │   │   │   │   └── DetachCurrentThread	[OUT-OF-TREE]
  │   │   │   └── JniCallback::releaseJniEnv	[vim java/rocksjni/jnicallback.cc +37]
  │   │   │       └── JniUtil::releaseJniEnv
  │   │   └── Status [+]
  │   │       ├── Status::Status	[vim util/status.cc +60]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   └── sev_	[OUT-OF-TREE]
  │   │       ├── Status	[vim include/rocksdb/status.h +37]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── state_	[OUT-OF-TREE]
  │   │       ├── Status	[vim include/rocksdb/status.h +519]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── state_	[OUT-OF-TREE]
  │   │       ├── Status	[vim include/rocksdb/status.h +523]
  │   │       │   └── Status
  │   │       ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │       ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │       └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │           ├── Status
  │   │           └── std::move	[OUT-OF-TREE]
  │   ├── FSRandomRWFileTracingWrapper::Write	[vim env/file_system_tracer.cc +374]
  │   │   ├── timer	[OUT-OF-TREE]
  │   │   ├── Start [+]
  │   │   │   ├── Start	[vim tools/db_bench_tool.cc +1909]
  │   │   │   │   └── NowMicros
  │   │   │   ├── Start	[vim util/stop_watch.h +98]
  │   │   │   │   └── NowNanos
  │   │   │   ├── Start	[vim util/timer.h +112]
  │   │   │   │   └── port::Thread	[OUT-OF-TREE]
  │   │   │   ├── Start	[vim db_stress_tool/db_stress_stat.h +56]
  │   │   │   │   ├── Clear
  │   │   │   │   ├── Env::Default
  │   │   │   │   └── NowMicros
  │   │   │   └── Start	[vim monitoring/perf_step_timer.h +33]
  │   │   │       └── time_now	[vim monitoring/perf_step_timer.h +39]
  │   │   ├── target [+]
  │   │   │   ├── target	[vim include/rocksdb/env.h +1216]
  │   │   │   ├── target	[vim include/rocksdb/file_system.h +1057]
  │   │   │   ├── target	[vim include/rocksdb/file_system.h +1249]
  │   │   │   ├── target	[vim include/rocksdb/file_system.h +1277]
  │   │   │   ├── target	[vim include/rocksdb/file_system.h +1312]
  │   │   │   ├── target	[vim include/rocksdb/file_system.h +1411]
  │   │   │   ├── target	[vim env/composite_env_wrapper.h +205]
  │   │   │   ├── target	[vim env/composite_env_wrapper.h +657]
  │   │   │   ├── target	[vim env/composite_env_wrapper.h +820]
  │   │   │   └── target	[vim env/composite_env_wrapper.h +892]
  │   │   ├── Write
  │   │   ├── ElapsedNanos	[vim util/stop_watch.h +100]
  │   │   │   └── NowNanos [+]
  │   │   │       ├── NowNanos	[vim include/rocksdb/env.h +447]
  │   │   │       ├── NowNanos	[vim include/rocksdb/env.h +1358]
  │   │   │       ├── NowNanos	[vim env/composite_env_wrapper.h +531]
  │   │   │       ├── NowNanos	[vim env/env_posix.cc +246]
  │   │   │       ├── MockEnv::NowNanos	[vim env/mock_env.cc +1043]
  │   │   │       └── WinEnv::NowNanos	[vim port/win/env_win.cc +1453]
  │   │   ├── io_record	[OUT-OF-TREE]
  │   │   ├── NowNanos [+]
  │   │   │   ├── NowNanos	[vim include/rocksdb/env.h +447]
  │   │   │   ├── NowNanos	[vim include/rocksdb/env.h +1358]
  │   │   │   ├── NowNanos	[vim env/composite_env_wrapper.h +531]
  │   │   │   ├── NowNanos	[vim env/env_posix.cc +246]
  │   │   │   ├── MockEnv::NowNanos	[vim env/mock_env.cc +1043]
  │   │   │   └── WinEnv::NowNanos	[vim port/win/env_win.cc +1453]
  │   │   ├── ToString [+]
  │   │   │   ├── Configurable::ToString	[vim options/configurable.cc +458]
  │   │   │   │   └── SerializeOptions
  │   │   │   ├── Status::ToString	[vim util/status.cc +79]
  │   │   │   │   ├── code
  │   │   │   │   └── result	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim util/string_util.h +23]
  │   │   │   │   └── std::to_string	[OUT-OF-TREE]
  │   │   │   ├── Slice::ToString	[vim util/slice.cc +157]
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   └── toHex	[vim util/slice.cc +120]
  │   │   │   ├── ToString	[vim include/rocksdb/configurable.h +180]
  │   │   │   │   └── ToString
  │   │   │   ├── ToString	[vim include/rocksdb/table_properties.h +146]
  │   │   │   │   └── Name
  │   │   │   ├── ToString	[vim include/rocksdb/utilities/ldb_cmd_execute_result.h +27]
  │   │   │   ├── ToString	[vim include/rocksdb/statistics.h +564]
  │   │   │   │   └── std::string	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim include/rocksdb/file_system.h +132]
  │   │   │   │   └── str	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim utilities/simulator_cache/sim_cache.cc +287]
  │   │   │   │   ├── std::to_string	[OUT-OF-TREE]
  │   │   │   │   ├── get_miss_counter	[vim utilities/simulator_cache/sim_cache.cc +272]
  │   │   │   │   └── get_hit_counter	[vim utilities/simulator_cache/sim_cache.cc +276]
  │   │   │   ├── CompactOnDeletionCollectorFactory::ToString	[vim utilities/table_properties_collectors/compact_on_deletion_collector.cc +105]
  │   │   │   │   ├── Name
  │   │   │   │   └── str	[OUT-OF-TREE]
  │   │   │   ├── PersistentCacheConfig::ToString	[vim utilities/persistent_cache/persistent_cache_tier.cc +16]
  │   │   │   │   └── c_str	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim table/block_based/filter_block.h +151]
  │   │   │   │   └── error_msg	[OUT-OF-TREE]
  │   │   │   ├── BlockBasedFilterBlockReader::ToString	[vim table/block_based/block_based_filter_block.cc +306]
  │   │   │   │   ├── FilterBlockReaderCommon::GetOrReadFilterBlock	[vim table/block_based/filter_block_reader_common.cc +66]
  │   │   │   │   ├── BlockBasedFilterBlockReader::ParseFieldsFromBlock	[vim table/block_based/block_based_filter_block.cc +221]
  │   │   │   │   ├── GetValue
  │   │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │   │   │   ├── s_bo	[OUT-OF-TREE]
  │   │   │   │   ├── s_hd	[OUT-OF-TREE]
  │   │   │   │   ├── s_fb	[OUT-OF-TREE]
  │   │   │   │   ├── DecodeFixed32	[vim util/coding_lean.h +74]
  │   │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │   │   │   ├── Slice
  │   │   │   │   ├── AppendItem
  │   │   │   │   └── ToString
  │   │   │   ├── TableProperties::ToString	[vim table/table_properties.cc +72]
  │   │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │   │   │   └── AppendProperty
  │   │   │   ├── BlockHandle::ToString	[vim table/format.cc +82]
  │   │   │   │   ├── EncodeTo
  │   │   │   │   ├── Slice
  │   │   │   │   └── ToString
  │   │   │   ├── IndexValue::ToString	[vim table/format.cc +136]
  │   │   │   │   ├── EncodeTo
  │   │   │   │   ├── Slice
  │   │   │   │   └── ToString
  │   │   │   ├── Footer::ToString	[vim table/format.cc +262]
  │   │   │   │   ├── IsLegacyFooterFormat	[vim table/format.cc +147]
  │   │   │   │   ├── ToString
  │   │   │   │   └── ROCKSDB_NAMESPACE::ToString
  │   │   │   ├── BackupStatistics::ToString	[vim utilities/backupable/backupable_db.cc +81]
  │   │   │   │   ├── BackupStatistics::GetNumberSuccessBackup	[vim utilities/backupable/backupable_db.cc +74]
  │   │   │   │   └── BackupStatistics::GetNumberFailBackup	[vim utilities/backupable/backupable_db.cc +77]
  │   │   │   ├── HistogramWindowingImpl::ToString	[vim monitoring/histogram_windowing.cc +98]
  │   │   │   │   └── ToString
  │   │   │   ├── PerfContext::ToString	[vim monitoring/perf_context.cc +450]
  │   │   │   ├── IOStatsContext::ToString	[vim monitoring/iostats_context.cc +43]
  │   │   │   │   ├── IOSTATS_CONTEXT_OUTPUT	[OUT-OF-TREE]
  │   │   │   │   ├── str	[OUT-OF-TREE]
  │   │   │   │   └── find_last_not_of	[OUT-OF-TREE]
  │   │   │   ├── HistogramStat::ToString	[vim monitoring/histogram.cc +182]
  │   │   │   │   ├── num
  │   │   │   │   ├── Average
  │   │   │   │   ├── StandardDeviation
  │   │   │   │   ├── min
  │   │   │   │   ├── Median
  │   │   │   │   ├── max
  │   │   │   │   ├── Percentile
  │   │   │   │   ├── bucket_at	[vim monitoring/histogram.h +73]
  │   │   │   │   ├── BucketLimit	[vim monitoring/histogram.h +42]
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── HistogramImpl::ToString	[vim monitoring/histogram.cc +279]
  │   │   │   │   └── ToString
  │   │   │   └── StatisticsImpl::ToString	[vim monitoring/statistics.cc +380]
  │   │   │       ├── StatisticsImpl::getTickerCountLocked	[vim monitoring/statistics.cc +265]
  │   │   │       ├── StatisticsImpl::getHistogramImplLocked	[vim monitoring/statistics.cc +280]
  │   │   │       ├── Data
  │   │   │       ├── c_str	[OUT-OF-TREE]
  │   │   │       └── shrink_to_fit	[OUT-OF-TREE]
  │   │   └── WriteIOOp [+]
  │   │       ├── IOTraceWriter::WriteIOOp	[vim trace_replay/io_tracer.cc +26]
  │   │       │   ├── GetFileSize
  │   │       │   ├── Status::OK
  │   │       │   ├── file_operation	[OUT-OF-TREE]
  │   │       │   ├── io_status
  │   │       │   ├── file_name
  │   │       │   ├── PutLengthPrefixedSlice	[vim util/coding.h +224]
  │   │       │   ├── PutFixed64	[vim util/coding.h +144]
  │   │       │   ├── TracerHelper::EncodeTrace	[vim trace_replay/trace_replay.cc +35]
  │   │       │   └── Write
  │   │       └── IOTracer::WriteIOOp	[vim trace_replay/io_tracer.cc +218]
  │   │           ├── lock_guard	[OUT-OF-TREE]
  │   │           ├── Status::OK
  │   │           └── WriteIOOp
  │   ├── PosixRandomRWFile::Write	[vim env/io_posix.cc +1403]
  │   │   ├── PosixPositionedWrite	[vim env/io_posix.cc +119]
  │   │   │   ├── std::min [+]
  │   │   │   │   ├── min	[vim monitoring/histogram.h +66]
  │   │   │   │   ├── min	[vim monitoring/histogram.h +133]
  │   │   │   │   └── min	[vim monitoring/histogram_windowing.h +38]
  │   │   │   └── pwrite [+]
  │   │   │       └── pwrite	[vim port/win/io_win.cc +72]
  │   │   ├── IOError [+]
  │   │   │   ├── IOError	[vim include/rocksdb/io_status.h +100]
  │   │   │   │   ├── Slice
  │   │   │   │   └── IOStatus
  │   │   │   ├── IOError	[vim include/rocksdb/io_status.h +103]
  │   │   │   │   └── IOStatus
  │   │   │   ├── IOError	[vim include/rocksdb/status.h +195]
  │   │   │   │   ├── Slice
  │   │   │   │   └── Status
  │   │   │   ├── IOError	[vim include/rocksdb/status.h +198]
  │   │   │   │   └── Status
  │   │   │   ├── IOError	[vim env/io_posix.cc +56]
  │   │   │   │   ├── IOStatus::NoSpace
  │   │   │   │   ├── SetRetryable	[vim include/rocksdb/io_status.h +58]
  │   │   │   │   ├── IOStatus::PathNotFound
  │   │   │   │   ├── IOStatus::IOError
  │   │   │   │   ├── IOErrorMsg	[vim env/io_posix.cc +47]
  │   │   │   │   └── strerror	[OUT-OF-TREE]
  │   │   │   ├── IOError	[vim env/env_hdfs.cc +38]
  │   │   │   │   ├── Status::NoSpace
  │   │   │   │   ├── Status::PathNotFound
  │   │   │   │   ├── Status::IOError
  │   │   │   │   └── strerror	[OUT-OF-TREE]
  │   │   │   └── IOError	[vim port/win/io_win.h +38]
  │   │   │       ├── Status::NoSpace
  │   │   │       ├── Status::PathNotFound
  │   │   │       ├── Status::IOError
  │   │   │       └── strerror	[OUT-OF-TREE]
  │   │   ├── ToString [+]
  │   │   │   ├── Configurable::ToString	[vim options/configurable.cc +458]
  │   │   │   │   └── SerializeOptions
  │   │   │   ├── Status::ToString	[vim util/status.cc +79]
  │   │   │   │   ├── code
  │   │   │   │   └── result	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim util/string_util.h +23]
  │   │   │   │   └── std::to_string	[OUT-OF-TREE]
  │   │   │   ├── Slice::ToString	[vim util/slice.cc +157]
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   └── toHex	[vim util/slice.cc +120]
  │   │   │   ├── ToString	[vim include/rocksdb/configurable.h +180]
  │   │   │   │   └── ToString
  │   │   │   ├── ToString	[vim include/rocksdb/table_properties.h +146]
  │   │   │   │   └── Name
  │   │   │   ├── ToString	[vim include/rocksdb/utilities/ldb_cmd_execute_result.h +27]
  │   │   │   ├── ToString	[vim include/rocksdb/statistics.h +564]
  │   │   │   │   └── std::string	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim include/rocksdb/file_system.h +132]
  │   │   │   │   └── str	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim utilities/simulator_cache/sim_cache.cc +287]
  │   │   │   │   ├── std::to_string	[OUT-OF-TREE]
  │   │   │   │   ├── get_miss_counter	[vim utilities/simulator_cache/sim_cache.cc +272]
  │   │   │   │   └── get_hit_counter	[vim utilities/simulator_cache/sim_cache.cc +276]
  │   │   │   ├── CompactOnDeletionCollectorFactory::ToString	[vim utilities/table_properties_collectors/compact_on_deletion_collector.cc +105]
  │   │   │   │   ├── Name
  │   │   │   │   └── str	[OUT-OF-TREE]
  │   │   │   ├── PersistentCacheConfig::ToString	[vim utilities/persistent_cache/persistent_cache_tier.cc +16]
  │   │   │   │   └── c_str	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim table/block_based/filter_block.h +151]
  │   │   │   │   └── error_msg	[OUT-OF-TREE]
  │   │   │   ├── BlockBasedFilterBlockReader::ToString	[vim table/block_based/block_based_filter_block.cc +306]
  │   │   │   │   ├── FilterBlockReaderCommon::GetOrReadFilterBlock	[vim table/block_based/filter_block_reader_common.cc +66]
  │   │   │   │   ├── BlockBasedFilterBlockReader::ParseFieldsFromBlock	[vim table/block_based/block_based_filter_block.cc +221]
  │   │   │   │   ├── GetValue
  │   │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │   │   │   ├── s_bo	[OUT-OF-TREE]
  │   │   │   │   ├── s_hd	[OUT-OF-TREE]
  │   │   │   │   ├── s_fb	[OUT-OF-TREE]
  │   │   │   │   ├── DecodeFixed32	[vim util/coding_lean.h +74]
  │   │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │   │   │   ├── Slice
  │   │   │   │   ├── AppendItem
  │   │   │   │   └── ToString
  │   │   │   ├── TableProperties::ToString	[vim table/table_properties.cc +72]
  │   │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │   │   │   └── AppendProperty
  │   │   │   ├── BlockHandle::ToString	[vim table/format.cc +82]
  │   │   │   │   ├── EncodeTo
  │   │   │   │   ├── Slice
  │   │   │   │   └── ToString
  │   │   │   ├── IndexValue::ToString	[vim table/format.cc +136]
  │   │   │   │   ├── EncodeTo
  │   │   │   │   ├── Slice
  │   │   │   │   └── ToString
  │   │   │   ├── Footer::ToString	[vim table/format.cc +262]
  │   │   │   │   ├── IsLegacyFooterFormat	[vim table/format.cc +147]
  │   │   │   │   ├── ToString
  │   │   │   │   └── ROCKSDB_NAMESPACE::ToString
  │   │   │   ├── BackupStatistics::ToString	[vim utilities/backupable/backupable_db.cc +81]
  │   │   │   │   ├── BackupStatistics::GetNumberSuccessBackup	[vim utilities/backupable/backupable_db.cc +74]
  │   │   │   │   └── BackupStatistics::GetNumberFailBackup	[vim utilities/backupable/backupable_db.cc +77]
  │   │   │   ├── HistogramWindowingImpl::ToString	[vim monitoring/histogram_windowing.cc +98]
  │   │   │   │   └── ToString
  │   │   │   ├── PerfContext::ToString	[vim monitoring/perf_context.cc +450]
  │   │   │   ├── IOStatsContext::ToString	[vim monitoring/iostats_context.cc +43]
  │   │   │   │   ├── IOSTATS_CONTEXT_OUTPUT	[OUT-OF-TREE]
  │   │   │   │   ├── str	[OUT-OF-TREE]
  │   │   │   │   └── find_last_not_of	[OUT-OF-TREE]
  │   │   │   ├── HistogramStat::ToString	[vim monitoring/histogram.cc +182]
  │   │   │   │   ├── num
  │   │   │   │   ├── Average
  │   │   │   │   ├── StandardDeviation
  │   │   │   │   ├── min
  │   │   │   │   ├── Median
  │   │   │   │   ├── max
  │   │   │   │   ├── Percentile
  │   │   │   │   ├── bucket_at	[vim monitoring/histogram.h +73]
  │   │   │   │   ├── BucketLimit	[vim monitoring/histogram.h +42]
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── HistogramImpl::ToString	[vim monitoring/histogram.cc +279]
  │   │   │   │   └── ToString
  │   │   │   └── StatisticsImpl::ToString	[vim monitoring/statistics.cc +380]
  │   │   │       ├── StatisticsImpl::getTickerCountLocked	[vim monitoring/statistics.cc +265]
  │   │   │       ├── StatisticsImpl::getHistogramImplLocked	[vim monitoring/statistics.cc +280]
  │   │   │       ├── Data
  │   │   │       ├── c_str	[OUT-OF-TREE]
  │   │   │       └── shrink_to_fit	[OUT-OF-TREE]
  │   │   └── IOStatus::OK [+]
  │   │       ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │       │   └── IOStatus
  │   │       └── OK	[vim include/rocksdb/status.h +153]
  │   │           └── Status
  │   ├── Write	[vim env/composite_env_wrapper.h +220]
  │   │   └── Write
  │   ├── Write	[vim env/composite_env_wrapper.h +835]
  │   │   ├── status_to_io_status	[vim include/rocksdb/io_status.h +254]
  │   │   │   ├── IOStatus::OK [+]
  │   │   │   │   ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │   │   │   │   └── IOStatus
  │   │   │   │   └── OK	[vim include/rocksdb/status.h +153]
  │   │   │   │       └── Status
  │   │   │   ├── strlen	[OUT-OF-TREE]
  │   │   │   ├── getState	[vim include/rocksdb/status.h +145]
  │   │   │   ├── Slice [+]
  │   │   │   │   ├── Slice::Slice	[vim util/slice.cc +142]
  │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +38]
  │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +41]
  │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +45]
  │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +50]
  │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   └── Slice	[vim include/rocksdb/slice.h +55]
  │   │   │   │       ├── data_	[OUT-OF-TREE]
  │   │   │   │       └── strlen	[OUT-OF-TREE]
  │   │   │   ├── IOStatus [+]
  │   │   │   │   ├── IOStatus	[vim include/rocksdb/io_status.h +39]
  │   │   │   │   │   └── IOStatus
  │   │   │   │   ├── IOStatus	[vim include/rocksdb/io_status.h +144]
  │   │   │   │   │   ├── Status
  │   │   │   │   │   ├── retryable_	[OUT-OF-TREE]
  │   │   │   │   │   ├── data_loss_	[OUT-OF-TREE]
  │   │   │   │   │   └── scope_	[OUT-OF-TREE]
  │   │   │   │   ├── IOStatus	[vim include/rocksdb/io_status.h +151]
  │   │   │   │   │   └── IOStatus
  │   │   │   │   ├── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +155]
  │   │   │   │   │   ├── Status
  │   │   │   │   │   ├── retryable_	[OUT-OF-TREE]
  │   │   │   │   │   ├── data_loss_	[OUT-OF-TREE]
  │   │   │   │   │   └── scope_	[OUT-OF-TREE]
  │   │   │   │   ├── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +177]
  │   │   │   │   │   ├── Status
  │   │   │   │   │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │   └── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +205]
  │   │   │   │       ├── IOStatus
  │   │   │   │       └── std::move	[OUT-OF-TREE]
  │   │   │   ├── code [+]
  │   │   │   │   └── code	[vim include/rocksdb/status.h +94]
  │   │   │   └── subcode [+]
  │   │   │       └── subcode	[vim include/rocksdb/status.h +120]
  │   │   └── Write
  │   ├── EncryptedRandomRWFile::Write	[vim env/env_encryption.cc +364]
  │   │   ├── dataToWrite	[OUT-OF-TREE]
  │   │   ├── Alignment [+]
  │   │   │   ├── Alignment	[vim util/aligned_buffer.h +97]
  │   │   │   └── Alignment	[vim util/aligned_buffer.h +126]
  │   │   ├── GetRequiredBufferAlignment [+]
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +626]
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +738]
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +834]
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +958]
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +1464]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +1499]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +1527]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +1585]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +572]
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +692]
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +821]
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +948]
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +1257]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +1297]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +1355]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +1414]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim env/io_posix.h +147]
  │   │   │   ├── GetRequiredBufferAlignment	[vim env/io_posix.h +210]
  │   │   │   ├── GetRequiredBufferAlignment	[vim env/io_posix.h +268]
  │   │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +36]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +97]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +152]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +217]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +645]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +710]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +770]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +832]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── EncryptedSequentialFile::GetRequiredBufferAlignment	[vim env/env_encryption.cc +126]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── EncryptedRandomAccessFile::GetRequiredBufferAlignment	[vim env/env_encryption.cc +217]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── EncryptedWritableFile::GetRequiredBufferAlignment	[vim env/env_encryption.cc +297]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── EncryptedRandomRWFile::GetRequiredBufferAlignment	[vim env/env_encryption.cc +358]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim utilities/fault_injection_env.h +112]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim utilities/fault_injection_fs.h +92]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim utilities/fault_injection_fs.h +123]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── GetRequiredBufferAlignment	[vim utilities/fault_injection_fs.h +143]
  │   │   │   │   └── GetRequiredBufferAlignment
  │   │   │   ├── WinRandomAccessFile::GetRequiredBufferAlignment	[vim port/win/io_win.cc +729]
  │   │   │   │   └── GetAlignment	[vim port/win/io_win.h +248]
  │   │   │   ├── WinWritableFile::GetRequiredBufferAlignment	[vim port/win/io_win.cc +942]
  │   │   │   │   └── GetAlignement	[vim port/win/io_win.h +305]
  │   │   │   └── WinRandomRWFile::GetRequiredBufferAlignment	[vim port/win/io_win.cc +1002]
  │   │   │       └── GetAlignement	[vim port/win/io_win.h +305]
  │   │   ├── AllocateNewBuffer	[vim util/aligned_buffer.h +147]
  │   │   │   ├── Roundup [+]
  │   │   │   │   ├── Roundup	[vim util/aligned_buffer.h +33]
  │   │   │   │   └── Roundup	[vim env/io_posix.h +319]
  │   │   │   └── ~static_cast	[OUT-OF-TREE]
  │   │   ├── memmove	[OUT-OF-TREE]
  │   │   ├── Size [+]
  │   │   │   ├── CoreLocalArray::Size	[vim util/core_local.h +55]
  │   │   │   ├── Size	[vim util/aligned_buffer.h +251]
  │   │   │   ├── Size	[vim env/io_posix.h +99]
  │   │   │   ├── Size	[vim env/mock_env.cc +81]
  │   │   │   ├── ColumnBase::Size	[vim utilities/cassandra/format.cc +26]
  │   │   │   ├── Column::Size	[vim utilities/cassandra/format.cc +68]
  │   │   │   │   └── ColumnBase::Size	[vim utilities/cassandra/format.cc +26]
  │   │   │   ├── ExpiringColumn::Size	[vim utilities/cassandra/format.cc +106]
  │   │   │   │   └── Column::Size	[vim utilities/cassandra/format.cc +68]
  │   │   │   ├── Tombstone::Size	[vim utilities/cassandra/format.cc +172]
  │   │   │   │   └── ColumnBase::Size	[vim utilities/cassandra/format.cc +26]
  │   │   │   ├── RowValue::Size	[vim utilities/cassandra/format.cc +216]
  │   │   │   │   └── Size
  │   │   │   ├── Size	[vim utilities/persistent_cache/block_cache_tier_file.h +267]
  │   │   │   ├── Size	[vim utilities/persistent_cache/block_cache_tier.h +99]
  │   │   │   ├── Size	[vim utilities/persistent_cache/persistent_cache_util.h +54]
  │   │   │   │   └── _	[OUT-OF-TREE]
  │   │   │   ├── Size	[vim table/block_based/block_based_table_builder.cc +538]
  │   │   │   └── Size	[vim db/dbformat.h +420]
  │   │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │   ├── Encrypt [+]
  │   │   │   ├── BlockAccessCipherStream::Encrypt	[vim env/env_encryption.cc +859]
  │   │   │   │   ├── BlockSize
  │   │   │   │   ├── CTRCipherStream::AllocateScratch	[vim env/env_encryption.cc +971]
  │   │   │   │   ├── std::min
  │   │   │   │   ├── CTRCipherStream::EncryptBlock	[vim env/env_encryption.cc +978]
  │   │   │   │   ├── memmove	[OUT-OF-TREE]
  │   │   │   │   └── Status::OK
  │   │   │   └── ROT13BlockCipher::Encrypt	[vim env/env_encryption.cc +959]
  │   │   │       └── Status::OK
  │   │   ├── Slice [+]
  │   │   │   ├── Slice::Slice	[vim util/slice.cc +142]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +38]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +41]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +45]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +50]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   └── Slice	[vim include/rocksdb/slice.h +55]
  │   │   │       ├── data_	[OUT-OF-TREE]
  │   │   │       └── strlen	[OUT-OF-TREE]
  │   │   ├── BufferStart [+]
  │   │   │   ├── BufferStart	[vim util/aligned_buffer.h +109]
  │   │   │   └── BufferStart	[vim util/aligned_buffer.h +113]
  │   │   ├── CurrentSize	[vim util/aligned_buffer.h +105]
  │   │   └── Write
  │   ├── Write	[vim env/mock_env.cc +127]
  │   │   ├── replace	[OUT-OF-TREE]
  │   │   ├── Now	[vim env/mock_env.cc +157]
  │   │   │   └── GetCurrentTime [+]
  │   │   │       ├── GetCurrentTime	[vim include/rocksdb/env.h +1367]
  │   │   │       ├── GetCurrentTime	[vim env/composite_env_wrapper.h +540]
  │   │   │       ├── GetCurrentTime	[vim env/env_posix.cc +291]
  │   │   │       ├── MockEnv::GetCurrentTime	[vim env/mock_env.cc +1031]
  │   │   │       ├── GetCurrentTime	[vim hdfs/env_hdfs.h +140]
  │   │   │       ├── WinEnvIO::GetCurrentTime	[vim port/win/env_win.cc +133]
  │   │   │       └── WinEnv::GetCurrentTime	[vim port/win/env_win.cc +1332]
  │   │   └── IOStatus::OK [+]
  │   │       ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │       │   └── IOStatus
  │   │       └── OK	[vim include/rocksdb/status.h +153]
  │   │           └── Status
  │   ├── Write	[vim env/mock_env.cc +269]
  │   │   └── Write
  │   ├── FileTraceWriter::Write	[vim utilities/trace/file_trace_reader_writer.cc +86]
  │   │   └── Append [+]
  │   │       ├── Append	[vim util/aligned_buffer.h +186]
  │   │       │   └── std::min
  │   │       ├── WritableFileWriter::Append	[vim file/writable_file_writer.cc +24]
  │   │       │   ├── WritableFileWriter::UpdateFileChecksum	[vim file/writable_file_writer.cc +434]
  │   │       │   ├── IOSTATS_TIMER_GUARD	[OUT-OF-TREE]
  │   │       │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │       │   ├── PrepareWrite
  │   │       │   ├── GetFileSize
  │   │       │   ├── IOOptions	[vim include/rocksdb/file_system.h +89]
  │   │       │   ├── std::min
  │   │       │   ├── AllocateNewBuffer	[vim util/aligned_buffer.h +147]
  │   │       │   ├── use_direct_io
  │   │       │   ├── Capacity
  │   │       │   ├── Append
  │   │       │   ├── Flush
  │   │       │   ├── CurrentSize	[vim util/aligned_buffer.h +105]
  │   │       │   ├── WritableFileWriter::WriteBuffered	[vim file/writable_file_writer.cc +379]
  │   │       │   └── TEST_KILL_RANDOM	[OUT-OF-TREE]
  │   │       ├── Append	[vim include/rocksdb/env.h +1514]
  │   │       │   └── Append
  │   │       ├── Append	[vim include/rocksdb/file_system.h +743]
  │   │       │   └── Append
  │   │       ├── Append	[vim include/rocksdb/file_system.h +1314]
  │   │       │   └── Append
  │   │       ├── Append	[vim include/rocksdb/file_system.h +1318]
  │   │       │   └── Append
  │   │       ├── Append	[vim env/io_posix.h +245]
  │   │       │   └── Append
  │   │       ├── Append	[vim env/io_posix.h +345]
  │   │       │   └── Append
  │   │       ├── FSWritableFileTracingWrapper::Append	[vim env/file_system_tracer.cc +297]
  │   │       │   ├── timer	[OUT-OF-TREE]
  │   │       │   ├── Start
  │   │       │   ├── target
  │   │       │   ├── Append
  │   │       │   ├── ElapsedNanos	[vim util/stop_watch.h +100]
  │   │       │   ├── io_record	[OUT-OF-TREE]
  │   │       │   ├── NowNanos
  │   │       │   ├── ToString
  │   │       │   └── WriteIOOp
  │   │       ├── PosixMmapFile::Append	[vim env/io_posix.cc +997]
  │   │       │   ├── UnmapCurrentRegion
  │   │       │   ├── MapNewRegion
  │   │       │   ├── TEST_KILL_RANDOM	[OUT-OF-TREE]
  │   │       │   └── IOStatus::OK
  │   │       ├── PosixWritableFile::Append	[vim env/io_posix.cc +1160]
  │   │       │   ├── use_direct_io
  │   │       │   ├── IsSectorAligned
  │   │       │   ├── GetRequiredBufferAlignment
  │   │       │   ├── PosixWrite	[vim env/io_posix.cc +97]
  │   │       │   ├── IOError
  │   │       │   └── IOStatus::OK
  │   │       ├── Append	[vim env/env_hdfs.cc +227]
  │   │       │   ├── hdfsWrite	[OUT-OF-TREE]
  │   │       │   ├── ROCKS_LOG_DEBUG	[OUT-OF-TREE]
  │   │       │   ├── c_str	[OUT-OF-TREE]
  │   │       │   ├── IOError
  │   │       │   └── Status::OK
  │   │       ├── Append	[vim env/env_hdfs.cc +261]
  │   │       │   ├── hdfsWrite	[OUT-OF-TREE]
  │   │       │   ├── IOError
  │   │       │   └── Status::OK
  │   │       ├── Append	[vim env/composite_env_wrapper.h +113]
  │   │       │   └── Append
  │   │       ├── Append	[vim env/composite_env_wrapper.h +726]
  │   │       │   ├── status_to_io_status	[vim include/rocksdb/io_status.h +254]
  │   │       │   └── Append
  │   │       ├── Append	[vim env/composite_env_wrapper.h +730]
  │   │       │   ├── status_to_io_status	[vim include/rocksdb/io_status.h +254]
  │   │       │   └── Append
  │   │       ├── Append	[vim env/file_system_tracer.h +275]
  │   │       │   └── Append
  │   │       ├── EncryptedWritableFile::Append	[vim env/env_encryption.cc +232]
  │   │       │   ├── dataToAppend	[OUT-OF-TREE]
  │   │       │   ├── GetFileSize
  │   │       │   ├── Alignment
  │   │       │   ├── GetRequiredBufferAlignment
  │   │       │   ├── AllocateNewBuffer	[vim util/aligned_buffer.h +147]
  │   │       │   ├── memmove	[OUT-OF-TREE]
  │   │       │   ├── Size
  │   │       │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │       │   ├── Encrypt
  │   │       │   ├── Slice
  │   │       │   ├── BufferStart
  │   │       │   ├── CurrentSize	[vim util/aligned_buffer.h +105]
  │   │       │   └── Append
  │   │       ├── Append	[vim env/mock_env.cc +140]
  │   │       │   ├── Now	[vim env/mock_env.cc +157]
  │   │       │   └── IOStatus::OK
  │   │       ├── Append	[vim env/mock_env.cc +311]
  │   │       │   ├── RequestToken
  │   │       │   ├── Append
  │   │       │   ├── Slice
  │   │       │   └── IOStatus::OK
  │   │       ├── Append	[vim utilities/env_mirror.cc +104]
  │   │       │   └── Append
  │   │       ├── Append	[vim utilities/fault_injection_fs.h +67]
  │   │       │   └── Append
  │   │       ├── Append	[vim utilities/persistent_cache/block_cache_tier_file.h +107]
  │   │       ├── Append	[vim utilities/persistent_cache/block_cache_tier_file_buffer.h +32]
  │   │       ├── CacheRecord::Append	[vim utilities/persistent_cache/block_cache_tier_file.cc +136]
  │   │       │   ├── Append
  │   │       │   ├── Used	[vim utilities/persistent_cache/block_cache_tier_file_buffer.h +48]
  │   │       │   ├── Capacity
  │   │       │   └── Free
  │   │       ├── WriteableCacheFile::Append	[vim utilities/persistent_cache/block_cache_tier_file.cc +318]
  │   │       │   ├── _	[OUT-OF-TREE]
  │   │       │   ├── CacheRecord::CalcSize
  │   │       │   ├── WriteableCacheFile::ExpandBuffer	[vim utilities/persistent_cache/block_cache_tier_file.cc +355]
  │   │       │   ├── ROCKS_LOG_DEBUG	[OUT-OF-TREE]
  │   │       │   ├── rec	[OUT-OF-TREE]
  │   │       │   ├── Serialize
  │   │       │   └── WriteableCacheFile::DispatchBuffer	[vim utilities/persistent_cache/block_cache_tier_file.cc +389]
  │   │       ├── Append	[vim utilities/env_librados.cc +327]
  │   │       │   ├── _SyncLocked	[vim utilities/env_librados.cc +278]
  │   │       │   ├── LOG_DEBUG	[OUT-OF-TREE]
  │   │       │   └── err_to_status	[vim utilities/env_librados.cc +41]
  │   │       ├── WriteBatchInternal::Append	[vim db/write_batch.cc +2101]
  │   │       │   ├── GetWalTerminationPoint	[vim include/rocksdb/write_batch.h +337]
  │   │       │   ├── is_cleared	[vim include/rocksdb/write_batch.h +58]
  │   │       │   ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │       │   ├── Count
  │   │       │   └── Status::OK
  │   │       ├── WinMmapFile::Append	[vim port/win/io_win.cc +386]
  │   │       │   ├── UnmapCurrentRegion
  │   │       │   ├── MapNewRegion
  │   │       │   ├── std::min
  │   │       │   ├── Roundup
  │   │       │   ├── size_t	[OUT-OF-TREE]
  │   │       │   ├── memset	[OUT-OF-TREE]
  │   │       │   └── Status::OK
  │   │       └── WinWritableFile::Append	[vim port/win/io_win.cc +946]
  │   │           └── WinWritableImpl::AppendImpl	[vim port/win/io_win.cc +767]
  │   ├── DBWithTTLImpl::Write	[vim utilities/ttl/db_ttl_impl.cc +269]
  │   │   ├── Handler	[OUT-OF-TREE]
  │   │   ├── env_	[OUT-OF-TREE]
  │   │   ├── PutCF [+]
  │   │   │   ├── PutCF	[vim tools/trace_analyzer_tool.h +262]
  │   │   │   │   └── TraceAnalyzer::HandlePut	[vim tools/trace_analyzer_tool.cc +1544]
  │   │   │   ├── PutCF	[vim tools/ldb_cmd.cc +2145]
  │   │   │   │   ├── commonPutMerge	[vim tools/ldb_cmd.cc +2134]
  │   │   │   │   └── Status::OK
  │   │   │   ├── PutCF	[vim include/rocksdb/write_batch.h +187]
  │   │   │   │   ├── Put
  │   │   │   │   ├── Status::OK
  │   │   │   │   └── Status::InvalidArgument
  │   │   │   ├── WriteBatchHandlerJniCallback::PutCF	[vim java/rocksjni/writebatchhandlerjnicallback.cc +131]
  │   │   │   │   ├── CallVoidMethod	[OUT-OF-TREE]
  │   │   │   │   ├── WriteBatchHandlerJniCallback::kv_op	[vim java/rocksjni/writebatchhandlerjnicallback.cc +444]
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::OK
  │   │   │   │   └── ROCKSDB_NAMESPACE::Status
  │   │   │   ├── PutCF	[vim utilities/transactions/write_prepared_txn_db.h +1055]
  │   │   │   │   ├── AddKey
  │   │   │   │   └── Status::OK
  │   │   │   ├── PutCF	[vim utilities/blob_db/blob_db_impl.cc +950]
  │   │   │   │   ├── Status::NotSupported
  │   │   │   │   └── BlobDBImpl::PutBlobValue	[vim utilities/blob_db/blob_db_impl.cc +1047]
  │   │   │   ├── PutCF	[vim db/write_batch.cc +87]
  │   │   │   │   └── Status::OK
  │   │   │   ├── PutCF	[vim db/write_batch.cc +151]
  │   │   │   │   ├── AssignTimestamp
  │   │   │   │   └── Status::OK
  │   │   │   ├── PutCF	[vim db/write_batch.cc +1525]
  │   │   │   │   └── PutCFImpl	[vim db/write_batch.cc +1417]
  │   │   │   └── PutCF	[vim db/db_impl/db_impl_secondary.h +244]
  │   │   │       └── AddColumnFamilyId	[vim db/db_impl/db_impl_secondary.h +231]
  │   │   ├── WriteBatchInternal::Put [+]
  │   │   │   ├── WriteBatchInternal::Put	[vim db/write_batch.cc +763]
  │   │   │   │   ├── Status::InvalidArgument
  │   │   │   │   ├── save	[OUT-OF-TREE]
  │   │   │   │   ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   ├── PutVarint32	[vim util/coding.h +155]
  │   │   │   │   ├── PutLengthPrefixedSlice	[vim util/coding.h +224]
  │   │   │   │   └── commit
  │   │   │   └── WriteBatchInternal::Put	[vim db/write_batch.cc +821]
  │   │   │       ├── WriteBatchInternal::CheckSlicePartsLength	[vim db/write_batch.cc +801]
  │   │   │       ├── save	[OUT-OF-TREE]
  │   │   │       ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │   │       ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │       ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │       ├── PutVarint32	[vim util/coding.h +155]
  │   │   │       ├── PutLengthPrefixedSlicePartsWithPadding	[vim util/coding.h +245]
  │   │   │       ├── PutLengthPrefixedSliceParts
  │   │   │       └── commit
  │   │   ├── MergeCF [+]
  │   │   │   ├── MergeCF	[vim tools/trace_analyzer_tool.h +279]
  │   │   │   │   └── TraceAnalyzer::HandleMerge	[vim tools/trace_analyzer_tool.cc +1679]
  │   │   │   ├── MergeCF	[vim tools/ldb_cmd.cc +2151]
  │   │   │   │   ├── commonPutMerge	[vim tools/ldb_cmd.cc +2134]
  │   │   │   │   └── Status::OK
  │   │   │   ├── MergeCF	[vim include/rocksdb/write_batch.h +227]
  │   │   │   │   ├── Merge
  │   │   │   │   ├── Status::OK
  │   │   │   │   └── Status::InvalidArgument
  │   │   │   ├── WriteBatchHandlerJniCallback::MergeCF	[vim java/rocksjni/writebatchhandlerjnicallback.cc +164]
  │   │   │   │   ├── CallVoidMethod	[OUT-OF-TREE]
  │   │   │   │   ├── WriteBatchHandlerJniCallback::kv_op	[vim java/rocksjni/writebatchhandlerjnicallback.cc +444]
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::OK
  │   │   │   │   └── ROCKSDB_NAMESPACE::Status
  │   │   │   ├── MergeCF	[vim utilities/transactions/write_prepared_txn_db.h +1067]
  │   │   │   │   ├── AddKey
  │   │   │   │   └── Status::OK
  │   │   │   ├── MergeCF	[vim utilities/blob_db/blob_db_impl.cc +986]
  │   │   │   │   └── Status::NotSupported
  │   │   │   ├── MergeCF	[vim db/write_batch.cc +107]
  │   │   │   │   └── Status::OK
  │   │   │   ├── MergeCF	[vim db/write_batch.cc +177]
  │   │   │   │   ├── AssignTimestamp
  │   │   │   │   └── Status::OK
  │   │   │   ├── MergeCF	[vim db/write_batch.cc +1691]
  │   │   │   │   ├── SeekToColumnFamily	[vim db/write_batch.cc +1377]
  │   │   │   │   ├── IsDuplicateKeySeq
  │   │   │   │   ├── GetMemTable
  │   │   │   │   ├── GetImmutableMemTableOptions	[vim db/memtable.h +416]
  │   │   │   │   ├── lkey	[OUT-OF-TREE]
  │   │   │   │   ├── MemTable::CountSuccessiveMergeEntries	[vim db/memtable.cc +1113]
  │   │   │   │   ├── GetColumnFamilyHandle
  │   │   │   │   ├── DefaultColumnFamily
  │   │   │   │   ├── Get
  │   │   │   │   ├── Slice
  │   │   │   │   ├── MergeHelper::TimedFullMerge	[vim db/merge_helper.cc +51]
  │   │   │   │   ├── Env::Default
  │   │   │   │   ├── Add
  │   │   │   │   ├── get_post_process_info	[vim db/write_batch.cc +1998]
  │   │   │   │   ├── Status::TryAgain
  │   │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │   │   │   ├── WriteBatchInternal::Merge
  │   │   │   │   ├── MaybeAdvanceSeq	[vim db/write_batch.cc +1356]
  │   │   │   │   └── CheckMemtableFull	[vim db/write_batch.cc +1818]
  │   │   │   └── MergeCF	[vim db/db_impl/db_impl_secondary.h +262]
  │   │   │       └── AddColumnFamilyId	[vim db/db_impl/db_impl_secondary.h +231]
  │   │   ├── DBWithTTLImpl::AppendTS	[vim utilities/ttl/db_ttl_impl.cc +142]
  │   │   │   ├── GetCurrentTime [+]
  │   │   │   │   ├── GetCurrentTime	[vim include/rocksdb/env.h +1367]
  │   │   │   │   ├── GetCurrentTime	[vim env/composite_env_wrapper.h +540]
  │   │   │   │   ├── GetCurrentTime	[vim env/env_posix.cc +291]
  │   │   │   │   ├── MockEnv::GetCurrentTime	[vim env/mock_env.cc +1031]
  │   │   │   │   ├── GetCurrentTime	[vim hdfs/env_hdfs.h +140]
  │   │   │   │   ├── WinEnvIO::GetCurrentTime	[vim port/win/env_win.cc +133]
  │   │   │   │   └── WinEnv::GetCurrentTime	[vim port/win/env_win.cc +1332]
  │   │   │   └── EncodeFixed32	[vim util/coding_lean.h +33]
  │   │   ├── WriteBatchInternal::Merge [+]
  │   │   │   ├── WriteBatchInternal::Merge	[vim db/write_batch.cc +1064]
  │   │   │   │   ├── Status::InvalidArgument
  │   │   │   │   ├── save	[OUT-OF-TREE]
  │   │   │   │   ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   ├── PutVarint32	[vim util/coding.h +155]
  │   │   │   │   ├── PutLengthPrefixedSlice	[vim util/coding.h +224]
  │   │   │   │   └── commit
  │   │   │   └── WriteBatchInternal::Merge	[vim db/write_batch.cc +1095]
  │   │   │       ├── WriteBatchInternal::CheckSlicePartsLength	[vim db/write_batch.cc +801]
  │   │   │       ├── save	[OUT-OF-TREE]
  │   │   │       ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │   │       ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │       ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │       ├── PutVarint32	[vim util/coding.h +155]
  │   │   │       ├── PutLengthPrefixedSliceParts
  │   │   │       └── commit
  │   │   ├── DeleteCF [+]
  │   │   │   ├── DeleteCF	[vim tools/trace_analyzer_tool.h +266]
  │   │   │   │   └── TraceAnalyzer::HandleDelete	[vim tools/trace_analyzer_tool.cc +1577]
  │   │   │   ├── DeleteCF	[vim tools/ldb_cmd.cc +2162]
  │   │   │   │   ├── LDBCommand::StringToHex	[vim tools/ldb_cmd.cc +814]
  │   │   │   │   ├── ToString
  │   │   │   │   └── Status::OK
  │   │   │   ├── DeleteCF	[vim include/rocksdb/write_batch.h +201]
  │   │   │   │   ├── Delete
  │   │   │   │   ├── Status::OK
  │   │   │   │   └── Status::InvalidArgument
  │   │   │   ├── WriteBatchHandlerJniCallback::DeleteCF	[vim java/rocksjni/writebatchhandlerjnicallback.cc +197]
  │   │   │   │   ├── CallVoidMethod	[OUT-OF-TREE]
  │   │   │   │   ├── WriteBatchHandlerJniCallback::k_op	[vim java/rocksjni/writebatchhandlerjnicallback.cc +506]
  │   │   │   │   ├── ROCKSDB_NAMESPACE::Status::OK
  │   │   │   │   └── ROCKSDB_NAMESPACE::Status
  │   │   │   ├── DeleteCF	[vim utilities/transactions/write_prepared_txn_db.h +1059]
  │   │   │   │   ├── AddKey
  │   │   │   │   └── Status::OK
  │   │   │   ├── DeleteCF	[vim utilities/blob_db/blob_db_impl.cc +961]
  │   │   │   │   ├── Status::NotSupported
  │   │   │   │   └── WriteBatchInternal::Delete
  │   │   │   ├── DeleteCF	[vim db/write_batch.cc +92]
  │   │   │   │   └── Status::OK
  │   │   │   ├── DeleteCF	[vim db/write_batch.cc +157]
  │   │   │   │   ├── AssignTimestamp
  │   │   │   │   └── Status::OK
  │   │   │   ├── DeleteCF	[vim db/write_batch.cc +1549]
  │   │   │   │   ├── SeekToColumnFamily	[vim db/write_batch.cc +1377]
  │   │   │   │   ├── IsDuplicateKeySeq
  │   │   │   │   ├── MaybeAdvanceSeq	[vim db/write_batch.cc +1356]
  │   │   │   │   ├── user_comparator
  │   │   │   │   ├── timestamp_size	[vim include/rocksdb/comparator.h +101]
  │   │   │   │   ├── DeleteImpl	[vim db/write_batch.cc +1530]
  │   │   │   │   ├── Slice
  │   │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │   │   │   └── WriteBatchInternal::Delete
  │   │   │   └── DeleteCF	[vim db/db_impl/db_impl_secondary.h +249]
  │   │   │       └── AddColumnFamilyId	[vim db/db_impl/db_impl_secondary.h +231]
  │   │   ├── WriteBatchInternal::Delete [+]
  │   │   │   ├── WriteBatchInternal::Delete	[vim db/write_batch.cc +909]
  │   │   │   │   ├── save	[OUT-OF-TREE]
  │   │   │   │   ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   ├── PutLengthPrefixedSlice	[vim util/coding.h +224]
  │   │   │   │   ├── PutVarint32	[vim util/coding.h +155]
  │   │   │   │   └── commit
  │   │   │   └── WriteBatchInternal::Delete	[vim db/write_batch.cc +938]
  │   │   │       ├── save	[OUT-OF-TREE]
  │   │   │       ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │   │       ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │       ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │       ├── PutVarint32	[vim util/coding.h +155]
  │   │   │       ├── PutLengthPrefixedSliceParts
  │   │   │       ├── PutLengthPrefixedSlicePartsWithPadding	[vim util/coding.h +245]
  │   │   │       └── commit
  │   │   ├── Status::OK [+]
  │   │   │   ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │   │   │   └── IOStatus
  │   │   │   └── OK	[vim include/rocksdb/status.h +153]
  │   │   │       └── Status
  │   │   ├── LogData [+]
  │   │   │   ├── WriteBatchHandlerJniCallback::LogData	[vim java/rocksjni/writebatchhandlerjnicallback.cc +289]
  │   │   │   │   ├── CallVoidMethod	[OUT-OF-TREE]
  │   │   │   │   └── WriteBatchHandlerJniCallback::k_op	[vim java/rocksjni/writebatchhandlerjnicallback.cc +506]
  │   │   │   ├── LogData	[vim utilities/blob_db/blob_db_impl.cc +991]
  │   │   │   │   └── PutLogData
  │   │   │   └── WriteBatch::Handler::LogData	[vim db/write_batch.cc +313]
  │   │   ├── PutLogData [+]
  │   │   │   ├── TransactionBaseImpl::PutLogData	[vim utilities/transactions/transaction_base.cc +532]
  │   │   │   │   └── PutLogData
  │   │   │   ├── WriteBatchWithIndex::PutLogData	[vim utilities/write_batch_with_index/write_batch_with_index.cc +758]
  │   │   │   │   └── PutLogData
  │   │   │   └── WriteBatch::PutLogData	[vim db/write_batch.cc +1144]
  │   │   │       ├── save	[OUT-OF-TREE]
  │   │   │       ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │       ├── PutLengthPrefixedSlice	[vim util/coding.h +224]
  │   │   │       └── commit
  │   │   ├── handler	[OUT-OF-TREE]
  │   │   ├── GetEnv [+]
  │   │   │   ├── GetEnv	[vim include/rocksdb/utilities/stackable_db.h +305]
  │   │   │   │   └── GetEnv
  │   │   │   └── DBImpl::GetEnv	[vim db/db_impl/db_impl.cc +3101]
  │   │   ├── Iterate [+]
  │   │   │   ├── WriteBatch::Iterate	[vim db/write_batch.cc +515]
  │   │   │   │   ├── Status::Corruption
  │   │   │   │   └── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   ├── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   │   ├── input
  │   │   │   │   ├── Continue
  │   │   │   │   ├── ReadRecordFromWriteBatch	[vim db/write_batch.cc +415]
  │   │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │   │   │   ├── PutCF
  │   │   │   │   ├── DeleteCF
  │   │   │   │   ├── SingleDeleteCF
  │   │   │   │   ├── DeleteRangeCF
  │   │   │   │   ├── MergeCF
  │   │   │   │   ├── PutBlobIndexCF
  │   │   │   │   ├── LogData
  │   │   │   │   ├── MarkBeginPrepare
  │   │   │   │   ├── WriteAfterCommit
  │   │   │   │   ├── WriteBeforePrepare
  │   │   │   │   ├── Status::NotSupported
  │   │   │   │   ├── MarkEndPrepare
  │   │   │   │   ├── MarkCommit
  │   │   │   │   ├── MarkRollback
  │   │   │   │   ├── MarkNoop
  │   │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │   │   ├── Status::Corruption
  │   │   │   │   └── Status::OK
  │   │   │   └── VersionEditHandlerBase::Iterate	[vim db/version_edit_handler.cc +18]
  │   │   │       ├── Initialize
  │   │   │       ├── Reader::LastRecordEnd	[vim db/log_reader.cc +234]
  │   │   │       ├── ReadRecord
  │   │   │       ├── DecodeFrom
  │   │   │       ├── AtomicGroupReadBuffer::AddEdit	[vim db/version_set.cc +3700]
  │   │   │       ├── AtomicGroupReadBuffer::IsFull	[vim db/version_set.cc +3734]
  │   │   │       ├── replay_buffer
  │   │   │       ├── ApplyVersionEdit
  │   │   │       ├── Clear
  │   │   │       ├── CheckIterationResult
  │   │   │       └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   └── Write
  │   ├── PessimisticTransactionDB::Write	[vim utilities/transactions/pessimistic_transaction_db.cc +511]
  │   │   └── WriteWithConcurrencyControl	[vim utilities/transactions/pessimistic_transaction_db.h +71]
  │   │       ├── PessimisticTransactionDB::BeginInternalTransaction	[vim utilities/transactions/pessimistic_transaction_db.cc +405]
  │   │       │   ├── BeginTransaction
  │   │       │   └── SetLockTimeout
  │   │       ├── DisableIndexing	[vim utilities/transactions/transaction_base.h +218]
  │   │       ├── static_cast_with_check	[vim util/cast_util.h +13]
  │   │       └── PessimisticTransaction::CommitBatch	[vim utilities/transactions/pessimistic_transaction.cc +137]
  │   │           ├── keys_to_unlock	[OUT-OF-TREE]
  │   │           ├── Create
  │   │           ├── PessimisticTransaction::LockBatch	[vim utilities/transactions/pessimistic_transaction.cc +472]
  │   │           ├── IsExpired
  │   │           ├── std::atomic_compare_exchange_strong	[OUT-OF-TREE]
  │   │           ├── CommitBatchInternal
  │   │           ├── Status::Expired
  │   │           ├── Status::InvalidArgument
  │   │           └── UnLock
  │   ├── WriteCommittedTxnDB::Write	[vim utilities/transactions/pessimistic_transaction_db.cc +516]
  │   │   ├── Write
  │   │   └── WriteWithConcurrencyControl	[vim utilities/transactions/pessimistic_transaction_db.h +71]
  │   │       ├── PessimisticTransactionDB::BeginInternalTransaction	[vim utilities/transactions/pessimistic_transaction_db.cc +405]
  │   │       │   ├── BeginTransaction
  │   │       │   └── SetLockTimeout
  │   │       ├── DisableIndexing	[vim utilities/transactions/transaction_base.h +218]
  │   │       ├── static_cast_with_check	[vim util/cast_util.h +13]
  │   │       └── PessimisticTransaction::CommitBatch	[vim utilities/transactions/pessimistic_transaction.cc +137]
  │   │           ├── keys_to_unlock	[OUT-OF-TREE]
  │   │           ├── Create
  │   │           ├── PessimisticTransaction::LockBatch	[vim utilities/transactions/pessimistic_transaction.cc +472]
  │   │           ├── IsExpired
  │   │           ├── std::atomic_compare_exchange_strong	[OUT-OF-TREE]
  │   │           ├── CommitBatchInternal
  │   │           ├── Status::Expired
  │   │           ├── Status::InvalidArgument
  │   │           └── UnLock
  │   ├── WriteCommittedTxnDB::Write	[vim utilities/transactions/pessimistic_transaction_db.cc +525]
  │   │   ├── Write
  │   │   └── WriteWithConcurrencyControl	[vim utilities/transactions/pessimistic_transaction_db.h +71]
  │   │       ├── PessimisticTransactionDB::BeginInternalTransaction	[vim utilities/transactions/pessimistic_transaction_db.cc +405]
  │   │       │   ├── BeginTransaction
  │   │       │   └── SetLockTimeout
  │   │       ├── DisableIndexing	[vim utilities/transactions/transaction_base.h +218]
  │   │       ├── static_cast_with_check	[vim util/cast_util.h +13]
  │   │       └── PessimisticTransaction::CommitBatch	[vim utilities/transactions/pessimistic_transaction.cc +137]
  │   │           ├── keys_to_unlock	[OUT-OF-TREE]
  │   │           ├── Create
  │   │           ├── PessimisticTransaction::LockBatch	[vim utilities/transactions/pessimistic_transaction.cc +472]
  │   │           ├── IsExpired
  │   │           ├── std::atomic_compare_exchange_strong	[OUT-OF-TREE]
  │   │           ├── CommitBatchInternal
  │   │           ├── Status::Expired
  │   │           ├── Status::InvalidArgument
  │   │           └── UnLock
  │   ├── WritePreparedTxnDB::Write	[vim utilities/transactions/write_prepared_txn_db.cc +115]
  │   │   ├── WritePreparedTxnDB::WriteInternal	[vim utilities/transactions/write_prepared_txn_db.cc +146]
  │   │   │   ├── Count [+]
  │   │   │   │   ├── WriteBatch::Count	[vim db/write_batch.cc +337]
  │   │   │   │   └── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │   ├── Status::OK [+]
  │   │   │   │   ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │   │   │   │   └── IOStatus
  │   │   │   │   └── OK	[vim include/rocksdb/status.h +153]
  │   │   │   │       └── Status
  │   │   │   ├── counter	[OUT-OF-TREE]
  │   │   │   ├── GetCFComparatorMap	[vim utilities/transactions/write_prepared_txn_db.h +433]
  │   │   │   ├── Iterate [+]
  │   │   │   │   ├── WriteBatch::Iterate	[vim db/write_batch.cc +515]
  │   │   │   │   │   ├── Status::Corruption
  │   │   │   │   │   └── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   │   ├── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   │   │   ├── input
  │   │   │   │   │   ├── Continue
  │   │   │   │   │   ├── ReadRecordFromWriteBatch	[vim db/write_batch.cc +415]
  │   │   │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │   │   │   │   ├── PutCF
  │   │   │   │   │   ├── DeleteCF
  │   │   │   │   │   ├── SingleDeleteCF
  │   │   │   │   │   ├── DeleteRangeCF
  │   │   │   │   │   ├── MergeCF
  │   │   │   │   │   ├── PutBlobIndexCF
  │   │   │   │   │   ├── LogData
  │   │   │   │   │   ├── MarkBeginPrepare
  │   │   │   │   │   ├── WriteAfterCommit
  │   │   │   │   │   ├── WriteBeforePrepare
  │   │   │   │   │   ├── Status::NotSupported
  │   │   │   │   │   ├── MarkEndPrepare
  │   │   │   │   │   ├── MarkCommit
  │   │   │   │   │   ├── MarkRollback
  │   │   │   │   │   ├── MarkNoop
  │   │   │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │   │   │   ├── Status::Corruption
  │   │   │   │   │   └── Status::OK
  │   │   │   │   └── VersionEditHandlerBase::Iterate	[vim db/version_edit_handler.cc +18]
  │   │   │   │       ├── Initialize
  │   │   │   │       ├── Reader::LastRecordEnd	[vim db/log_reader.cc +234]
  │   │   │   │       ├── ReadRecord
  │   │   │   │       ├── DecodeFrom
  │   │   │   │       ├── AtomicGroupReadBuffer::AddEdit	[vim db/version_set.cc +3700]
  │   │   │   │       ├── AtomicGroupReadBuffer::IsFull	[vim db/version_set.cc +3734]
  │   │   │   │       ├── replay_buffer
  │   │   │   │       ├── ApplyVersionEdit
  │   │   │   │       ├── Clear
  │   │   │   │       ├── CheckIterationResult
  │   │   │   │       └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │   ├── BatchCount	[vim utilities/transactions/write_prepared_txn_db.h +1049]
  │   │   │   ├── WPRecordTick	[vim utilities/transactions/write_prepared_txn_db.h +508]
  │   │   │   │   └── RecordTick	[vim monitoring/statistics.h +124]
  │   │   │   ├── write_options	[OUT-OF-TREE]
  │   │   │   ├── WriteBatchInternal::InsertNoop	[vim db/write_batch.cc +854]
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   └── Status::OK
  │   │   │   ├── add_prepared_callback	[OUT-OF-TREE]
  │   │   │   ├── update_commit_map	[OUT-OF-TREE]
  │   │   │   ├── SetId [+]
  │   │   │   │   ├── SetId	[vim tools/db_bench_tool.cc +1959]
  │   │   │   │   ├── SetId	[vim include/rocksdb/utilities/transaction.h +532]
  │   │   │   │   └── SetId	[vim utilities/transactions/write_prepared_txn.h +82]
  │   │   │   ├── ROCKS_LOG_DETAILS	[OUT-OF-TREE]
  │   │   │   ├── immutable_db_options	[vim db/db_impl/db_impl.h +703]
  │   │   │   ├── update_commit_map_with_prepare	[OUT-OF-TREE]
  │   │   │   └── DBImpl::WriteImpl	[RECURSIVE]	[vim db/db_impl/db_impl_write.cc +68]
  │   │   └── WriteWithConcurrencyControl	[vim utilities/transactions/pessimistic_transaction_db.h +71]
  │   │       ├── PessimisticTransactionDB::BeginInternalTransaction	[vim utilities/transactions/pessimistic_transaction_db.cc +405]
  │   │       │   ├── BeginTransaction
  │   │       │   └── SetLockTimeout
  │   │       ├── DisableIndexing	[vim utilities/transactions/transaction_base.h +218]
  │   │       ├── static_cast_with_check	[vim util/cast_util.h +13]
  │   │       └── PessimisticTransaction::CommitBatch	[vim utilities/transactions/pessimistic_transaction.cc +137]
  │   │           ├── keys_to_unlock	[OUT-OF-TREE]
  │   │           ├── Create
  │   │           ├── PessimisticTransaction::LockBatch	[vim utilities/transactions/pessimistic_transaction.cc +472]
  │   │           ├── IsExpired
  │   │           ├── std::atomic_compare_exchange_strong	[OUT-OF-TREE]
  │   │           ├── CommitBatchInternal
  │   │           ├── Status::Expired
  │   │           ├── Status::InvalidArgument
  │   │           └── UnLock
  │   ├── WritePreparedTxnDB::Write	[vim utilities/transactions/write_prepared_txn_db.cc +127]
  │   │   ├── WritePreparedTxnDB::WriteInternal	[vim utilities/transactions/write_prepared_txn_db.cc +146]
  │   │   │   ├── Count [+]
  │   │   │   │   ├── WriteBatch::Count	[vim db/write_batch.cc +337]
  │   │   │   │   └── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │   ├── Status::OK [+]
  │   │   │   │   ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │   │   │   │   └── IOStatus
  │   │   │   │   └── OK	[vim include/rocksdb/status.h +153]
  │   │   │   │       └── Status
  │   │   │   ├── counter	[OUT-OF-TREE]
  │   │   │   ├── GetCFComparatorMap	[vim utilities/transactions/write_prepared_txn_db.h +433]
  │   │   │   ├── Iterate [+]
  │   │   │   │   ├── WriteBatch::Iterate	[vim db/write_batch.cc +515]
  │   │   │   │   │   ├── Status::Corruption
  │   │   │   │   │   └── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   │   ├── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   │   │   ├── input
  │   │   │   │   │   ├── Continue
  │   │   │   │   │   ├── ReadRecordFromWriteBatch	[vim db/write_batch.cc +415]
  │   │   │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │   │   │   │   ├── PutCF
  │   │   │   │   │   ├── DeleteCF
  │   │   │   │   │   ├── SingleDeleteCF
  │   │   │   │   │   ├── DeleteRangeCF
  │   │   │   │   │   ├── MergeCF
  │   │   │   │   │   ├── PutBlobIndexCF
  │   │   │   │   │   ├── LogData
  │   │   │   │   │   ├── MarkBeginPrepare
  │   │   │   │   │   ├── WriteAfterCommit
  │   │   │   │   │   ├── WriteBeforePrepare
  │   │   │   │   │   ├── Status::NotSupported
  │   │   │   │   │   ├── MarkEndPrepare
  │   │   │   │   │   ├── MarkCommit
  │   │   │   │   │   ├── MarkRollback
  │   │   │   │   │   ├── MarkNoop
  │   │   │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │   │   │   ├── Status::Corruption
  │   │   │   │   │   └── Status::OK
  │   │   │   │   └── VersionEditHandlerBase::Iterate	[vim db/version_edit_handler.cc +18]
  │   │   │   │       ├── Initialize
  │   │   │   │       ├── Reader::LastRecordEnd	[vim db/log_reader.cc +234]
  │   │   │   │       ├── ReadRecord
  │   │   │   │       ├── DecodeFrom
  │   │   │   │       ├── AtomicGroupReadBuffer::AddEdit	[vim db/version_set.cc +3700]
  │   │   │   │       ├── AtomicGroupReadBuffer::IsFull	[vim db/version_set.cc +3734]
  │   │   │   │       ├── replay_buffer
  │   │   │   │       ├── ApplyVersionEdit
  │   │   │   │       ├── Clear
  │   │   │   │       ├── CheckIterationResult
  │   │   │   │       └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │   ├── BatchCount	[vim utilities/transactions/write_prepared_txn_db.h +1049]
  │   │   │   ├── WPRecordTick	[vim utilities/transactions/write_prepared_txn_db.h +508]
  │   │   │   │   └── RecordTick	[vim monitoring/statistics.h +124]
  │   │   │   ├── write_options	[OUT-OF-TREE]
  │   │   │   ├── WriteBatchInternal::InsertNoop	[vim db/write_batch.cc +854]
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   └── Status::OK
  │   │   │   ├── add_prepared_callback	[OUT-OF-TREE]
  │   │   │   ├── update_commit_map	[OUT-OF-TREE]
  │   │   │   ├── SetId [+]
  │   │   │   │   ├── SetId	[vim tools/db_bench_tool.cc +1959]
  │   │   │   │   ├── SetId	[vim include/rocksdb/utilities/transaction.h +532]
  │   │   │   │   └── SetId	[vim utilities/transactions/write_prepared_txn.h +82]
  │   │   │   ├── ROCKS_LOG_DETAILS	[OUT-OF-TREE]
  │   │   │   ├── immutable_db_options	[vim db/db_impl/db_impl.h +703]
  │   │   │   ├── update_commit_map_with_prepare	[OUT-OF-TREE]
  │   │   │   └── DBImpl::WriteImpl	[RECURSIVE]	[vim db/db_impl/db_impl_write.cc +68]
  │   │   └── PessimisticTransactionDB::WriteWithConcurrencyControl [+]
  │   │       └── WriteWithConcurrencyControl	[vim utilities/transactions/pessimistic_transaction_db.h +71]
  │   │           ├── PessimisticTransactionDB::BeginInternalTransaction	[vim utilities/transactions/pessimistic_transaction_db.cc +405]
  │   │           │   ├── BeginTransaction
  │   │           │   └── SetLockTimeout
  │   │           ├── DisableIndexing	[vim utilities/transactions/transaction_base.h +218]
  │   │           ├── static_cast_with_check	[vim util/cast_util.h +13]
  │   │           └── PessimisticTransaction::CommitBatch	[vim utilities/transactions/pessimistic_transaction.cc +137]
  │   │               ├── keys_to_unlock	[OUT-OF-TREE]
  │   │               ├── Create
  │   │               ├── PessimisticTransaction::LockBatch	[vim utilities/transactions/pessimistic_transaction.cc +472]
  │   │               ├── IsExpired
  │   │               ├── std::atomic_compare_exchange_strong	[OUT-OF-TREE]
  │   │               ├── CommitBatchInternal
  │   │               ├── Status::Expired
  │   │               ├── Status::InvalidArgument
  │   │               └── UnLock
  │   ├── Write	[vim utilities/transactions/optimistic_transaction_db_impl.h +57]
  │   │   ├── WriteBatch::HasDeleteRange	[vim db/write_batch.cc +374]
  │   │   │   └── WriteBatch::ComputeContentFlags	[vim db/write_batch.cc +339]
  │   │   │       ├── Iterate
  │   │   │       └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   ├── Status::NotSupported [+]
  │   │   │   ├── NotSupported	[vim include/rocksdb/io_status.h +69]
  │   │   │   │   ├── Slice
  │   │   │   │   └── IOStatus
  │   │   │   ├── NotSupported	[vim include/rocksdb/io_status.h +72]
  │   │   │   │   └── IOStatus
  │   │   │   ├── NotSupported	[vim include/rocksdb/status.h +181]
  │   │   │   │   ├── Slice
  │   │   │   │   └── Status
  │   │   │   └── NotSupported	[vim include/rocksdb/status.h +184]
  │   │   │       └── Status
  │   │   └── OptimisticTransactionDB::Write [+]
  │   │       ├── Write	[vim include/rocksdb/env.h +1588]
  │   │       │   └── Write
  │   │       ├── Write	[vim include/rocksdb/utilities/stackable_db.h +184]
  │   │       │   └── Write
  │   │       ├── Write	[vim include/rocksdb/utilities/transaction_db.h +240]
  │   │       │   └── Write
  │   │       ├── Write	[vim include/rocksdb/file_system.h +1417]
  │   │       │   └── Write
  │   │       ├── TraceWriterJniCallback::Write	[vim java/rocksjni/trace_writer_jnicallback.cc +38]
  │   │       │   ├── getJniEnv [+]
  │   │       │   │   ├── getJniEnv	[vim java/rocksjni/portal.h +1579]
  │   │       │   │   │   ├── GetEnv
  │   │       │   │   │   └── AttachCurrentThread	[OUT-OF-TREE]
  │   │       │   │   └── JniCallback::getJniEnv	[vim java/rocksjni/jnicallback.cc +33]
  │   │       │   │       └── JniUtil::getJniEnv
  │   │       │   ├── CallShortMethod	[OUT-OF-TREE]
  │   │       │   ├── ExceptionCheck	[OUT-OF-TREE]
  │   │       │   ├── ExceptionDescribe	[OUT-OF-TREE]
  │   │       │   ├── Status::IOError [+]
  │   │       │   │   ├── IOError	[vim include/rocksdb/io_status.h +100]
  │   │       │   │   │   ├── Slice
  │   │       │   │   │   └── IOStatus
  │   │       │   │   ├── IOError	[vim include/rocksdb/io_status.h +103]
  │   │       │   │   │   └── IOStatus
  │   │       │   │   ├── IOError	[vim include/rocksdb/status.h +195]
  │   │       │   │   │   ├── Slice
  │   │       │   │   │   └── Status
  │   │       │   │   ├── IOError	[vim include/rocksdb/status.h +198]
  │   │       │   │   │   └── Status
  │   │       │   │   ├── IOError	[vim env/io_posix.cc +56]
  │   │       │   │   │   ├── IOStatus::NoSpace
  │   │       │   │   │   ├── SetRetryable	[vim include/rocksdb/io_status.h +58]
  │   │       │   │   │   ├── IOStatus::PathNotFound
  │   │       │   │   │   ├── IOStatus::IOError
  │   │       │   │   │   ├── IOErrorMsg	[vim env/io_posix.cc +47]
  │   │       │   │   │   └── strerror	[OUT-OF-TREE]
  │   │       │   │   ├── IOError	[vim env/env_hdfs.cc +38]
  │   │       │   │   │   ├── Status::NoSpace
  │   │       │   │   │   ├── Status::PathNotFound
  │   │       │   │   │   ├── Status::IOError
  │   │       │   │   │   └── strerror	[OUT-OF-TREE]
  │   │       │   │   └── IOError	[vim port/win/io_win.h +38]
  │   │       │   │       ├── Status::NoSpace
  │   │       │   │       ├── Status::PathNotFound
  │   │       │   │       ├── Status::IOError
  │   │       │   │       └── strerror	[OUT-OF-TREE]
  │   │       │   ├── StatusJni::toCppStatus [+]
  │   │       │   │   ├── toCppStatus	[vim java/rocksjni/portal.h +513]
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::OK
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::NotFound
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::Corruption
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::NotSupported
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::InvalidArgument
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::IOError
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::MergeInProgress
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::Incomplete
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::ShutdownInProgress
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::TimedOut
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::Aborted
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::Busy
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::Expired
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::TryAgain
  │   │       │   │   │   ├── std::unique_ptr	[OUT-OF-TREE]
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::ColumnFamilyDropped
  │   │       │   │   │   └── ROCKSDB_NAMESPACE::SubCodeJni::toCppSubCode
  │   │       │   │   ├── toCppStatus	[vim java/rocksjni/portal.h +625]
  │   │       │   │   │   ├── getCodeMethod	[vim java/rocksjni/portal.h +334]
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::CodeJni::getValueMethod
  │   │       │   │   │   ├── getSubCodeMethod	[vim java/rocksjni/portal.h +355]
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::SubCodeJni::getValueMethod
  │   │       │   │   │   ├── CallByteMethod	[OUT-OF-TREE]
  │   │       │   │   │   ├── getStateMethod	[vim java/rocksjni/portal.h +376]
  │   │       │   │   │   ├── CallObjectMethod	[OUT-OF-TREE]
  │   │       │   │   │   ├── ExceptionCheck	[OUT-OF-TREE]
  │   │       │   │   │   ├── toCppStatus
  │   │       │   │   │   └── DeleteLocalRef	[OUT-OF-TREE]
  │   │       │   │   └── toCppStatus	[vim java/rocksjni/portal.h +959]
  │   │       │   │       ├── IsInstanceOf	[vim include/rocksdb/customizable.h +86]
  │   │       │   │       ├── getJClass
  │   │       │   │       ├── getStatusMethod	[vim java/rocksjni/portal.h +946]
  │   │       │   │       ├── CallObjectMethod	[OUT-OF-TREE]
  │   │       │   │       ├── ExceptionCheck	[OUT-OF-TREE]
  │   │       │   │       └── ROCKSDB_NAMESPACE::StatusJni::toCppStatus
  │   │       │   ├── releaseJniEnv [+]
  │   │       │   │   ├── releaseJniEnv	[vim java/rocksjni/portal.h +1621]
  │   │       │   │   │   └── DetachCurrentThread	[OUT-OF-TREE]
  │   │       │   │   └── JniCallback::releaseJniEnv	[vim java/rocksjni/jnicallback.cc +37]
  │   │       │   │       └── JniUtil::releaseJniEnv
  │   │       │   └── Status [+]
  │   │       │       ├── Status::Status	[vim util/status.cc +60]
  │   │       │       │   ├── code_	[OUT-OF-TREE]
  │   │       │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │       │   └── sev_	[OUT-OF-TREE]
  │   │       │       ├── Status	[vim include/rocksdb/status.h +37]
  │   │       │       │   ├── code_	[OUT-OF-TREE]
  │   │       │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │       │   └── state_	[OUT-OF-TREE]
  │   │       │       ├── Status	[vim include/rocksdb/status.h +519]
  │   │       │       │   ├── code_	[OUT-OF-TREE]
  │   │       │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │       │   └── state_	[OUT-OF-TREE]
  │   │       │       ├── Status	[vim include/rocksdb/status.h +523]
  │   │       │       │   └── Status
  │   │       │       ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │       │       │   ├── code_	[OUT-OF-TREE]
  │   │       │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │       │       ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │       │       │   ├── code_	[OUT-OF-TREE]
  │   │       │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │       │       └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │       │           ├── Status
  │   │       │           └── std::move	[OUT-OF-TREE]
  │   │       ├── FSRandomRWFileTracingWrapper::Write	[vim env/file_system_tracer.cc +374]
  │   │       │   ├── timer	[OUT-OF-TREE]
  │   │       │   ├── Start [+]
  │   │       │   │   ├── Start	[vim tools/db_bench_tool.cc +1909]
  │   │       │   │   │   └── NowMicros
  │   │       │   │   ├── Start	[vim util/stop_watch.h +98]
  │   │       │   │   │   └── NowNanos
  │   │       │   │   ├── Start	[vim util/timer.h +112]
  │   │       │   │   │   └── port::Thread	[OUT-OF-TREE]
  │   │       │   │   ├── Start	[vim db_stress_tool/db_stress_stat.h +56]
  │   │       │   │   │   ├── Clear
  │   │       │   │   │   ├── Env::Default
  │   │       │   │   │   └── NowMicros
  │   │       │   │   └── Start	[vim monitoring/perf_step_timer.h +33]
  │   │       │   │       └── time_now	[vim monitoring/perf_step_timer.h +39]
  │   │       │   ├── target [+]
  │   │       │   │   ├── target	[vim include/rocksdb/env.h +1216]
  │   │       │   │   ├── target	[vim include/rocksdb/file_system.h +1057]
  │   │       │   │   ├── target	[vim include/rocksdb/file_system.h +1249]
  │   │       │   │   ├── target	[vim include/rocksdb/file_system.h +1277]
  │   │       │   │   ├── target	[vim include/rocksdb/file_system.h +1312]
  │   │       │   │   ├── target	[vim include/rocksdb/file_system.h +1411]
  │   │       │   │   ├── target	[vim env/composite_env_wrapper.h +205]
  │   │       │   │   ├── target	[vim env/composite_env_wrapper.h +657]
  │   │       │   │   ├── target	[vim env/composite_env_wrapper.h +820]
  │   │       │   │   └── target	[vim env/composite_env_wrapper.h +892]
  │   │       │   ├── Write
  │   │       │   ├── ElapsedNanos	[vim util/stop_watch.h +100]
  │   │       │   │   └── NowNanos [+]
  │   │       │   │       ├── NowNanos	[vim include/rocksdb/env.h +447]
  │   │       │   │       ├── NowNanos	[vim include/rocksdb/env.h +1358]
  │   │       │   │       ├── NowNanos	[vim env/composite_env_wrapper.h +531]
  │   │       │   │       ├── NowNanos	[vim env/env_posix.cc +246]
  │   │       │   │       ├── MockEnv::NowNanos	[vim env/mock_env.cc +1043]
  │   │       │   │       └── WinEnv::NowNanos	[vim port/win/env_win.cc +1453]
  │   │       │   ├── io_record	[OUT-OF-TREE]
  │   │       │   ├── NowNanos [+]
  │   │       │   │   ├── NowNanos	[vim include/rocksdb/env.h +447]
  │   │       │   │   ├── NowNanos	[vim include/rocksdb/env.h +1358]
  │   │       │   │   ├── NowNanos	[vim env/composite_env_wrapper.h +531]
  │   │       │   │   ├── NowNanos	[vim env/env_posix.cc +246]
  │   │       │   │   ├── MockEnv::NowNanos	[vim env/mock_env.cc +1043]
  │   │       │   │   └── WinEnv::NowNanos	[vim port/win/env_win.cc +1453]
  │   │       │   ├── ToString [+]
  │   │       │   │   ├── Configurable::ToString	[vim options/configurable.cc +458]
  │   │       │   │   │   └── SerializeOptions
  │   │       │   │   ├── Status::ToString	[vim util/status.cc +79]
  │   │       │   │   │   ├── code
  │   │       │   │   │   └── result	[OUT-OF-TREE]
  │   │       │   │   ├── ToString	[vim util/string_util.h +23]
  │   │       │   │   │   └── std::to_string	[OUT-OF-TREE]
  │   │       │   │   ├── Slice::ToString	[vim util/slice.cc +157]
  │   │       │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   │   │   └── toHex	[vim util/slice.cc +120]
  │   │       │   │   ├── ToString	[vim include/rocksdb/configurable.h +180]
  │   │       │   │   │   └── ToString
  │   │       │   │   ├── ToString	[vim include/rocksdb/table_properties.h +146]
  │   │       │   │   │   └── Name
  │   │       │   │   ├── ToString	[vim include/rocksdb/utilities/ldb_cmd_execute_result.h +27]
  │   │       │   │   ├── ToString	[vim include/rocksdb/statistics.h +564]
  │   │       │   │   │   └── std::string	[OUT-OF-TREE]
  │   │       │   │   ├── ToString	[vim include/rocksdb/file_system.h +132]
  │   │       │   │   │   └── str	[OUT-OF-TREE]
  │   │       │   │   ├── ToString	[vim utilities/simulator_cache/sim_cache.cc +287]
  │   │       │   │   │   ├── std::to_string	[OUT-OF-TREE]
  │   │       │   │   │   ├── get_miss_counter	[vim utilities/simulator_cache/sim_cache.cc +272]
  │   │       │   │   │   └── get_hit_counter	[vim utilities/simulator_cache/sim_cache.cc +276]
  │   │       │   │   ├── CompactOnDeletionCollectorFactory::ToString	[vim utilities/table_properties_collectors/compact_on_deletion_collector.cc +105]
  │   │       │   │   │   ├── Name
  │   │       │   │   │   └── str	[OUT-OF-TREE]
  │   │       │   │   ├── PersistentCacheConfig::ToString	[vim utilities/persistent_cache/persistent_cache_tier.cc +16]
  │   │       │   │   │   └── c_str	[OUT-OF-TREE]
  │   │       │   │   ├── ToString	[vim table/block_based/filter_block.h +151]
  │   │       │   │   │   └── error_msg	[OUT-OF-TREE]
  │   │       │   │   ├── BlockBasedFilterBlockReader::ToString	[vim table/block_based/block_based_filter_block.cc +306]
  │   │       │   │   │   ├── FilterBlockReaderCommon::GetOrReadFilterBlock	[vim table/block_based/filter_block_reader_common.cc +66]
  │   │       │   │   │   ├── BlockBasedFilterBlockReader::ParseFieldsFromBlock	[vim table/block_based/block_based_filter_block.cc +221]
  │   │       │   │   │   ├── GetValue
  │   │       │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │       │   │   │   ├── s_bo	[OUT-OF-TREE]
  │   │       │   │   │   ├── s_hd	[OUT-OF-TREE]
  │   │       │   │   │   ├── s_fb	[OUT-OF-TREE]
  │   │       │   │   │   ├── DecodeFixed32	[vim util/coding_lean.h +74]
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │       │   │   │   ├── Slice
  │   │       │   │   │   ├── AppendItem
  │   │       │   │   │   └── ToString
  │   │       │   │   ├── TableProperties::ToString	[vim table/table_properties.cc +72]
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │       │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │       │   │   │   └── AppendProperty
  │   │       │   │   ├── BlockHandle::ToString	[vim table/format.cc +82]
  │   │       │   │   │   ├── EncodeTo
  │   │       │   │   │   ├── Slice
  │   │       │   │   │   └── ToString
  │   │       │   │   ├── IndexValue::ToString	[vim table/format.cc +136]
  │   │       │   │   │   ├── EncodeTo
  │   │       │   │   │   ├── Slice
  │   │       │   │   │   └── ToString
  │   │       │   │   ├── Footer::ToString	[vim table/format.cc +262]
  │   │       │   │   │   ├── IsLegacyFooterFormat	[vim table/format.cc +147]
  │   │       │   │   │   ├── ToString
  │   │       │   │   │   └── ROCKSDB_NAMESPACE::ToString
  │   │       │   │   ├── BackupStatistics::ToString	[vim utilities/backupable/backupable_db.cc +81]
  │   │       │   │   │   ├── BackupStatistics::GetNumberSuccessBackup	[vim utilities/backupable/backupable_db.cc +74]
  │   │       │   │   │   └── BackupStatistics::GetNumberFailBackup	[vim utilities/backupable/backupable_db.cc +77]
  │   │       │   │   ├── HistogramWindowingImpl::ToString	[vim monitoring/histogram_windowing.cc +98]
  │   │       │   │   │   └── ToString
  │   │       │   │   ├── PerfContext::ToString	[vim monitoring/perf_context.cc +450]
  │   │       │   │   ├── IOStatsContext::ToString	[vim monitoring/iostats_context.cc +43]
  │   │       │   │   │   ├── IOSTATS_CONTEXT_OUTPUT	[OUT-OF-TREE]
  │   │       │   │   │   ├── str	[OUT-OF-TREE]
  │   │       │   │   │   └── find_last_not_of	[OUT-OF-TREE]
  │   │       │   │   ├── HistogramStat::ToString	[vim monitoring/histogram.cc +182]
  │   │       │   │   │   ├── num
  │   │       │   │   │   ├── Average
  │   │       │   │   │   ├── StandardDeviation
  │   │       │   │   │   ├── min
  │   │       │   │   │   ├── Median
  │   │       │   │   │   ├── max
  │   │       │   │   │   ├── Percentile
  │   │       │   │   │   ├── bucket_at	[vim monitoring/histogram.h +73]
  │   │       │   │   │   ├── BucketLimit	[vim monitoring/histogram.h +42]
  │   │       │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   │   ├── HistogramImpl::ToString	[vim monitoring/histogram.cc +279]
  │   │       │   │   │   └── ToString
  │   │       │   │   └── StatisticsImpl::ToString	[vim monitoring/statistics.cc +380]
  │   │       │   │       ├── StatisticsImpl::getTickerCountLocked	[vim monitoring/statistics.cc +265]
  │   │       │   │       ├── StatisticsImpl::getHistogramImplLocked	[vim monitoring/statistics.cc +280]
  │   │       │   │       ├── Data
  │   │       │   │       ├── c_str	[OUT-OF-TREE]
  │   │       │   │       └── shrink_to_fit	[OUT-OF-TREE]
  │   │       │   └── WriteIOOp [+]
  │   │       │       ├── IOTraceWriter::WriteIOOp	[vim trace_replay/io_tracer.cc +26]
  │   │       │       │   ├── GetFileSize
  │   │       │       │   ├── Status::OK
  │   │       │       │   ├── file_operation	[OUT-OF-TREE]
  │   │       │       │   ├── io_status
  │   │       │       │   ├── file_name
  │   │       │       │   ├── PutLengthPrefixedSlice	[vim util/coding.h +224]
  │   │       │       │   ├── PutFixed64	[vim util/coding.h +144]
  │   │       │       │   ├── TracerHelper::EncodeTrace	[vim trace_replay/trace_replay.cc +35]
  │   │       │       │   └── Write
  │   │       │       └── IOTracer::WriteIOOp	[vim trace_replay/io_tracer.cc +218]
  │   │       │           ├── lock_guard	[OUT-OF-TREE]
  │   │       │           ├── Status::OK
  │   │       │           └── WriteIOOp
  │   │       ├── PosixRandomRWFile::Write	[vim env/io_posix.cc +1403]
  │   │       │   ├── PosixPositionedWrite	[vim env/io_posix.cc +119]
  │   │       │   │   ├── std::min [+]
  │   │       │   │   │   ├── min	[vim monitoring/histogram.h +66]
  │   │       │   │   │   ├── min	[vim monitoring/histogram.h +133]
  │   │       │   │   │   └── min	[vim monitoring/histogram_windowing.h +38]
  │   │       │   │   └── pwrite [+]
  │   │       │   │       └── pwrite	[vim port/win/io_win.cc +72]
  │   │       │   ├── IOError [+]
  │   │       │   │   ├── IOError	[vim include/rocksdb/io_status.h +100]
  │   │       │   │   │   ├── Slice
  │   │       │   │   │   └── IOStatus
  │   │       │   │   ├── IOError	[vim include/rocksdb/io_status.h +103]
  │   │       │   │   │   └── IOStatus
  │   │       │   │   ├── IOError	[vim include/rocksdb/status.h +195]
  │   │       │   │   │   ├── Slice
  │   │       │   │   │   └── Status
  │   │       │   │   ├── IOError	[vim include/rocksdb/status.h +198]
  │   │       │   │   │   └── Status
  │   │       │   │   ├── IOError	[vim env/io_posix.cc +56]
  │   │       │   │   │   ├── IOStatus::NoSpace
  │   │       │   │   │   ├── SetRetryable	[vim include/rocksdb/io_status.h +58]
  │   │       │   │   │   ├── IOStatus::PathNotFound
  │   │       │   │   │   ├── IOStatus::IOError
  │   │       │   │   │   ├── IOErrorMsg	[vim env/io_posix.cc +47]
  │   │       │   │   │   └── strerror	[OUT-OF-TREE]
  │   │       │   │   ├── IOError	[vim env/env_hdfs.cc +38]
  │   │       │   │   │   ├── Status::NoSpace
  │   │       │   │   │   ├── Status::PathNotFound
  │   │       │   │   │   ├── Status::IOError
  │   │       │   │   │   └── strerror	[OUT-OF-TREE]
  │   │       │   │   └── IOError	[vim port/win/io_win.h +38]
  │   │       │   │       ├── Status::NoSpace
  │   │       │   │       ├── Status::PathNotFound
  │   │       │   │       ├── Status::IOError
  │   │       │   │       └── strerror	[OUT-OF-TREE]
  │   │       │   ├── ToString [+]
  │   │       │   │   ├── Configurable::ToString	[vim options/configurable.cc +458]
  │   │       │   │   │   └── SerializeOptions
  │   │       │   │   ├── Status::ToString	[vim util/status.cc +79]
  │   │       │   │   │   ├── code
  │   │       │   │   │   └── result	[OUT-OF-TREE]
  │   │       │   │   ├── ToString	[vim util/string_util.h +23]
  │   │       │   │   │   └── std::to_string	[OUT-OF-TREE]
  │   │       │   │   ├── Slice::ToString	[vim util/slice.cc +157]
  │   │       │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   │   │   └── toHex	[vim util/slice.cc +120]
  │   │       │   │   ├── ToString	[vim include/rocksdb/configurable.h +180]
  │   │       │   │   │   └── ToString
  │   │       │   │   ├── ToString	[vim include/rocksdb/table_properties.h +146]
  │   │       │   │   │   └── Name
  │   │       │   │   ├── ToString	[vim include/rocksdb/utilities/ldb_cmd_execute_result.h +27]
  │   │       │   │   ├── ToString	[vim include/rocksdb/statistics.h +564]
  │   │       │   │   │   └── std::string	[OUT-OF-TREE]
  │   │       │   │   ├── ToString	[vim include/rocksdb/file_system.h +132]
  │   │       │   │   │   └── str	[OUT-OF-TREE]
  │   │       │   │   ├── ToString	[vim utilities/simulator_cache/sim_cache.cc +287]
  │   │       │   │   │   ├── std::to_string	[OUT-OF-TREE]
  │   │       │   │   │   ├── get_miss_counter	[vim utilities/simulator_cache/sim_cache.cc +272]
  │   │       │   │   │   └── get_hit_counter	[vim utilities/simulator_cache/sim_cache.cc +276]
  │   │       │   │   ├── CompactOnDeletionCollectorFactory::ToString	[vim utilities/table_properties_collectors/compact_on_deletion_collector.cc +105]
  │   │       │   │   │   ├── Name
  │   │       │   │   │   └── str	[OUT-OF-TREE]
  │   │       │   │   ├── PersistentCacheConfig::ToString	[vim utilities/persistent_cache/persistent_cache_tier.cc +16]
  │   │       │   │   │   └── c_str	[OUT-OF-TREE]
  │   │       │   │   ├── ToString	[vim table/block_based/filter_block.h +151]
  │   │       │   │   │   └── error_msg	[OUT-OF-TREE]
  │   │       │   │   ├── BlockBasedFilterBlockReader::ToString	[vim table/block_based/block_based_filter_block.cc +306]
  │   │       │   │   │   ├── FilterBlockReaderCommon::GetOrReadFilterBlock	[vim table/block_based/filter_block_reader_common.cc +66]
  │   │       │   │   │   ├── BlockBasedFilterBlockReader::ParseFieldsFromBlock	[vim table/block_based/block_based_filter_block.cc +221]
  │   │       │   │   │   ├── GetValue
  │   │       │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │       │   │   │   ├── s_bo	[OUT-OF-TREE]
  │   │       │   │   │   ├── s_hd	[OUT-OF-TREE]
  │   │       │   │   │   ├── s_fb	[OUT-OF-TREE]
  │   │       │   │   │   ├── DecodeFixed32	[vim util/coding_lean.h +74]
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │       │   │   │   ├── Slice
  │   │       │   │   │   ├── AppendItem
  │   │       │   │   │   └── ToString
  │   │       │   │   ├── TableProperties::ToString	[vim table/table_properties.cc +72]
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │       │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │       │   │   │   └── AppendProperty
  │   │       │   │   ├── BlockHandle::ToString	[vim table/format.cc +82]
  │   │       │   │   │   ├── EncodeTo
  │   │       │   │   │   ├── Slice
  │   │       │   │   │   └── ToString
  │   │       │   │   ├── IndexValue::ToString	[vim table/format.cc +136]
  │   │       │   │   │   ├── EncodeTo
  │   │       │   │   │   ├── Slice
  │   │       │   │   │   └── ToString
  │   │       │   │   ├── Footer::ToString	[vim table/format.cc +262]
  │   │       │   │   │   ├── IsLegacyFooterFormat	[vim table/format.cc +147]
  │   │       │   │   │   ├── ToString
  │   │       │   │   │   └── ROCKSDB_NAMESPACE::ToString
  │   │       │   │   ├── BackupStatistics::ToString	[vim utilities/backupable/backupable_db.cc +81]
  │   │       │   │   │   ├── BackupStatistics::GetNumberSuccessBackup	[vim utilities/backupable/backupable_db.cc +74]
  │   │       │   │   │   └── BackupStatistics::GetNumberFailBackup	[vim utilities/backupable/backupable_db.cc +77]
  │   │       │   │   ├── HistogramWindowingImpl::ToString	[vim monitoring/histogram_windowing.cc +98]
  │   │       │   │   │   └── ToString
  │   │       │   │   ├── PerfContext::ToString	[vim monitoring/perf_context.cc +450]
  │   │       │   │   ├── IOStatsContext::ToString	[vim monitoring/iostats_context.cc +43]
  │   │       │   │   │   ├── IOSTATS_CONTEXT_OUTPUT	[OUT-OF-TREE]
  │   │       │   │   │   ├── str	[OUT-OF-TREE]
  │   │       │   │   │   └── find_last_not_of	[OUT-OF-TREE]
  │   │       │   │   ├── HistogramStat::ToString	[vim monitoring/histogram.cc +182]
  │   │       │   │   │   ├── num
  │   │       │   │   │   ├── Average
  │   │       │   │   │   ├── StandardDeviation
  │   │       │   │   │   ├── min
  │   │       │   │   │   ├── Median
  │   │       │   │   │   ├── max
  │   │       │   │   │   ├── Percentile
  │   │       │   │   │   ├── bucket_at	[vim monitoring/histogram.h +73]
  │   │       │   │   │   ├── BucketLimit	[vim monitoring/histogram.h +42]
  │   │       │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   │   ├── HistogramImpl::ToString	[vim monitoring/histogram.cc +279]
  │   │       │   │   │   └── ToString
  │   │       │   │   └── StatisticsImpl::ToString	[vim monitoring/statistics.cc +380]
  │   │       │   │       ├── StatisticsImpl::getTickerCountLocked	[vim monitoring/statistics.cc +265]
  │   │       │   │       ├── StatisticsImpl::getHistogramImplLocked	[vim monitoring/statistics.cc +280]
  │   │       │   │       ├── Data
  │   │       │   │       ├── c_str	[OUT-OF-TREE]
  │   │       │   │       └── shrink_to_fit	[OUT-OF-TREE]
  │   │       │   └── IOStatus::OK [+]
  │   │       │       ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │       │       │   └── IOStatus
  │   │       │       └── OK	[vim include/rocksdb/status.h +153]
  │   │       │           └── Status
  │   │       ├── Write	[vim env/composite_env_wrapper.h +220]
  │   │       │   └── Write
  │   │       ├── Write	[vim env/composite_env_wrapper.h +835]
  │   │       │   ├── status_to_io_status	[vim include/rocksdb/io_status.h +254]
  │   │       │   │   ├── IOStatus::OK [+]
  │   │       │   │   │   ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │       │   │   │   │   └── IOStatus
  │   │       │   │   │   └── OK	[vim include/rocksdb/status.h +153]
  │   │       │   │   │       └── Status
  │   │       │   │   ├── strlen	[OUT-OF-TREE]
  │   │       │   │   ├── getState	[vim include/rocksdb/status.h +145]
  │   │       │   │   ├── Slice [+]
  │   │       │   │   │   ├── Slice::Slice	[vim util/slice.cc +142]
  │   │       │   │   │   ├── Slice	[vim include/rocksdb/slice.h +38]
  │   │       │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │       │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │       │   │   │   ├── Slice	[vim include/rocksdb/slice.h +41]
  │   │       │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │       │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │       │   │   │   ├── Slice	[vim include/rocksdb/slice.h +45]
  │   │       │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │       │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │       │   │   │   ├── Slice	[vim include/rocksdb/slice.h +50]
  │   │       │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │       │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │       │   │   │   └── Slice	[vim include/rocksdb/slice.h +55]
  │   │       │   │   │       ├── data_	[OUT-OF-TREE]
  │   │       │   │   │       └── strlen	[OUT-OF-TREE]
  │   │       │   │   ├── IOStatus [+]
  │   │       │   │   │   ├── IOStatus	[vim include/rocksdb/io_status.h +39]
  │   │       │   │   │   │   └── IOStatus
  │   │       │   │   │   ├── IOStatus	[vim include/rocksdb/io_status.h +144]
  │   │       │   │   │   │   ├── Status
  │   │       │   │   │   │   ├── retryable_	[OUT-OF-TREE]
  │   │       │   │   │   │   ├── data_loss_	[OUT-OF-TREE]
  │   │       │   │   │   │   └── scope_	[OUT-OF-TREE]
  │   │       │   │   │   ├── IOStatus	[vim include/rocksdb/io_status.h +151]
  │   │       │   │   │   │   └── IOStatus
  │   │       │   │   │   ├── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +155]
  │   │       │   │   │   │   ├── Status
  │   │       │   │   │   │   ├── retryable_	[OUT-OF-TREE]
  │   │       │   │   │   │   ├── data_loss_	[OUT-OF-TREE]
  │   │       │   │   │   │   └── scope_	[OUT-OF-TREE]
  │   │       │   │   │   ├── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +177]
  │   │       │   │   │   │   ├── Status
  │   │       │   │   │   │   └── Status::CopyState	[vim util/status.cc +20]
  │   │       │   │   │   └── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +205]
  │   │       │   │   │       ├── IOStatus
  │   │       │   │   │       └── std::move	[OUT-OF-TREE]
  │   │       │   │   ├── code [+]
  │   │       │   │   │   └── code	[vim include/rocksdb/status.h +94]
  │   │       │   │   └── subcode [+]
  │   │       │   │       └── subcode	[vim include/rocksdb/status.h +120]
  │   │       │   └── Write
  │   │       ├── EncryptedRandomRWFile::Write	[vim env/env_encryption.cc +364]
  │   │       │   ├── dataToWrite	[OUT-OF-TREE]
  │   │       │   ├── Alignment [+]
  │   │       │   │   ├── Alignment	[vim util/aligned_buffer.h +97]
  │   │       │   │   └── Alignment	[vim util/aligned_buffer.h +126]
  │   │       │   ├── GetRequiredBufferAlignment [+]
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +626]
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +738]
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +834]
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +958]
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +1464]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +1499]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +1527]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/env.h +1585]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +572]
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +692]
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +821]
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +948]
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +1257]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +1297]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +1355]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim include/rocksdb/file_system.h +1414]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim env/io_posix.h +147]
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim env/io_posix.h +210]
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim env/io_posix.h +268]
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +36]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +97]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +152]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +217]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +645]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +710]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +770]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim env/composite_env_wrapper.h +832]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── EncryptedSequentialFile::GetRequiredBufferAlignment	[vim env/env_encryption.cc +126]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── EncryptedRandomAccessFile::GetRequiredBufferAlignment	[vim env/env_encryption.cc +217]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── EncryptedWritableFile::GetRequiredBufferAlignment	[vim env/env_encryption.cc +297]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── EncryptedRandomRWFile::GetRequiredBufferAlignment	[vim env/env_encryption.cc +358]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim utilities/fault_injection_env.h +112]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim utilities/fault_injection_fs.h +92]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim utilities/fault_injection_fs.h +123]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── GetRequiredBufferAlignment	[vim utilities/fault_injection_fs.h +143]
  │   │       │   │   │   └── GetRequiredBufferAlignment
  │   │       │   │   ├── WinRandomAccessFile::GetRequiredBufferAlignment	[vim port/win/io_win.cc +729]
  │   │       │   │   │   └── GetAlignment	[vim port/win/io_win.h +248]
  │   │       │   │   ├── WinWritableFile::GetRequiredBufferAlignment	[vim port/win/io_win.cc +942]
  │   │       │   │   │   └── GetAlignement	[vim port/win/io_win.h +305]
  │   │       │   │   └── WinRandomRWFile::GetRequiredBufferAlignment	[vim port/win/io_win.cc +1002]
  │   │       │   │       └── GetAlignement	[vim port/win/io_win.h +305]
  │   │       │   ├── AllocateNewBuffer	[vim util/aligned_buffer.h +147]
  │   │       │   │   ├── Roundup [+]
  │   │       │   │   │   ├── Roundup	[vim util/aligned_buffer.h +33]
  │   │       │   │   │   └── Roundup	[vim env/io_posix.h +319]
  │   │       │   │   └── ~static_cast	[OUT-OF-TREE]
  │   │       │   ├── memmove	[OUT-OF-TREE]
  │   │       │   ├── Size [+]
  │   │       │   │   ├── CoreLocalArray::Size	[vim util/core_local.h +55]
  │   │       │   │   ├── Size	[vim util/aligned_buffer.h +251]
  │   │       │   │   ├── Size	[vim env/io_posix.h +99]
  │   │       │   │   ├── Size	[vim env/mock_env.cc +81]
  │   │       │   │   ├── ColumnBase::Size	[vim utilities/cassandra/format.cc +26]
  │   │       │   │   ├── Column::Size	[vim utilities/cassandra/format.cc +68]
  │   │       │   │   │   └── ColumnBase::Size	[vim utilities/cassandra/format.cc +26]
  │   │       │   │   ├── ExpiringColumn::Size	[vim utilities/cassandra/format.cc +106]
  │   │       │   │   │   └── Column::Size	[vim utilities/cassandra/format.cc +68]
  │   │       │   │   ├── Tombstone::Size	[vim utilities/cassandra/format.cc +172]
  │   │       │   │   │   └── ColumnBase::Size	[vim utilities/cassandra/format.cc +26]
  │   │       │   │   ├── RowValue::Size	[vim utilities/cassandra/format.cc +216]
  │   │       │   │   │   └── Size
  │   │       │   │   ├── Size	[vim utilities/persistent_cache/block_cache_tier_file.h +267]
  │   │       │   │   ├── Size	[vim utilities/persistent_cache/block_cache_tier.h +99]
  │   │       │   │   ├── Size	[vim utilities/persistent_cache/persistent_cache_util.h +54]
  │   │       │   │   │   └── _	[OUT-OF-TREE]
  │   │       │   │   ├── Size	[vim table/block_based/block_based_table_builder.cc +538]
  │   │       │   │   └── Size	[vim db/dbformat.h +420]
  │   │       │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │       │   ├── Encrypt [+]
  │   │       │   │   ├── BlockAccessCipherStream::Encrypt	[vim env/env_encryption.cc +859]
  │   │       │   │   │   ├── BlockSize
  │   │       │   │   │   ├── CTRCipherStream::AllocateScratch	[vim env/env_encryption.cc +971]
  │   │       │   │   │   ├── std::min
  │   │       │   │   │   ├── CTRCipherStream::EncryptBlock	[vim env/env_encryption.cc +978]
  │   │       │   │   │   ├── memmove	[OUT-OF-TREE]
  │   │       │   │   │   └── Status::OK
  │   │       │   │   └── ROT13BlockCipher::Encrypt	[vim env/env_encryption.cc +959]
  │   │       │   │       └── Status::OK
  │   │       │   ├── Slice [+]
  │   │       │   │   ├── Slice::Slice	[vim util/slice.cc +142]
  │   │       │   │   ├── Slice	[vim include/rocksdb/slice.h +38]
  │   │       │   │   │   ├── data_	[OUT-OF-TREE]
  │   │       │   │   │   └── size_	[OUT-OF-TREE]
  │   │       │   │   ├── Slice	[vim include/rocksdb/slice.h +41]
  │   │       │   │   │   ├── data_	[OUT-OF-TREE]
  │   │       │   │   │   └── size_	[OUT-OF-TREE]
  │   │       │   │   ├── Slice	[vim include/rocksdb/slice.h +45]
  │   │       │   │   │   ├── data_	[OUT-OF-TREE]
  │   │       │   │   │   └── size_	[OUT-OF-TREE]
  │   │       │   │   ├── Slice	[vim include/rocksdb/slice.h +50]
  │   │       │   │   │   ├── data_	[OUT-OF-TREE]
  │   │       │   │   │   └── size_	[OUT-OF-TREE]
  │   │       │   │   └── Slice	[vim include/rocksdb/slice.h +55]
  │   │       │   │       ├── data_	[OUT-OF-TREE]
  │   │       │   │       └── strlen	[OUT-OF-TREE]
  │   │       │   ├── BufferStart [+]
  │   │       │   │   ├── BufferStart	[vim util/aligned_buffer.h +109]
  │   │       │   │   └── BufferStart	[vim util/aligned_buffer.h +113]
  │   │       │   ├── CurrentSize	[vim util/aligned_buffer.h +105]
  │   │       │   └── Write
  │   │       ├── Write	[vim env/mock_env.cc +127]
  │   │       │   ├── replace	[OUT-OF-TREE]
  │   │       │   ├── Now	[vim env/mock_env.cc +157]
  │   │       │   │   └── GetCurrentTime [+]
  │   │       │   │       ├── GetCurrentTime	[vim include/rocksdb/env.h +1367]
  │   │       │   │       ├── GetCurrentTime	[vim env/composite_env_wrapper.h +540]
  │   │       │   │       ├── GetCurrentTime	[vim env/env_posix.cc +291]
  │   │       │   │       ├── MockEnv::GetCurrentTime	[vim env/mock_env.cc +1031]
  │   │       │   │       ├── GetCurrentTime	[vim hdfs/env_hdfs.h +140]
  │   │       │   │       ├── WinEnvIO::GetCurrentTime	[vim port/win/env_win.cc +133]
  │   │       │   │       └── WinEnv::GetCurrentTime	[vim port/win/env_win.cc +1332]
  │   │       │   └── IOStatus::OK [+]
  │   │       │       ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │       │       │   └── IOStatus
  │   │       │       └── OK	[vim include/rocksdb/status.h +153]
  │   │       │           └── Status
  │   │       ├── Write	[vim env/mock_env.cc +269]
  │   │       │   └── Write
  │   │       ├── FileTraceWriter::Write	[vim utilities/trace/file_trace_reader_writer.cc +86]
  │   │       │   └── Append [+]
  │   │       │       ├── Append	[vim util/aligned_buffer.h +186]
  │   │       │       │   └── std::min
  │   │       │       ├── WritableFileWriter::Append	[vim file/writable_file_writer.cc +24]
  │   │       │       │   ├── WritableFileWriter::UpdateFileChecksum	[vim file/writable_file_writer.cc +434]
  │   │       │       │   ├── IOSTATS_TIMER_GUARD	[OUT-OF-TREE]
  │   │       │       │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │       │       │   ├── PrepareWrite
  │   │       │       │   ├── GetFileSize
  │   │       │       │   ├── IOOptions	[vim include/rocksdb/file_system.h +89]
  │   │       │       │   ├── std::min
  │   │       │       │   ├── AllocateNewBuffer	[vim util/aligned_buffer.h +147]
  │   │       │       │   ├── use_direct_io
  │   │       │       │   ├── Capacity
  │   │       │       │   ├── Append
  │   │       │       │   ├── Flush
  │   │       │       │   ├── CurrentSize	[vim util/aligned_buffer.h +105]
  │   │       │       │   ├── WritableFileWriter::WriteBuffered	[vim file/writable_file_writer.cc +379]
  │   │       │       │   └── TEST_KILL_RANDOM	[OUT-OF-TREE]
  │   │       │       ├── Append	[vim include/rocksdb/env.h +1514]
  │   │       │       │   └── Append
  │   │       │       ├── Append	[vim include/rocksdb/file_system.h +743]
  │   │       │       │   └── Append
  │   │       │       ├── Append	[vim include/rocksdb/file_system.h +1314]
  │   │       │       │   └── Append
  │   │       │       ├── Append	[vim include/rocksdb/file_system.h +1318]
  │   │       │       │   └── Append
  │   │       │       ├── Append	[vim env/io_posix.h +245]
  │   │       │       │   └── Append
  │   │       │       ├── Append	[vim env/io_posix.h +345]
  │   │       │       │   └── Append
  │   │       │       ├── FSWritableFileTracingWrapper::Append	[vim env/file_system_tracer.cc +297]
  │   │       │       │   ├── timer	[OUT-OF-TREE]
  │   │       │       │   ├── Start
  │   │       │       │   ├── target
  │   │       │       │   ├── Append
  │   │       │       │   ├── ElapsedNanos	[vim util/stop_watch.h +100]
  │   │       │       │   ├── io_record	[OUT-OF-TREE]
  │   │       │       │   ├── NowNanos
  │   │       │       │   ├── ToString
  │   │       │       │   └── WriteIOOp
  │   │       │       ├── PosixMmapFile::Append	[vim env/io_posix.cc +997]
  │   │       │       │   ├── UnmapCurrentRegion
  │   │       │       │   ├── MapNewRegion
  │   │       │       │   ├── TEST_KILL_RANDOM	[OUT-OF-TREE]
  │   │       │       │   └── IOStatus::OK
  │   │       │       ├── PosixWritableFile::Append	[vim env/io_posix.cc +1160]
  │   │       │       │   ├── use_direct_io
  │   │       │       │   ├── IsSectorAligned
  │   │       │       │   ├── GetRequiredBufferAlignment
  │   │       │       │   ├── PosixWrite	[vim env/io_posix.cc +97]
  │   │       │       │   ├── IOError
  │   │       │       │   └── IOStatus::OK
  │   │       │       ├── Append	[vim env/env_hdfs.cc +227]
  │   │       │       │   ├── hdfsWrite	[OUT-OF-TREE]
  │   │       │       │   ├── ROCKS_LOG_DEBUG	[OUT-OF-TREE]
  │   │       │       │   ├── c_str	[OUT-OF-TREE]
  │   │       │       │   ├── IOError
  │   │       │       │   └── Status::OK
  │   │       │       ├── Append	[vim env/env_hdfs.cc +261]
  │   │       │       │   ├── hdfsWrite	[OUT-OF-TREE]
  │   │       │       │   ├── IOError
  │   │       │       │   └── Status::OK
  │   │       │       ├── Append	[vim env/composite_env_wrapper.h +113]
  │   │       │       │   └── Append
  │   │       │       ├── Append	[vim env/composite_env_wrapper.h +726]
  │   │       │       │   ├── status_to_io_status	[vim include/rocksdb/io_status.h +254]
  │   │       │       │   └── Append
  │   │       │       ├── Append	[vim env/composite_env_wrapper.h +730]
  │   │       │       │   ├── status_to_io_status	[vim include/rocksdb/io_status.h +254]
  │   │       │       │   └── Append
  │   │       │       ├── Append	[vim env/file_system_tracer.h +275]
  │   │       │       │   └── Append
  │   │       │       ├── EncryptedWritableFile::Append	[vim env/env_encryption.cc +232]
  │   │       │       │   ├── dataToAppend	[OUT-OF-TREE]
  │   │       │       │   ├── GetFileSize
  │   │       │       │   ├── Alignment
  │   │       │       │   ├── GetRequiredBufferAlignment
  │   │       │       │   ├── AllocateNewBuffer	[vim util/aligned_buffer.h +147]
  │   │       │       │   ├── memmove	[OUT-OF-TREE]
  │   │       │       │   ├── Size
  │   │       │       │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │       │       │   ├── Encrypt
  │   │       │       │   ├── Slice
  │   │       │       │   ├── BufferStart
  │   │       │       │   ├── CurrentSize	[vim util/aligned_buffer.h +105]
  │   │       │       │   └── Append
  │   │       │       ├── Append	[vim env/mock_env.cc +140]
  │   │       │       │   ├── Now	[vim env/mock_env.cc +157]
  │   │       │       │   └── IOStatus::OK
  │   │       │       ├── Append	[vim env/mock_env.cc +311]
  │   │       │       │   ├── RequestToken
  │   │       │       │   ├── Append
  │   │       │       │   ├── Slice
  │   │       │       │   └── IOStatus::OK
  │   │       │       ├── Append	[vim utilities/env_mirror.cc +104]
  │   │       │       │   └── Append
  │   │       │       ├── Append	[vim utilities/fault_injection_fs.h +67]
  │   │       │       │   └── Append
  │   │       │       ├── Append	[vim utilities/persistent_cache/block_cache_tier_file.h +107]
  │   │       │       ├── Append	[vim utilities/persistent_cache/block_cache_tier_file_buffer.h +32]
  │   │       │       ├── CacheRecord::Append	[vim utilities/persistent_cache/block_cache_tier_file.cc +136]
  │   │       │       │   ├── Append
  │   │       │       │   ├── Used	[vim utilities/persistent_cache/block_cache_tier_file_buffer.h +48]
  │   │       │       │   ├── Capacity
  │   │       │       │   └── Free
  │   │       │       ├── WriteableCacheFile::Append	[vim utilities/persistent_cache/block_cache_tier_file.cc +318]
  │   │       │       │   ├── _	[OUT-OF-TREE]
  │   │       │       │   ├── CacheRecord::CalcSize
  │   │       │       │   ├── WriteableCacheFile::ExpandBuffer	[vim utilities/persistent_cache/block_cache_tier_file.cc +355]
  │   │       │       │   ├── ROCKS_LOG_DEBUG	[OUT-OF-TREE]
  │   │       │       │   ├── rec	[OUT-OF-TREE]
  │   │       │       │   ├── Serialize
  │   │       │       │   └── WriteableCacheFile::DispatchBuffer	[vim utilities/persistent_cache/block_cache_tier_file.cc +389]
  │   │       │       ├── Append	[vim utilities/env_librados.cc +327]
  │   │       │       │   ├── _SyncLocked	[vim utilities/env_librados.cc +278]
  │   │       │       │   ├── LOG_DEBUG	[OUT-OF-TREE]
  │   │       │       │   └── err_to_status	[vim utilities/env_librados.cc +41]
  │   │       │       ├── WriteBatchInternal::Append	[vim db/write_batch.cc +2101]
  │   │       │       │   ├── GetWalTerminationPoint	[vim include/rocksdb/write_batch.h +337]
  │   │       │       │   ├── is_cleared	[vim include/rocksdb/write_batch.h +58]
  │   │       │       │   ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │       │       │   ├── Count
  │   │       │       │   └── Status::OK
  │   │       │       ├── WinMmapFile::Append	[vim port/win/io_win.cc +386]
  │   │       │       │   ├── UnmapCurrentRegion
  │   │       │       │   ├── MapNewRegion
  │   │       │       │   ├── std::min
  │   │       │       │   ├── Roundup
  │   │       │       │   ├── size_t	[OUT-OF-TREE]
  │   │       │       │   ├── memset	[OUT-OF-TREE]
  │   │       │       │   └── Status::OK
  │   │       │       └── WinWritableFile::Append	[vim port/win/io_win.cc +946]
  │   │       │           └── WinWritableImpl::AppendImpl	[vim port/win/io_win.cc +767]
  │   │       ├── DBWithTTLImpl::Write	[vim utilities/ttl/db_ttl_impl.cc +269]
  │   │       │   ├── Handler	[OUT-OF-TREE]
  │   │       │   ├── env_	[OUT-OF-TREE]
  │   │       │   ├── PutCF [+]
  │   │       │   │   ├── PutCF	[vim tools/trace_analyzer_tool.h +262]
  │   │       │   │   │   └── TraceAnalyzer::HandlePut	[vim tools/trace_analyzer_tool.cc +1544]
  │   │       │   │   ├── PutCF	[vim tools/ldb_cmd.cc +2145]
  │   │       │   │   │   ├── commonPutMerge	[vim tools/ldb_cmd.cc +2134]
  │   │       │   │   │   └── Status::OK
  │   │       │   │   ├── PutCF	[vim include/rocksdb/write_batch.h +187]
  │   │       │   │   │   ├── Put
  │   │       │   │   │   ├── Status::OK
  │   │       │   │   │   └── Status::InvalidArgument
  │   │       │   │   ├── WriteBatchHandlerJniCallback::PutCF	[vim java/rocksjni/writebatchhandlerjnicallback.cc +131]
  │   │       │   │   │   ├── CallVoidMethod	[OUT-OF-TREE]
  │   │       │   │   │   ├── WriteBatchHandlerJniCallback::kv_op	[vim java/rocksjni/writebatchhandlerjnicallback.cc +444]
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::OK
  │   │       │   │   │   └── ROCKSDB_NAMESPACE::Status
  │   │       │   │   ├── PutCF	[vim utilities/transactions/write_prepared_txn_db.h +1055]
  │   │       │   │   │   ├── AddKey
  │   │       │   │   │   └── Status::OK
  │   │       │   │   ├── PutCF	[vim utilities/blob_db/blob_db_impl.cc +950]
  │   │       │   │   │   ├── Status::NotSupported
  │   │       │   │   │   └── BlobDBImpl::PutBlobValue	[vim utilities/blob_db/blob_db_impl.cc +1047]
  │   │       │   │   ├── PutCF	[vim db/write_batch.cc +87]
  │   │       │   │   │   └── Status::OK
  │   │       │   │   ├── PutCF	[vim db/write_batch.cc +151]
  │   │       │   │   │   ├── AssignTimestamp
  │   │       │   │   │   └── Status::OK
  │   │       │   │   ├── PutCF	[vim db/write_batch.cc +1525]
  │   │       │   │   │   └── PutCFImpl	[vim db/write_batch.cc +1417]
  │   │       │   │   └── PutCF	[vim db/db_impl/db_impl_secondary.h +244]
  │   │       │   │       └── AddColumnFamilyId	[vim db/db_impl/db_impl_secondary.h +231]
  │   │       │   ├── WriteBatchInternal::Put [+]
  │   │       │   │   ├── WriteBatchInternal::Put	[vim db/write_batch.cc +763]
  │   │       │   │   │   ├── Status::InvalidArgument
  │   │       │   │   │   ├── save	[OUT-OF-TREE]
  │   │       │   │   │   ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │       │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │       │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   │   │   ├── PutVarint32	[vim util/coding.h +155]
  │   │       │   │   │   ├── PutLengthPrefixedSlice	[vim util/coding.h +224]
  │   │       │   │   │   └── commit
  │   │       │   │   └── WriteBatchInternal::Put	[vim db/write_batch.cc +821]
  │   │       │   │       ├── WriteBatchInternal::CheckSlicePartsLength	[vim db/write_batch.cc +801]
  │   │       │   │       ├── save	[OUT-OF-TREE]
  │   │       │   │       ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │       │   │       ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │       │   │       ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   │       ├── PutVarint32	[vim util/coding.h +155]
  │   │       │   │       ├── PutLengthPrefixedSlicePartsWithPadding	[vim util/coding.h +245]
  │   │       │   │       ├── PutLengthPrefixedSliceParts
  │   │       │   │       └── commit
  │   │       │   ├── MergeCF [+]
  │   │       │   │   ├── MergeCF	[vim tools/trace_analyzer_tool.h +279]
  │   │       │   │   │   └── TraceAnalyzer::HandleMerge	[vim tools/trace_analyzer_tool.cc +1679]
  │   │       │   │   ├── MergeCF	[vim tools/ldb_cmd.cc +2151]
  │   │       │   │   │   ├── commonPutMerge	[vim tools/ldb_cmd.cc +2134]
  │   │       │   │   │   └── Status::OK
  │   │       │   │   ├── MergeCF	[vim include/rocksdb/write_batch.h +227]
  │   │       │   │   │   ├── Merge
  │   │       │   │   │   ├── Status::OK
  │   │       │   │   │   └── Status::InvalidArgument
  │   │       │   │   ├── WriteBatchHandlerJniCallback::MergeCF	[vim java/rocksjni/writebatchhandlerjnicallback.cc +164]
  │   │       │   │   │   ├── CallVoidMethod	[OUT-OF-TREE]
  │   │       │   │   │   ├── WriteBatchHandlerJniCallback::kv_op	[vim java/rocksjni/writebatchhandlerjnicallback.cc +444]
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::OK
  │   │       │   │   │   └── ROCKSDB_NAMESPACE::Status
  │   │       │   │   ├── MergeCF	[vim utilities/transactions/write_prepared_txn_db.h +1067]
  │   │       │   │   │   ├── AddKey
  │   │       │   │   │   └── Status::OK
  │   │       │   │   ├── MergeCF	[vim utilities/blob_db/blob_db_impl.cc +986]
  │   │       │   │   │   └── Status::NotSupported
  │   │       │   │   ├── MergeCF	[vim db/write_batch.cc +107]
  │   │       │   │   │   └── Status::OK
  │   │       │   │   ├── MergeCF	[vim db/write_batch.cc +177]
  │   │       │   │   │   ├── AssignTimestamp
  │   │       │   │   │   └── Status::OK
  │   │       │   │   ├── MergeCF	[vim db/write_batch.cc +1691]
  │   │       │   │   │   ├── SeekToColumnFamily	[vim db/write_batch.cc +1377]
  │   │       │   │   │   ├── IsDuplicateKeySeq
  │   │       │   │   │   ├── GetMemTable
  │   │       │   │   │   ├── GetImmutableMemTableOptions	[vim db/memtable.h +416]
  │   │       │   │   │   ├── lkey	[OUT-OF-TREE]
  │   │       │   │   │   ├── MemTable::CountSuccessiveMergeEntries	[vim db/memtable.cc +1113]
  │   │       │   │   │   ├── GetColumnFamilyHandle
  │   │       │   │   │   ├── DefaultColumnFamily
  │   │       │   │   │   ├── Get
  │   │       │   │   │   ├── Slice
  │   │       │   │   │   ├── MergeHelper::TimedFullMerge	[vim db/merge_helper.cc +51]
  │   │       │   │   │   ├── Env::Default
  │   │       │   │   │   ├── Add
  │   │       │   │   │   ├── get_post_process_info	[vim db/write_batch.cc +1998]
  │   │       │   │   │   ├── Status::TryAgain
  │   │       │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │       │   │   │   ├── WriteBatchInternal::Merge
  │   │       │   │   │   ├── MaybeAdvanceSeq	[vim db/write_batch.cc +1356]
  │   │       │   │   │   └── CheckMemtableFull	[vim db/write_batch.cc +1818]
  │   │       │   │   └── MergeCF	[vim db/db_impl/db_impl_secondary.h +262]
  │   │       │   │       └── AddColumnFamilyId	[vim db/db_impl/db_impl_secondary.h +231]
  │   │       │   ├── DBWithTTLImpl::AppendTS	[vim utilities/ttl/db_ttl_impl.cc +142]
  │   │       │   │   ├── GetCurrentTime [+]
  │   │       │   │   │   ├── GetCurrentTime	[vim include/rocksdb/env.h +1367]
  │   │       │   │   │   ├── GetCurrentTime	[vim env/composite_env_wrapper.h +540]
  │   │       │   │   │   ├── GetCurrentTime	[vim env/env_posix.cc +291]
  │   │       │   │   │   ├── MockEnv::GetCurrentTime	[vim env/mock_env.cc +1031]
  │   │       │   │   │   ├── GetCurrentTime	[vim hdfs/env_hdfs.h +140]
  │   │       │   │   │   ├── WinEnvIO::GetCurrentTime	[vim port/win/env_win.cc +133]
  │   │       │   │   │   └── WinEnv::GetCurrentTime	[vim port/win/env_win.cc +1332]
  │   │       │   │   └── EncodeFixed32	[vim util/coding_lean.h +33]
  │   │       │   ├── WriteBatchInternal::Merge [+]
  │   │       │   │   ├── WriteBatchInternal::Merge	[vim db/write_batch.cc +1064]
  │   │       │   │   │   ├── Status::InvalidArgument
  │   │       │   │   │   ├── save	[OUT-OF-TREE]
  │   │       │   │   │   ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │       │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │       │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   │   │   ├── PutVarint32	[vim util/coding.h +155]
  │   │       │   │   │   ├── PutLengthPrefixedSlice	[vim util/coding.h +224]
  │   │       │   │   │   └── commit
  │   │       │   │   └── WriteBatchInternal::Merge	[vim db/write_batch.cc +1095]
  │   │       │   │       ├── WriteBatchInternal::CheckSlicePartsLength	[vim db/write_batch.cc +801]
  │   │       │   │       ├── save	[OUT-OF-TREE]
  │   │       │   │       ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │       │   │       ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │       │   │       ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   │       ├── PutVarint32	[vim util/coding.h +155]
  │   │       │   │       ├── PutLengthPrefixedSliceParts
  │   │       │   │       └── commit
  │   │       │   ├── DeleteCF [+]
  │   │       │   │   ├── DeleteCF	[vim tools/trace_analyzer_tool.h +266]
  │   │       │   │   │   └── TraceAnalyzer::HandleDelete	[vim tools/trace_analyzer_tool.cc +1577]
  │   │       │   │   ├── DeleteCF	[vim tools/ldb_cmd.cc +2162]
  │   │       │   │   │   ├── LDBCommand::StringToHex	[vim tools/ldb_cmd.cc +814]
  │   │       │   │   │   ├── ToString
  │   │       │   │   │   └── Status::OK
  │   │       │   │   ├── DeleteCF	[vim include/rocksdb/write_batch.h +201]
  │   │       │   │   │   ├── Delete
  │   │       │   │   │   ├── Status::OK
  │   │       │   │   │   └── Status::InvalidArgument
  │   │       │   │   ├── WriteBatchHandlerJniCallback::DeleteCF	[vim java/rocksjni/writebatchhandlerjnicallback.cc +197]
  │   │       │   │   │   ├── CallVoidMethod	[OUT-OF-TREE]
  │   │       │   │   │   ├── WriteBatchHandlerJniCallback::k_op	[vim java/rocksjni/writebatchhandlerjnicallback.cc +506]
  │   │       │   │   │   ├── ROCKSDB_NAMESPACE::Status::OK
  │   │       │   │   │   └── ROCKSDB_NAMESPACE::Status
  │   │       │   │   ├── DeleteCF	[vim utilities/transactions/write_prepared_txn_db.h +1059]
  │   │       │   │   │   ├── AddKey
  │   │       │   │   │   └── Status::OK
  │   │       │   │   ├── DeleteCF	[vim utilities/blob_db/blob_db_impl.cc +961]
  │   │       │   │   │   ├── Status::NotSupported
  │   │       │   │   │   └── WriteBatchInternal::Delete
  │   │       │   │   ├── DeleteCF	[vim db/write_batch.cc +92]
  │   │       │   │   │   └── Status::OK
  │   │       │   │   ├── DeleteCF	[vim db/write_batch.cc +157]
  │   │       │   │   │   ├── AssignTimestamp
  │   │       │   │   │   └── Status::OK
  │   │       │   │   ├── DeleteCF	[vim db/write_batch.cc +1549]
  │   │       │   │   │   ├── SeekToColumnFamily	[vim db/write_batch.cc +1377]
  │   │       │   │   │   ├── IsDuplicateKeySeq
  │   │       │   │   │   ├── MaybeAdvanceSeq	[vim db/write_batch.cc +1356]
  │   │       │   │   │   ├── user_comparator
  │   │       │   │   │   ├── timestamp_size	[vim include/rocksdb/comparator.h +101]
  │   │       │   │   │   ├── DeleteImpl	[vim db/write_batch.cc +1530]
  │   │       │   │   │   ├── Slice
  │   │       │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │       │   │   │   └── WriteBatchInternal::Delete
  │   │       │   │   └── DeleteCF	[vim db/db_impl/db_impl_secondary.h +249]
  │   │       │   │       └── AddColumnFamilyId	[vim db/db_impl/db_impl_secondary.h +231]
  │   │       │   ├── WriteBatchInternal::Delete [+]
  │   │       │   │   ├── WriteBatchInternal::Delete	[vim db/write_batch.cc +909]
  │   │       │   │   │   ├── save	[OUT-OF-TREE]
  │   │       │   │   │   ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │       │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │       │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   │   │   ├── PutLengthPrefixedSlice	[vim util/coding.h +224]
  │   │       │   │   │   ├── PutVarint32	[vim util/coding.h +155]
  │   │       │   │   │   └── commit
  │   │       │   │   └── WriteBatchInternal::Delete	[vim db/write_batch.cc +938]
  │   │       │   │       ├── save	[OUT-OF-TREE]
  │   │       │   │       ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │       │   │       ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │       │   │       ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   │       ├── PutVarint32	[vim util/coding.h +155]
  │   │       │   │       ├── PutLengthPrefixedSliceParts
  │   │       │   │       ├── PutLengthPrefixedSlicePartsWithPadding	[vim util/coding.h +245]
  │   │       │   │       └── commit
  │   │       │   ├── Status::OK [+]
  │   │       │   │   ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │       │   │   │   └── IOStatus
  │   │       │   │   └── OK	[vim include/rocksdb/status.h +153]
  │   │       │   │       └── Status
  │   │       │   ├── LogData [+]
  │   │       │   │   ├── WriteBatchHandlerJniCallback::LogData	[vim java/rocksjni/writebatchhandlerjnicallback.cc +289]
  │   │       │   │   │   ├── CallVoidMethod	[OUT-OF-TREE]
  │   │       │   │   │   └── WriteBatchHandlerJniCallback::k_op	[vim java/rocksjni/writebatchhandlerjnicallback.cc +506]
  │   │       │   │   ├── LogData	[vim utilities/blob_db/blob_db_impl.cc +991]
  │   │       │   │   │   └── PutLogData
  │   │       │   │   └── WriteBatch::Handler::LogData	[vim db/write_batch.cc +313]
  │   │       │   ├── PutLogData [+]
  │   │       │   │   ├── TransactionBaseImpl::PutLogData	[vim utilities/transactions/transaction_base.cc +532]
  │   │       │   │   │   └── PutLogData
  │   │       │   │   ├── WriteBatchWithIndex::PutLogData	[vim utilities/write_batch_with_index/write_batch_with_index.cc +758]
  │   │       │   │   │   └── PutLogData
  │   │       │   │   └── WriteBatch::PutLogData	[vim db/write_batch.cc +1144]
  │   │       │   │       ├── save	[OUT-OF-TREE]
  │   │       │   │       ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   │       ├── PutLengthPrefixedSlice	[vim util/coding.h +224]
  │   │       │   │       └── commit
  │   │       │   ├── handler	[OUT-OF-TREE]
  │   │       │   ├── GetEnv [+]
  │   │       │   │   ├── GetEnv	[vim include/rocksdb/utilities/stackable_db.h +305]
  │   │       │   │   │   └── GetEnv
  │   │       │   │   └── DBImpl::GetEnv	[vim db/db_impl/db_impl.cc +3101]
  │   │       │   ├── Iterate [+]
  │   │       │   │   ├── WriteBatch::Iterate	[vim db/write_batch.cc +515]
  │   │       │   │   │   ├── Status::Corruption
  │   │       │   │   │   └── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │       │   │   ├── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │       │   │   │   ├── input
  │   │       │   │   │   ├── Continue
  │   │       │   │   │   ├── ReadRecordFromWriteBatch	[vim db/write_batch.cc +415]
  │   │       │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │       │   │   │   ├── PutCF
  │   │       │   │   │   ├── DeleteCF
  │   │       │   │   │   ├── SingleDeleteCF
  │   │       │   │   │   ├── DeleteRangeCF
  │   │       │   │   │   ├── MergeCF
  │   │       │   │   │   ├── PutBlobIndexCF
  │   │       │   │   │   ├── LogData
  │   │       │   │   │   ├── MarkBeginPrepare
  │   │       │   │   │   ├── WriteAfterCommit
  │   │       │   │   │   ├── WriteBeforePrepare
  │   │       │   │   │   ├── Status::NotSupported
  │   │       │   │   │   ├── MarkEndPrepare
  │   │       │   │   │   ├── MarkCommit
  │   │       │   │   │   ├── MarkRollback
  │   │       │   │   │   ├── MarkNoop
  │   │       │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │       │   │   │   ├── Status::Corruption
  │   │       │   │   │   └── Status::OK
  │   │       │   │   └── VersionEditHandlerBase::Iterate	[vim db/version_edit_handler.cc +18]
  │   │       │   │       ├── Initialize
  │   │       │   │       ├── Reader::LastRecordEnd	[vim db/log_reader.cc +234]
  │   │       │   │       ├── ReadRecord
  │   │       │   │       ├── DecodeFrom
  │   │       │   │       ├── AtomicGroupReadBuffer::AddEdit	[vim db/version_set.cc +3700]
  │   │       │   │       ├── AtomicGroupReadBuffer::IsFull	[vim db/version_set.cc +3734]
  │   │       │   │       ├── replay_buffer
  │   │       │   │       ├── ApplyVersionEdit
  │   │       │   │       ├── Clear
  │   │       │   │       ├── CheckIterationResult
  │   │       │   │       └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │       │   └── Write
  │   │       ├── PessimisticTransactionDB::Write	[vim utilities/transactions/pessimistic_transaction_db.cc +511]
  │   │       │   └── WriteWithConcurrencyControl	[vim utilities/transactions/pessimistic_transaction_db.h +71]
  │   │       │       ├── PessimisticTransactionDB::BeginInternalTransaction	[vim utilities/transactions/pessimistic_transaction_db.cc +405]
  │   │       │       │   ├── BeginTransaction
  │   │       │       │   └── SetLockTimeout
  │   │       │       ├── DisableIndexing	[vim utilities/transactions/transaction_base.h +218]
  │   │       │       ├── static_cast_with_check	[vim util/cast_util.h +13]
  │   │       │       └── PessimisticTransaction::CommitBatch	[vim utilities/transactions/pessimistic_transaction.cc +137]
  │   │       │           ├── keys_to_unlock	[OUT-OF-TREE]
  │   │       │           ├── Create
  │   │       │           ├── PessimisticTransaction::LockBatch	[vim utilities/transactions/pessimistic_transaction.cc +472]
  │   │       │           ├── IsExpired
  │   │       │           ├── std::atomic_compare_exchange_strong	[OUT-OF-TREE]
  │   │       │           ├── CommitBatchInternal
  │   │       │           ├── Status::Expired
  │   │       │           ├── Status::InvalidArgument
  │   │       │           └── UnLock
  │   │       ├── WriteCommittedTxnDB::Write	[vim utilities/transactions/pessimistic_transaction_db.cc +516]
  │   │       │   ├── Write
  │   │       │   └── WriteWithConcurrencyControl	[vim utilities/transactions/pessimistic_transaction_db.h +71]
  │   │       │       ├── PessimisticTransactionDB::BeginInternalTransaction	[vim utilities/transactions/pessimistic_transaction_db.cc +405]
  │   │       │       │   ├── BeginTransaction
  │   │       │       │   └── SetLockTimeout
  │   │       │       ├── DisableIndexing	[vim utilities/transactions/transaction_base.h +218]
  │   │       │       ├── static_cast_with_check	[vim util/cast_util.h +13]
  │   │       │       └── PessimisticTransaction::CommitBatch	[vim utilities/transactions/pessimistic_transaction.cc +137]
  │   │       │           ├── keys_to_unlock	[OUT-OF-TREE]
  │   │       │           ├── Create
  │   │       │           ├── PessimisticTransaction::LockBatch	[vim utilities/transactions/pessimistic_transaction.cc +472]
  │   │       │           ├── IsExpired
  │   │       │           ├── std::atomic_compare_exchange_strong	[OUT-OF-TREE]
  │   │       │           ├── CommitBatchInternal
  │   │       │           ├── Status::Expired
  │   │       │           ├── Status::InvalidArgument
  │   │       │           └── UnLock
  │   │       ├── WriteCommittedTxnDB::Write	[vim utilities/transactions/pessimistic_transaction_db.cc +525]
  │   │       │   ├── Write
  │   │       │   └── WriteWithConcurrencyControl	[vim utilities/transactions/pessimistic_transaction_db.h +71]
  │   │       │       ├── PessimisticTransactionDB::BeginInternalTransaction	[vim utilities/transactions/pessimistic_transaction_db.cc +405]
  │   │       │       │   ├── BeginTransaction
  │   │       │       │   └── SetLockTimeout
  │   │       │       ├── DisableIndexing	[vim utilities/transactions/transaction_base.h +218]
  │   │       │       ├── static_cast_with_check	[vim util/cast_util.h +13]
  │   │       │       └── PessimisticTransaction::CommitBatch	[vim utilities/transactions/pessimistic_transaction.cc +137]
  │   │       │           ├── keys_to_unlock	[OUT-OF-TREE]
  │   │       │           ├── Create
  │   │       │           ├── PessimisticTransaction::LockBatch	[vim utilities/transactions/pessimistic_transaction.cc +472]
  │   │       │           ├── IsExpired
  │   │       │           ├── std::atomic_compare_exchange_strong	[OUT-OF-TREE]
  │   │       │           ├── CommitBatchInternal
  │   │       │           ├── Status::Expired
  │   │       │           ├── Status::InvalidArgument
  │   │       │           └── UnLock
  │   │       ├── WritePreparedTxnDB::Write	[vim utilities/transactions/write_prepared_txn_db.cc +115]
  │   │       │   ├── WritePreparedTxnDB::WriteInternal	[vim utilities/transactions/write_prepared_txn_db.cc +146]
  │   │       │   │   ├── Count [+]
  │   │       │   │   │   ├── WriteBatch::Count	[vim db/write_batch.cc +337]
  │   │       │   │   │   └── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │       │   │   ├── Status::OK [+]
  │   │       │   │   │   ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │       │   │   │   │   └── IOStatus
  │   │       │   │   │   └── OK	[vim include/rocksdb/status.h +153]
  │   │       │   │   │       └── Status
  │   │       │   │   ├── counter	[OUT-OF-TREE]
  │   │       │   │   ├── GetCFComparatorMap	[vim utilities/transactions/write_prepared_txn_db.h +433]
  │   │       │   │   ├── Iterate [+]
  │   │       │   │   │   ├── WriteBatch::Iterate	[vim db/write_batch.cc +515]
  │   │       │   │   │   │   ├── Status::Corruption
  │   │       │   │   │   │   └── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │       │   │   │   ├── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │       │   │   │   │   ├── input
  │   │       │   │   │   │   ├── Continue
  │   │       │   │   │   │   ├── ReadRecordFromWriteBatch	[vim db/write_batch.cc +415]
  │   │       │   │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │       │   │   │   │   ├── PutCF
  │   │       │   │   │   │   ├── DeleteCF
  │   │       │   │   │   │   ├── SingleDeleteCF
  │   │       │   │   │   │   ├── DeleteRangeCF
  │   │       │   │   │   │   ├── MergeCF
  │   │       │   │   │   │   ├── PutBlobIndexCF
  │   │       │   │   │   │   ├── LogData
  │   │       │   │   │   │   ├── MarkBeginPrepare
  │   │       │   │   │   │   ├── WriteAfterCommit
  │   │       │   │   │   │   ├── WriteBeforePrepare
  │   │       │   │   │   │   ├── Status::NotSupported
  │   │       │   │   │   │   ├── MarkEndPrepare
  │   │       │   │   │   │   ├── MarkCommit
  │   │       │   │   │   │   ├── MarkRollback
  │   │       │   │   │   │   ├── MarkNoop
  │   │       │   │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │       │   │   │   │   ├── Status::Corruption
  │   │       │   │   │   │   └── Status::OK
  │   │       │   │   │   └── VersionEditHandlerBase::Iterate	[vim db/version_edit_handler.cc +18]
  │   │       │   │   │       ├── Initialize
  │   │       │   │   │       ├── Reader::LastRecordEnd	[vim db/log_reader.cc +234]
  │   │       │   │   │       ├── ReadRecord
  │   │       │   │   │       ├── DecodeFrom
  │   │       │   │   │       ├── AtomicGroupReadBuffer::AddEdit	[vim db/version_set.cc +3700]
  │   │       │   │   │       ├── AtomicGroupReadBuffer::IsFull	[vim db/version_set.cc +3734]
  │   │       │   │   │       ├── replay_buffer
  │   │       │   │   │       ├── ApplyVersionEdit
  │   │       │   │   │       ├── Clear
  │   │       │   │   │       ├── CheckIterationResult
  │   │       │   │   │       └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │       │   │   ├── BatchCount	[vim utilities/transactions/write_prepared_txn_db.h +1049]
  │   │       │   │   ├── WPRecordTick	[vim utilities/transactions/write_prepared_txn_db.h +508]
  │   │       │   │   │   └── RecordTick	[vim monitoring/statistics.h +124]
  │   │       │   │   ├── write_options	[OUT-OF-TREE]
  │   │       │   │   ├── WriteBatchInternal::InsertNoop	[vim db/write_batch.cc +854]
  │   │       │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   │   │   └── Status::OK
  │   │       │   │   ├── add_prepared_callback	[OUT-OF-TREE]
  │   │       │   │   ├── update_commit_map	[OUT-OF-TREE]
  │   │       │   │   ├── SetId [+]
  │   │       │   │   │   ├── SetId	[vim tools/db_bench_tool.cc +1959]
  │   │       │   │   │   ├── SetId	[vim include/rocksdb/utilities/transaction.h +532]
  │   │       │   │   │   └── SetId	[vim utilities/transactions/write_prepared_txn.h +82]
  │   │       │   │   ├── ROCKS_LOG_DETAILS	[OUT-OF-TREE]
  │   │       │   │   ├── immutable_db_options	[vim db/db_impl/db_impl.h +703]
  │   │       │   │   ├── update_commit_map_with_prepare	[OUT-OF-TREE]
  │   │       │   │   └── DBImpl::WriteImpl	[RECURSIVE]	[vim db/db_impl/db_impl_write.cc +68]
  │   │       │   └── WriteWithConcurrencyControl	[vim utilities/transactions/pessimistic_transaction_db.h +71]
  │   │       │       ├── PessimisticTransactionDB::BeginInternalTransaction	[vim utilities/transactions/pessimistic_transaction_db.cc +405]
  │   │       │       │   ├── BeginTransaction
  │   │       │       │   └── SetLockTimeout
  │   │       │       ├── DisableIndexing	[vim utilities/transactions/transaction_base.h +218]
  │   │       │       ├── static_cast_with_check	[vim util/cast_util.h +13]
  │   │       │       └── PessimisticTransaction::CommitBatch	[vim utilities/transactions/pessimistic_transaction.cc +137]
  │   │       │           ├── keys_to_unlock	[OUT-OF-TREE]
  │   │       │           ├── Create
  │   │       │           ├── PessimisticTransaction::LockBatch	[vim utilities/transactions/pessimistic_transaction.cc +472]
  │   │       │           ├── IsExpired
  │   │       │           ├── std::atomic_compare_exchange_strong	[OUT-OF-TREE]
  │   │       │           ├── CommitBatchInternal
  │   │       │           ├── Status::Expired
  │   │       │           ├── Status::InvalidArgument
  │   │       │           └── UnLock
  │   │       ├── WritePreparedTxnDB::Write	[vim utilities/transactions/write_prepared_txn_db.cc +127]
  │   │       │   ├── WritePreparedTxnDB::WriteInternal	[vim utilities/transactions/write_prepared_txn_db.cc +146]
  │   │       │   │   ├── Count [+]
  │   │       │   │   │   ├── WriteBatch::Count	[vim db/write_batch.cc +337]
  │   │       │   │   │   └── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │       │   │   ├── Status::OK [+]
  │   │       │   │   │   ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │       │   │   │   │   └── IOStatus
  │   │       │   │   │   └── OK	[vim include/rocksdb/status.h +153]
  │   │       │   │   │       └── Status
  │   │       │   │   ├── counter	[OUT-OF-TREE]
  │   │       │   │   ├── GetCFComparatorMap	[vim utilities/transactions/write_prepared_txn_db.h +433]
  │   │       │   │   ├── Iterate [+]
  │   │       │   │   │   ├── WriteBatch::Iterate	[vim db/write_batch.cc +515]
  │   │       │   │   │   │   ├── Status::Corruption
  │   │       │   │   │   │   └── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │       │   │   │   ├── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │       │   │   │   │   ├── input
  │   │       │   │   │   │   ├── Continue
  │   │       │   │   │   │   ├── ReadRecordFromWriteBatch	[vim db/write_batch.cc +415]
  │   │       │   │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │       │   │   │   │   ├── PutCF
  │   │       │   │   │   │   ├── DeleteCF
  │   │       │   │   │   │   ├── SingleDeleteCF
  │   │       │   │   │   │   ├── DeleteRangeCF
  │   │       │   │   │   │   ├── MergeCF
  │   │       │   │   │   │   ├── PutBlobIndexCF
  │   │       │   │   │   │   ├── LogData
  │   │       │   │   │   │   ├── MarkBeginPrepare
  │   │       │   │   │   │   ├── WriteAfterCommit
  │   │       │   │   │   │   ├── WriteBeforePrepare
  │   │       │   │   │   │   ├── Status::NotSupported
  │   │       │   │   │   │   ├── MarkEndPrepare
  │   │       │   │   │   │   ├── MarkCommit
  │   │       │   │   │   │   ├── MarkRollback
  │   │       │   │   │   │   ├── MarkNoop
  │   │       │   │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │       │   │   │   │   ├── Status::Corruption
  │   │       │   │   │   │   └── Status::OK
  │   │       │   │   │   └── VersionEditHandlerBase::Iterate	[vim db/version_edit_handler.cc +18]
  │   │       │   │   │       ├── Initialize
  │   │       │   │   │       ├── Reader::LastRecordEnd	[vim db/log_reader.cc +234]
  │   │       │   │   │       ├── ReadRecord
  │   │       │   │   │       ├── DecodeFrom
  │   │       │   │   │       ├── AtomicGroupReadBuffer::AddEdit	[vim db/version_set.cc +3700]
  │   │       │   │   │       ├── AtomicGroupReadBuffer::IsFull	[vim db/version_set.cc +3734]
  │   │       │   │   │       ├── replay_buffer
  │   │       │   │   │       ├── ApplyVersionEdit
  │   │       │   │   │       ├── Clear
  │   │       │   │   │       ├── CheckIterationResult
  │   │       │   │   │       └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │       │   │   ├── BatchCount	[vim utilities/transactions/write_prepared_txn_db.h +1049]
  │   │       │   │   ├── WPRecordTick	[vim utilities/transactions/write_prepared_txn_db.h +508]
  │   │       │   │   │   └── RecordTick	[vim monitoring/statistics.h +124]
  │   │       │   │   ├── write_options	[OUT-OF-TREE]
  │   │       │   │   ├── WriteBatchInternal::InsertNoop	[vim db/write_batch.cc +854]
  │   │       │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   │   │   └── Status::OK
  │   │       │   │   ├── add_prepared_callback	[OUT-OF-TREE]
  │   │       │   │   ├── update_commit_map	[OUT-OF-TREE]
  │   │       │   │   ├── SetId [+]
  │   │       │   │   │   ├── SetId	[vim tools/db_bench_tool.cc +1959]
  │   │       │   │   │   ├── SetId	[vim include/rocksdb/utilities/transaction.h +532]
  │   │       │   │   │   └── SetId	[vim utilities/transactions/write_prepared_txn.h +82]
  │   │       │   │   ├── ROCKS_LOG_DETAILS	[OUT-OF-TREE]
  │   │       │   │   ├── immutable_db_options	[vim db/db_impl/db_impl.h +703]
  │   │       │   │   ├── update_commit_map_with_prepare	[OUT-OF-TREE]
  │   │       │   │   └── DBImpl::WriteImpl	[RECURSIVE]	[vim db/db_impl/db_impl_write.cc +68]
  │   │       │   └── PessimisticTransactionDB::WriteWithConcurrencyControl [+]
  │   │       │       └── WriteWithConcurrencyControl	[vim utilities/transactions/pessimistic_transaction_db.h +71]
  │   │       │           ├── PessimisticTransactionDB::BeginInternalTransaction	[vim utilities/transactions/pessimistic_transaction_db.cc +405]
  │   │       │           │   ├── BeginTransaction
  │   │       │           │   └── SetLockTimeout
  │   │       │           ├── DisableIndexing	[vim utilities/transactions/transaction_base.h +218]
  │   │       │           ├── static_cast_with_check	[vim util/cast_util.h +13]
  │   │       │           └── PessimisticTransaction::CommitBatch	[vim utilities/transactions/pessimistic_transaction.cc +137]
  │   │       │               ├── keys_to_unlock	[OUT-OF-TREE]
  │   │       │               ├── Create
  │   │       │               ├── PessimisticTransaction::LockBatch	[vim utilities/transactions/pessimistic_transaction.cc +472]
  │   │       │               ├── IsExpired
  │   │       │               ├── std::atomic_compare_exchange_strong	[OUT-OF-TREE]
  │   │       │               ├── CommitBatchInternal
  │   │       │               ├── Status::Expired
  │   │       │               ├── Status::InvalidArgument
  │   │       │               └── UnLock
  │   │       ├── Write	[RECURSIVE]	[vim utilities/transactions/optimistic_transaction_db_impl.h +57]
  │   │       ├── ThreadedWriter::Write	[vim utilities/persistent_cache/block_cache_tier_file.cc +562]
  │   │       │   ├── Push
  │   │       │   └── IO
  │   │       ├── BlobDBImpl::Write	[vim utilities/blob_db/blob_db_impl.cc +994]
  │   │       │   ├── write_sw	[OUT-OF-TREE]
  │   │       │   ├── RecordTick	[vim monitoring/statistics.h +124]
  │   │       │   ├── static_cast_with_check	[vim util/cast_util.h +13]
  │   │       │   ├── DefaultColumnFamily
  │   │       │   ├── GetID
  │   │       │   ├── blob_inserter	[OUT-OF-TREE]
  │   │       │   ├── Iterate
  │   │       │   ├── Write
  │   │       │   └── batch
  │   │       ├── Write	[vim db/compacted_db_impl.h +56]
  │   │       │   └── Status::NotSupported
  │   │       ├── Write	[vim db/db_impl/db_impl_secondary.h +133]
  │   │       │   └── Status::NotSupported
  │   │       ├── DBImpl::Write	[vim db/db_impl/db_impl_write.cc +52]
  │   │       │   └── DBImpl::WriteImpl	[vim db/db_impl/db_impl_write.cc +68]
  │   │       ├── Write	[vim db/db_impl/db_impl_readonly.h +66]
  │   │       │   └── Status::NotSupported
  │   │       ├── WinRandomRWFile::Write	[vim port/win/io_win.cc +1006]
  │   │       │   └── WinWritableImpl::PositionedAppendImpl	[vim port/win/io_win.cc +819]
  │   │       └── Tracer::Write	[vim trace_replay/trace_replay.cc +71]
  │   │           ├── Tracer::ShouldSkipTrace	[vim trace_replay/trace_replay.cc +119]
  │   │           ├── Status::OK
  │   │           ├── NowMicros
  │   │           ├── Data
  │   │           └── Tracer::WriteTrace	[vim trace_replay/trace_replay.cc +165]
  │   ├── ThreadedWriter::Write	[vim utilities/persistent_cache/block_cache_tier_file.cc +562]
  │   │   ├── Push
  │   │   └── IO
  │   ├── BlobDBImpl::Write	[vim utilities/blob_db/blob_db_impl.cc +994]
  │   │   ├── write_sw	[OUT-OF-TREE]
  │   │   ├── RecordTick	[vim monitoring/statistics.h +124]
  │   │   ├── static_cast_with_check	[vim util/cast_util.h +13]
  │   │   ├── DefaultColumnFamily
  │   │   ├── GetID
  │   │   ├── blob_inserter	[OUT-OF-TREE]
  │   │   ├── Iterate
  │   │   ├── Write
  │   │   └── batch
  │   ├── Write	[vim db/compacted_db_impl.h +56]
  │   │   └── Status::NotSupported
  │   ├── Write	[vim db/db_impl/db_impl_secondary.h +133]
  │   │   └── Status::NotSupported
  │   ├── DBImpl::Write	[vim db/db_impl/db_impl_write.cc +52]
  │   │   └── DBImpl::WriteImpl	[vim db/db_impl/db_impl_write.cc +68]
  │   ├── Write	[vim db/db_impl/db_impl_readonly.h +66]
  │   │   └── Status::NotSupported
  │   ├── WinRandomRWFile::Write	[vim port/win/io_win.cc +1006]
  │   │   └── WinWritableImpl::PositionedAppendImpl	[vim port/win/io_win.cc +819]
  │   └── Tracer::Write	[vim trace_replay/trace_replay.cc +71]
  │       ├── Tracer::ShouldSkipTrace	[vim trace_replay/trace_replay.cc +119]
  │       ├── Status::OK
  │       ├── NowMicros
  │       ├── Data
  │       └── Tracer::WriteTrace	[vim trace_replay/trace_replay.cc +165]
  ├── Status::InvalidArgument [+]
  │   ├── RocksDBOptionsParser::InvalidArgument	[vim options/options_parser.cc +215]
  │   │   ├── Status::InvalidArgument
  │   │   └── ToString [+]
  │   │       ├── Configurable::ToString	[vim options/configurable.cc +458]
  │   │       │   └── SerializeOptions
  │   │       ├── Status::ToString	[vim util/status.cc +79]
  │   │       │   ├── code
  │   │       │   └── result	[OUT-OF-TREE]
  │   │       ├── ToString	[vim util/string_util.h +23]
  │   │       │   └── std::to_string	[OUT-OF-TREE]
  │   │       ├── Slice::ToString	[vim util/slice.cc +157]
  │   │       │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   └── toHex	[vim util/slice.cc +120]
  │   │       ├── ToString	[vim include/rocksdb/configurable.h +180]
  │   │       │   └── ToString
  │   │       ├── ToString	[vim include/rocksdb/table_properties.h +146]
  │   │       │   └── Name
  │   │       ├── ToString	[vim include/rocksdb/utilities/ldb_cmd_execute_result.h +27]
  │   │       ├── ToString	[vim include/rocksdb/statistics.h +564]
  │   │       │   └── std::string	[OUT-OF-TREE]
  │   │       ├── ToString	[vim include/rocksdb/file_system.h +132]
  │   │       │   └── str	[OUT-OF-TREE]
  │   │       ├── ToString	[vim utilities/simulator_cache/sim_cache.cc +287]
  │   │       │   ├── std::to_string	[OUT-OF-TREE]
  │   │       │   ├── get_miss_counter	[vim utilities/simulator_cache/sim_cache.cc +272]
  │   │       │   └── get_hit_counter	[vim utilities/simulator_cache/sim_cache.cc +276]
  │   │       ├── CompactOnDeletionCollectorFactory::ToString	[vim utilities/table_properties_collectors/compact_on_deletion_collector.cc +105]
  │   │       │   ├── Name
  │   │       │   └── str	[OUT-OF-TREE]
  │   │       ├── PersistentCacheConfig::ToString	[vim utilities/persistent_cache/persistent_cache_tier.cc +16]
  │   │       │   └── c_str	[OUT-OF-TREE]
  │   │       ├── ToString	[vim table/block_based/filter_block.h +151]
  │   │       │   └── error_msg	[OUT-OF-TREE]
  │   │       ├── BlockBasedFilterBlockReader::ToString	[vim table/block_based/block_based_filter_block.cc +306]
  │   │       │   ├── FilterBlockReaderCommon::GetOrReadFilterBlock	[vim table/block_based/filter_block_reader_common.cc +66]
  │   │       │   ├── BlockBasedFilterBlockReader::ParseFieldsFromBlock	[vim table/block_based/block_based_filter_block.cc +221]
  │   │       │   ├── GetValue
  │   │       │   ├── std::string	[OUT-OF-TREE]
  │   │       │   ├── s_bo	[OUT-OF-TREE]
  │   │       │   ├── s_hd	[OUT-OF-TREE]
  │   │       │   ├── s_fb	[OUT-OF-TREE]
  │   │       │   ├── DecodeFixed32	[vim util/coding_lean.h +74]
  │   │       │   ├── ROCKSDB_NAMESPACE::ToString
  │   │       │   ├── Slice
  │   │       │   ├── AppendItem
  │   │       │   └── ToString
  │   │       ├── TableProperties::ToString	[vim table/table_properties.cc +72]
  │   │       │   ├── ROCKSDB_NAMESPACE::ToString
  │   │       │   ├── std::string	[OUT-OF-TREE]
  │   │       │   └── AppendProperty
  │   │       ├── BlockHandle::ToString	[vim table/format.cc +82]
  │   │       │   ├── EncodeTo
  │   │       │   ├── Slice
  │   │       │   └── ToString
  │   │       ├── IndexValue::ToString	[vim table/format.cc +136]
  │   │       │   ├── EncodeTo
  │   │       │   ├── Slice
  │   │       │   └── ToString
  │   │       ├── Footer::ToString	[vim table/format.cc +262]
  │   │       │   ├── IsLegacyFooterFormat	[vim table/format.cc +147]
  │   │       │   ├── ToString
  │   │       │   └── ROCKSDB_NAMESPACE::ToString
  │   │       ├── BackupStatistics::ToString	[vim utilities/backupable/backupable_db.cc +81]
  │   │       │   ├── BackupStatistics::GetNumberSuccessBackup	[vim utilities/backupable/backupable_db.cc +74]
  │   │       │   └── BackupStatistics::GetNumberFailBackup	[vim utilities/backupable/backupable_db.cc +77]
  │   │       ├── HistogramWindowingImpl::ToString	[vim monitoring/histogram_windowing.cc +98]
  │   │       │   └── ToString
  │   │       ├── PerfContext::ToString	[vim monitoring/perf_context.cc +450]
  │   │       ├── IOStatsContext::ToString	[vim monitoring/iostats_context.cc +43]
  │   │       │   ├── IOSTATS_CONTEXT_OUTPUT	[OUT-OF-TREE]
  │   │       │   ├── str	[OUT-OF-TREE]
  │   │       │   └── find_last_not_of	[OUT-OF-TREE]
  │   │       ├── HistogramStat::ToString	[vim monitoring/histogram.cc +182]
  │   │       │   ├── num
  │   │       │   ├── Average
  │   │       │   ├── StandardDeviation
  │   │       │   ├── min
  │   │       │   ├── Median
  │   │       │   ├── max
  │   │       │   ├── Percentile
  │   │       │   ├── bucket_at	[vim monitoring/histogram.h +73]
  │   │       │   ├── BucketLimit	[vim monitoring/histogram.h +42]
  │   │       │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       ├── HistogramImpl::ToString	[vim monitoring/histogram.cc +279]
  │   │       │   └── ToString
  │   │       └── StatisticsImpl::ToString	[vim monitoring/statistics.cc +380]
  │   │           ├── StatisticsImpl::getTickerCountLocked	[vim monitoring/statistics.cc +265]
  │   │           ├── StatisticsImpl::getHistogramImplLocked	[vim monitoring/statistics.cc +280]
  │   │           ├── Data
  │   │           ├── c_str	[OUT-OF-TREE]
  │   │           └── shrink_to_fit	[OUT-OF-TREE]
  │   ├── InvalidArgument	[vim include/rocksdb/io_status.h +92]
  │   │   ├── Slice [+]
  │   │   │   ├── Slice::Slice	[vim util/slice.cc +142]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +38]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +41]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +45]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +50]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   └── Slice	[vim include/rocksdb/slice.h +55]
  │   │   │       ├── data_	[OUT-OF-TREE]
  │   │   │       └── strlen	[OUT-OF-TREE]
  │   │   └── IOStatus [+]
  │   │       ├── IOStatus	[vim include/rocksdb/io_status.h +39]
  │   │       │   └── IOStatus
  │   │       ├── IOStatus	[vim include/rocksdb/io_status.h +144]
  │   │       │   ├── Status
  │   │       │   ├── retryable_	[OUT-OF-TREE]
  │   │       │   ├── data_loss_	[OUT-OF-TREE]
  │   │       │   └── scope_	[OUT-OF-TREE]
  │   │       ├── IOStatus	[vim include/rocksdb/io_status.h +151]
  │   │       │   └── IOStatus
  │   │       ├── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +155]
  │   │       │   ├── Status
  │   │       │   ├── retryable_	[OUT-OF-TREE]
  │   │       │   ├── data_loss_	[OUT-OF-TREE]
  │   │       │   └── scope_	[OUT-OF-TREE]
  │   │       ├── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +177]
  │   │       │   ├── Status
  │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │       └── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +205]
  │   │           ├── IOStatus
  │   │           └── std::move	[OUT-OF-TREE]
  │   ├── InvalidArgument	[vim include/rocksdb/io_status.h +96]
  │   │   └── IOStatus [+]
  │   │       ├── IOStatus	[vim include/rocksdb/io_status.h +39]
  │   │       │   └── IOStatus
  │   │       ├── IOStatus	[vim include/rocksdb/io_status.h +144]
  │   │       │   ├── Status
  │   │       │   ├── retryable_	[OUT-OF-TREE]
  │   │       │   ├── data_loss_	[OUT-OF-TREE]
  │   │       │   └── scope_	[OUT-OF-TREE]
  │   │       ├── IOStatus	[vim include/rocksdb/io_status.h +151]
  │   │       │   └── IOStatus
  │   │       ├── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +155]
  │   │       │   ├── Status
  │   │       │   ├── retryable_	[OUT-OF-TREE]
  │   │       │   ├── data_loss_	[OUT-OF-TREE]
  │   │       │   └── scope_	[OUT-OF-TREE]
  │   │       ├── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +177]
  │   │       │   ├── Status
  │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │       └── IOStatus::IOStatus	[vim include/rocksdb/io_status.h +205]
  │   │           ├── IOStatus
  │   │           └── std::move	[OUT-OF-TREE]
  │   ├── InvalidArgument	[vim include/rocksdb/status.h +188]
  │   │   ├── Slice [+]
  │   │   │   ├── Slice::Slice	[vim util/slice.cc +142]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +38]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +41]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +45]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   ├── Slice	[vim include/rocksdb/slice.h +50]
  │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   └── Slice	[vim include/rocksdb/slice.h +55]
  │   │   │       ├── data_	[OUT-OF-TREE]
  │   │   │       └── strlen	[OUT-OF-TREE]
  │   │   └── Status [+]
  │   │       ├── Status::Status	[vim util/status.cc +60]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   └── sev_	[OUT-OF-TREE]
  │   │       ├── Status	[vim include/rocksdb/status.h +37]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── state_	[OUT-OF-TREE]
  │   │       ├── Status	[vim include/rocksdb/status.h +519]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── state_	[OUT-OF-TREE]
  │   │       ├── Status	[vim include/rocksdb/status.h +523]
  │   │       │   └── Status
  │   │       ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │       ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │       │   ├── code_	[OUT-OF-TREE]
  │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │       └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │           ├── Status
  │   │           └── std::move	[OUT-OF-TREE]
  │   └── InvalidArgument	[vim include/rocksdb/status.h +191]
  │       └── Status [+]
  │           ├── Status::Status	[vim util/status.cc +60]
  │           │   ├── code_	[OUT-OF-TREE]
  │           │   ├── subcode_	[OUT-OF-TREE]
  │           │   └── sev_	[OUT-OF-TREE]
  │           ├── Status	[vim include/rocksdb/status.h +37]
  │           │   ├── code_	[OUT-OF-TREE]
  │           │   ├── subcode_	[OUT-OF-TREE]
  │           │   ├── sev_	[OUT-OF-TREE]
  │           │   └── state_	[OUT-OF-TREE]
  │           ├── Status	[vim include/rocksdb/status.h +519]
  │           │   ├── code_	[OUT-OF-TREE]
  │           │   ├── subcode_	[OUT-OF-TREE]
  │           │   ├── sev_	[OUT-OF-TREE]
  │           │   └── state_	[OUT-OF-TREE]
  │           ├── Status	[vim include/rocksdb/status.h +523]
  │           │   └── Status
  │           ├── Status::Status	[vim include/rocksdb/status.h +529]
  │           │   ├── code_	[OUT-OF-TREE]
  │           │   ├── subcode_	[OUT-OF-TREE]
  │           │   ├── sev_	[OUT-OF-TREE]
  │           │   └── Status::CopyState	[vim util/status.cc +20]
  │           ├── Status::Status	[vim include/rocksdb/status.h +536]
  │           │   ├── code_	[OUT-OF-TREE]
  │           │   ├── subcode_	[OUT-OF-TREE]
  │           │   ├── sev_	[OUT-OF-TREE]
  │           │   └── Status::CopyState	[vim util/status.cc +20]
  │           └── Status::Status	[vim include/rocksdb/status.h +558]
  │               ├── Status
  │               └── std::move	[OUT-OF-TREE]
  ├── Status::NotSupported [+]
  │   ├── NotSupported	[vim include/rocksdb/io_status.h +69]
  │   │   ├── Slice
  │   │   └── IOStatus
  │   ├── NotSupported	[vim include/rocksdb/io_status.h +72]
  │   │   └── IOStatus
  │   ├── NotSupported	[vim include/rocksdb/status.h +181]
  │   │   ├── Slice
  │   │   └── Status
  │   └── NotSupported	[vim include/rocksdb/status.h +184]
  │       └── Status
  ├── WriteBatchInternal::IsLatestPersistentState	[vim db/write_batch.cc +735]
  ├── DBImpl::ThrottleLowPriWritesIfNeeded	[vim db/db_impl/db_impl_write.cc +1512]
  │   ├── NeedSpeedupCompaction	[vim db/write_controller.h +54]
  │   │   ├── WriteController::IsStopped	[vim db/write_controller.cc +37]
  │   │   └── NeedsDelay	[vim db/write_controller.h +53]
  │   ├── allow_2pc	[vim db/db_impl/db_impl.h +821]
  │   ├── WriteBatch::HasCommit	[vim db/write_batch.cc +407]
  │   │   └── WriteBatch::ComputeContentFlags	[vim db/write_batch.cc +339]
  │   │       ├── Iterate
  │   │       └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   ├── WriteBatch::HasRollback	[vim db/write_batch.cc +411]
  │   │   └── WriteBatch::ComputeContentFlags	[vim db/write_batch.cc +339]
  │   │       ├── Iterate
  │   │       └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   ├── Status::Incomplete [+]
  │   │   ├── Incomplete	[vim include/rocksdb/status.h +207]
  │   │   │   ├── Slice [+]
  │   │   │   │   ├── Slice::Slice	[vim util/slice.cc +142]
  │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +38]
  │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +41]
  │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +45]
  │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +50]
  │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   └── Slice	[vim include/rocksdb/slice.h +55]
  │   │   │   │       ├── data_	[OUT-OF-TREE]
  │   │   │   │       └── strlen	[OUT-OF-TREE]
  │   │   │   └── Status [+]
  │   │   │       ├── Status::Status	[vim util/status.cc +60]
  │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │       │   └── sev_	[OUT-OF-TREE]
  │   │   │       ├── Status	[vim include/rocksdb/status.h +37]
  │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │       │   └── state_	[OUT-OF-TREE]
  │   │   │       ├── Status	[vim include/rocksdb/status.h +519]
  │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │       │   └── state_	[OUT-OF-TREE]
  │   │   │       ├── Status	[vim include/rocksdb/status.h +523]
  │   │   │       │   └── Status
  │   │   │       ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │       ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │       └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │   │           ├── Status
  │   │   │           └── std::move	[OUT-OF-TREE]
  │   │   └── Incomplete	[vim include/rocksdb/status.h +210]
  │   │       └── Status [+]
  │   │           ├── Status::Status	[vim util/status.cc +60]
  │   │           │   ├── code_	[OUT-OF-TREE]
  │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │           │   └── sev_	[OUT-OF-TREE]
  │   │           ├── Status	[vim include/rocksdb/status.h +37]
  │   │           │   ├── code_	[OUT-OF-TREE]
  │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │           │   └── state_	[OUT-OF-TREE]
  │   │           ├── Status	[vim include/rocksdb/status.h +519]
  │   │           │   ├── code_	[OUT-OF-TREE]
  │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │           │   └── state_	[OUT-OF-TREE]
  │   │           ├── Status	[vim include/rocksdb/status.h +523]
  │   │           │   └── Status
  │   │           ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │           │   ├── code_	[OUT-OF-TREE]
  │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │           │   └── Status::CopyState	[vim util/status.cc +20]
  │   │           ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │           │   ├── code_	[OUT-OF-TREE]
  │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │           │   └── Status::CopyState	[vim util/status.cc +20]
  │   │           └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │               ├── Status
  │   │               └── std::move	[OUT-OF-TREE]
  │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   ├── low_pri_rate_limiter	[vim db/write_controller.h +85]
  │   ├── Request [+]
  │   │   ├── GenericRateLimiter::Request	[vim util/rate_limiter.cc +101]
  │   │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │   ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │   ├── now	[OUT-OF-TREE]
  │   │   │   ├── std::chrono::microseconds	[OUT-OF-TREE]
  │   │   │   ├── GenericRateLimiter::Tune	[vim util/rate_limiter.cc +277]
  │   │   │   │   ├── NowMicrosMonotonic
  │   │   │   │   ├── std::chrono::microseconds	[OUT-OF-TREE]
  │   │   │   │   ├── GetBytesPerSecond	[vim util/rate_limiter.h +65]
  │   │   │   │   ├── std::max
  │   │   │   │   ├── std::min
  │   │   │   │   ├── GenericRateLimiter::SetBytesPerSecond	[vim util/rate_limiter.cc +93]
  │   │   │   │   └── Status::OK
  │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── NowMicrosMonotonic [+]
  │   │   │   │   ├── NowMicrosMonotonic	[vim util/rate_limiter.h +74]
  │   │   │   │   └── WriteController::NowMicrosMonotonic	[vim db/write_controller.cc +109]
  │   │   │   ├── NowMicros [+]
  │   │   │   │   ├── NowMicros	[vim include/rocksdb/env.h +1357]
  │   │   │   │   ├── NowMicros	[vim env/composite_env_wrapper.h +530]
  │   │   │   │   ├── NowMicros	[vim env/env_posix.cc +240]
  │   │   │   │   ├── MockEnv::NowMicros	[vim env/mock_env.cc +1039]
  │   │   │   │   ├── NowMicros	[vim hdfs/env_hdfs.h +130]
  │   │   │   │   └── WinEnv::NowMicros	[vim port/win/env_win.cc +1449]
  │   │   │   ├── RecordTick	[vim monitoring/statistics.h +124]
  │   │   │   │   └── StatisticsImpl::recordTick	[vim monitoring/statistics.cc +334]
  │   │   │   ├── TimedWait [+]
  │   │   │   │   ├── CondVar::TimedWait	[vim port/port_posix.cc +113]
  │   │   │   │   ├── CondVar::TimedWait	[vim port/win/port_win.cc +86]
  │   │   │   │   └── InstrumentedCondVar::TimedWait	[vim monitoring/instrumented_mutex.cc +53]
  │   │   │   ├── Wait [+]
  │   │   │   │   ├── TransactionDBCondVarImpl::Wait	[vim utilities/transactions/transaction_db_mutex_impl.cc +93]
  │   │   │   │   ├── CondVar::Wait	[vim port/port_posix.cc +103]
  │   │   │   │   ├── CondVar::Wait	[vim port/win/port_win.cc +71]
  │   │   │   │   └── InstrumentedCondVar::Wait	[vim monitoring/instrumented_mutex.cc +39]
  │   │   │   ├── GenericRateLimiter::Refill	[vim util/rate_limiter.cc +229]
  │   │   │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │   │   ├── NowMicrosMonotonic
  │   │   │   │   ├── OneIn
  │   │   │   │   ├── pop_front	[OUT-OF-TREE]
  │   │   │   │   └── Signal
  │   │   │   └── Signal [+]
  │   │   │       ├── CondVar::Signal	[vim port/port_posix.cc +134]
  │   │   │       ├── CondVar::Signal	[vim port/win/port_win.cc +128]
  │   │   │       └── Signal	[vim monitoring/instrumented_mutex.h +81]
  │   │   ├── Request	[vim include/rocksdb/rate_limiter.h +48]
  │   │   ├── Request	[vim include/rocksdb/rate_limiter.h +55]
  │   │   │   └── Request
  │   │   └── Request	[vim include/rocksdb/rate_limiter.h +66]
  │   │       ├── IsRateLimited	[vim include/rocksdb/rate_limiter.h +94]
  │   │       └── Request
  │   ├── GetDataSize [+]
  │   │   ├── GetDataSize	[vim include/rocksdb/write_batch.h +284]
  │   │   └── WriteBatchWithIndex::GetDataSize	[vim utilities/write_batch_with_index/write_batch_with_index.cc +1059]
  │   │       └── GetDataSize
  │   └── Status::OK [+]
  │       ├── OK	[vim include/rocksdb/io_status.h +67]
  │       │   └── IOStatus
  │       └── OK	[vim include/rocksdb/status.h +153]
  │           └── Status
  ├── DBImpl::WriteImplWALOnly	[vim db/db_impl/db_impl_write.cc +664]
  │   ├── write_sw	[OUT-OF-TREE]
  │   ├── WriteThread::JoinBatchGroup	[vim db/write_thread.cc +379]
  │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   ├── Status::Incomplete [+]
  │   │   │   │   ├── Incomplete	[vim include/rocksdb/status.h +207]
  │   │   │   │   │   ├── Slice [+]
  │   │   │   │   │   │   ├── Slice::Slice	[vim util/slice.cc +142]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +38]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +41]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +45]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +50]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   └── Slice	[vim include/rocksdb/slice.h +55]
  │   │   │   │   │   │       ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │       └── strlen	[OUT-OF-TREE]
  │   │   │   │   │   └── Status [+]
  │   │   │   │   │       ├── Status::Status	[vim util/status.cc +60]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── sev_	[OUT-OF-TREE]
  │   │   │   │   │       ├── Status	[vim include/rocksdb/status.h +37]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── state_	[OUT-OF-TREE]
  │   │   │   │   │       ├── Status	[vim include/rocksdb/status.h +519]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── state_	[OUT-OF-TREE]
  │   │   │   │   │       ├── Status	[vim include/rocksdb/status.h +523]
  │   │   │   │   │       │   └── Status
  │   │   │   │   │       ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │   │       ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │   │       └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │   │   │   │           ├── Status
  │   │   │   │   │           └── std::move	[OUT-OF-TREE]
  │   │   │   │   └── Incomplete	[vim include/rocksdb/status.h +210]
  │   │   │   │       └── Status [+]
  │   │   │   │           ├── Status::Status	[vim util/status.cc +60]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   └── sev_	[OUT-OF-TREE]
  │   │   │   │           ├── Status	[vim include/rocksdb/status.h +37]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── state_	[OUT-OF-TREE]
  │   │   │   │           ├── Status	[vim include/rocksdb/status.h +519]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── state_	[OUT-OF-TREE]
  │   │   │   │           ├── Status	[vim include/rocksdb/status.h +523]
  │   │   │   │           │   └── Status
  │   │   │   │           ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │           ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │           └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │   │   │               ├── Status
  │   │   │   │               └── std::move	[OUT-OF-TREE]
  │   │   │   ├── SetState [+]
  │   │   │   │   ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │   │   │   └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   │   │   ├── Wait [+]
  │   │   │   │   ├── TransactionDBCondVarImpl::Wait	[vim utilities/transactions/transaction_db_mutex_impl.cc +93]
  │   │   │   │   ├── CondVar::Wait	[vim port/port_posix.cc +103]
  │   │   │   │   ├── CondVar::Wait	[vim port/win/port_win.cc +71]
  │   │   │   │   └── InstrumentedCondVar::Wait	[vim monitoring/instrumented_mutex.cc +39]
  │   │   │   └── compare_exchange_weak	[OUT-OF-TREE]
  │   │   ├── SetState [+]
  │   │   │   ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │   │   └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   ├── port::AsmVolatilePause [+]
  │   │   │   │   ├── AsmVolatilePause	[vim port/win/port_win.h +285]
  │   │   │   │   └── AsmVolatilePause	[vim port/port_posix.h +166]
  │   │   │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │   │   ├── Random::GetTLSInstance	[vim util/random.cc +25]
  │   │   │   │   ├── std::hash
  │   │   │   │   ├── std::this_thread::get_id
  │   │   │   │   └── Random	[vim util/random.h +39]
  │   │   │   ├── OneIn [+]
  │   │   │   │   ├── OneIn	[vim util/random.h +69]
  │   │   │   │   ├── OneIn	[vim util/random.h +131]
  │   │   │   │   └── OneIn	[vim util/random.h +163]
  │   │   │   ├── std::this_thread::yield	[OUT-OF-TREE]
  │   │   │   ├── std::chrono::steady_clock::now	[OUT-OF-TREE]
  │   │   │   ├── std::chrono::microseconds	[OUT-OF-TREE]
  │   │   │   ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │   └── WriteThread::BlockingAwaitState	[vim db/write_thread.cc +34]
  │   │   │       ├── CreateMutex	[vim db/write_thread.h +193]
  │   │   │       ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   │       ├── guard	[OUT-OF-TREE]
  │   │   │       ├── StateMutex	[vim db/write_thread.h +238]
  │   │   │       ├── StateCV	[vim db/write_thread.h +243]
  │   │   │       └── wait
  │   │   └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   ├── IsDBStopped	[vim db/error_handler.h +66]
  │   │   └── severity [+]
  │   │       └── severity	[vim include/rocksdb/status.h +137]
  │   ├── GetBGError	[vim db/error_handler.h +60]
  │   ├── DBImpl::PreprocessWrite	[vim db/db_impl/db_impl_write.cc +903]
  │   │   ├── AssertHeld [+]
  │   │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │       └── AssertHeld
  │   │   ├── IsDBStopped	[vim db/error_handler.h +66]
  │   │   │   └── severity [+]
  │   │   │       └── severity	[vim include/rocksdb/status.h +137]
  │   │   ├── GetBGError	[vim db/error_handler.h +60]
  │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   ├── ColumnFamilySet::NumberOfColumnFamilies	[vim db/column_family.cc +1498]
  │   │   ├── DBImpl::GetMaxTotalWalSize	[vim db/db_impl/db_impl_write.cc +1427]
  │   │   │   └── AssertHeld [+]
  │   │   │       ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │       ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │       ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │       ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │       └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │           └── AssertHeld
  │   │   ├── DBImpl::SwitchWAL	[vim db/db_impl/db_impl_write.cc +1253]
  │   │   │   ├── AssertHeld [+]
  │   │   │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │   │       └── AssertHeld
  │   │   │   ├── allow_2pc	[vim db/db_impl/db_impl.h +821]
  │   │   │   ├── LogsWithPrepTracker::FindMinLogContainingOutstandingPrep	[vim db/logs_with_prep_tracker.cc +43]
  │   │   │   │   └── lock2	[OUT-OF-TREE]
  │   │   │   ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │   ├── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   ├── DBImpl::GetMaxTotalWalSize	[vim db/db_impl/db_impl_write.cc +1427]
  │   │   │   │   └── AssertHeld [+]
  │   │   │   │       ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   │       ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   │       ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   │       ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   │       └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │   │           └── AssertHeld
  │   │   │   ├── DBImpl::SelectColumnFamiliesForAtomicFlush	[vim db/db_impl/db_impl_write.cc +1231]
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── IsDropped	[vim db/column_family.h +315]
  │   │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   │   ├── mem
  │   │   │   │   ├── IsEmpty
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   ├── IsDropped	[vim db/column_family.h +315]
  │   │   │   ├── ColumnFamilyData::OldestLogToKeep	[vim db/column_family.cc +707]
  │   │   │   │   ├── GetLogNumber
  │   │   │   │   ├── MemTableList::PrecomputeMinLogContainingPrepSection	[vim db/memtable_list.cc +676]
  │   │   │   │   ├── mem
  │   │   │   │   └── MemTable::GetMinLogContainingPrepSection	[vim db/memtable.cc +1166]
  │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── DBImpl::MaybeFlushStatsCF	[vim db/db_impl/db_impl_write.cc +1542]
  │   │   │   │   ├── GetColumnFamily
  │   │   │   │   ├── mem
  │   │   │   │   ├── IsEmpty
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── GetLogNumber
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   └── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   ├── WriteThread::EnterUnbatched	[vim db/write_thread.cc +755]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │   │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   │   ├── WriteThread::WaitForMemTableWriters	[vim db/write_thread.cc +783]
  │   │   │   │   └── Lock
  │   │   │   ├── Ref [+]
  │   │   │   │   ├── Ref	[vim cache/lru_cache.h +82]
  │   │   │   │   ├── ClockCacheShard::Ref	[vim cache/clock_cache.cc +450]
  │   │   │   │   ├── ShardedCache::Ref	[vim cache/sharded_cache.cc +59]
  │   │   │   │   ├── LRUCacheShard::Ref	[vim cache/lru_cache.cc +285]
  │   │   │   │   ├── Ref	[vim env/mock_env.cc +41]
  │   │   │   │   ├── Ref	[vim utilities/simulator_cache/sim_cache.cc +215]
  │   │   │   │   ├── Ref	[vim db/column_family.h +280]
  │   │   │   │   ├── SuperVersion::Ref	[vim db/column_family.cc +429]
  │   │   │   │   ├── MemTableListVersion::Ref	[vim db/memtable_list.cc +71]
  │   │   │   │   ├── Ref	[vim db/memtable.h +118]
  │   │   │   │   └── Version::Ref	[vim db/version_set.cc +3033]
  │   │   │   ├── DBImpl::SwitchMemtable	[vim db/db_impl/db_impl_write.cc +1674]
  │   │   │   │   ├── AssertHeld
  │   │   │   │   ├── DBImpl::WriteRecoverableState	[vim db/db_impl/db_impl_write.cc +1180]
  │   │   │   │   ├── prev_log_number	[vim db/version_set.h +1113]
  │   │   │   │   ├── NewFileNumber	[vim db/version_set.h +1055]
  │   │   │   │   ├── GetLatestMutableCFOptions	[vim db/column_family.h +338]
  │   │   │   │   ├── GetEarliestSequenceNumber
  │   │   │   │   ├── num_entries	[vim db/memtable.h +293]
  │   │   │   │   ├── num_deletes	[vim db/memtable.h +300]
  │   │   │   │   ├── DBImpl::GetWalPreallocateBlockSize	[vim db/db_impl/db_impl_write.cc +1843]
  │   │   │   │   ├── CreateWAL	[OUT-OF-TREE]
  │   │   │   │   ├── ColumnFamilyData::ConstructNewMemtable	[vim db/column_family.cc +1047]
  │   │   │   │   ├── NewSuperVersion	[vim db/job_context.h +47]
  │   │   │   │   ├── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   │   ├── pop_front	[OUT-OF-TREE]
  │   │   │   │   ├── Writer::WriteBuffer	[vim db/log_writer.cc +40]
  │   │   │   │   ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │   │   ├── GetName
  │   │   │   │   ├── c_str	[OUT-OF-TREE]
  │   │   │   │   ├── get_log_number
  │   │   │   │   ├── emplace_back	[OUT-OF-TREE]
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   ├── LogFileNumberSize	[vim db/db_impl/db_impl.h +1294]
  │   │   │   │   ├── release
  │   │   │   │   ├── SetBGError
  │   │   │   │   ├── GetBGError	[vim db/error_handler.h +60]
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── GetFirstSequenceNumber	[vim db/memtable.h +332]
  │   │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   │   ├── SetLogNumber
  │   │   │   │   ├── SetCreationSeq	[vim db/memtable.h +351]
  │   │   │   │   ├── LastSequence	[vim db/version_set.h +1063]
  │   │   │   │   ├── SetNextLogNumber	[vim db/memtable.h +363]
  │   │   │   │   ├── Add
  │   │   │   │   ├── mem
  │   │   │   │   ├── Ref
  │   │   │   │   ├── SetMemtable	[vim db/column_family.h +369]
  │   │   │   │   ├── DBImpl::InstallSuperVersionAndScheduleWork	[vim db/db_impl/db_impl_compaction_flush.cc +3255]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── DBImpl::NotifyOnMemTableSealed	[vim db/db_impl/db_impl_write.cc +1655]
  │   │   │   │   ├── Lock
  │   │   │   │   └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   │   ├── ColumnFamilyData::UnrefAndTryDelete	[vim db/column_family.cc +663]
  │   │   │   │   ├── fetch_sub	[OUT-OF-TREE]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── Lock
  │   │   │   │   ├── Unref
  │   │   │   │   └── Cleanup
  │   │   │   ├── WriteThread::ExitUnbatched	[vim db/write_thread.cc +770]
  │   │   │   │   ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   │   │   └── SetState
  │   │   │   ├── AssignAtomicFlushSeq [+]
  │   │   │   │   ├── AssignAtomicFlushSeq	[vim db/memtable_list.h +356]
  │   │   │   │   └── DBImpl::AssignAtomicFlushSeq	[vim db/db_impl/db_impl_write.cc +1245]
  │   │   │   ├── FlushRequested	[vim db/memtable_list.h +311]
  │   │   │   ├── DBImpl::GenerateFlushRequest	[vim db/db_impl/db_impl_compaction_flush.cc +1683]
  │   │   │   │   ├── GetLatestMemTableID	[vim db/memtable_list.h +348]
  │   │   │   │   └── emplace_back	[OUT-OF-TREE]
  │   │   │   ├── DBImpl::SchedulePendingFlush	[vim db/db_impl/db_impl_compaction_flush.cc +2257]
  │   │   │   │   ├── Ref
  │   │   │   │   ├── SetFlushReason	[vim db/column_family.h +323]
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   └── DBImpl::MaybeScheduleFlushOrCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +2094]
  │   │   │       ├── AssertHeld
  │   │   │       ├── IsRecoveryInProgress	[vim db/error_handler.h +79]
  │   │   │       ├── GetBGJobLimits
  │   │   │       ├── GetBackgroundThreads
  │   │   │       ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │       ├── IsBGWorkStopped	[vim db/error_handler.h +71]
  │   │   │       ├── DBImpl::HasExclusiveManualCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +3173]
  │   │   │       ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │       └── Schedule
  │   │   ├── ShouldFlush	[vim include/rocksdb/write_buffer_manager.h +49]
  │   │   │   ├── enabled [+]
  │   │   │   │   └── enabled	[vim include/rocksdb/write_buffer_manager.h +35]
  │   │   │   ├── memory_usage	[vim include/rocksdb/write_buffer_manager.h +40]
  │   │   │   └── mutable_memtable_memory_usage	[vim include/rocksdb/write_buffer_manager.h +43]
  │   │   ├── DBImpl::HandleWriteBufferFull	[vim db/db_impl/db_impl_write.cc +1348]
  │   │   │   ├── AssertHeld [+]
  │   │   │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │   │       └── AssertHeld
  │   │   │   ├── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   ├── memory_usage	[vim include/rocksdb/write_buffer_manager.h +40]
  │   │   │   ├── buffer_size	[vim include/rocksdb/write_buffer_manager.h +46]
  │   │   │   ├── DBImpl::SelectColumnFamiliesForAtomicFlush	[vim db/db_impl/db_impl_write.cc +1231]
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── IsDropped	[vim db/column_family.h +315]
  │   │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   │   ├── mem
  │   │   │   │   ├── IsEmpty
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   ├── IsDropped	[vim db/column_family.h +315]
  │   │   │   ├── GetCreationSeq	[vim db/memtable.h +349]
  │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── DBImpl::MaybeFlushStatsCF	[vim db/db_impl/db_impl_write.cc +1542]
  │   │   │   │   ├── GetColumnFamily
  │   │   │   │   ├── mem
  │   │   │   │   ├── IsEmpty
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── GetLogNumber
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   └── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   ├── WriteThread::EnterUnbatched	[vim db/write_thread.cc +755]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │   │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   │   ├── WriteThread::WaitForMemTableWriters	[vim db/write_thread.cc +783]
  │   │   │   │   └── Lock
  │   │   │   ├── mem [+]
  │   │   │   │   └── mem	[vim db/column_family.h +362]
  │   │   │   ├── IsEmpty [+]
  │   │   │   │   ├── IsEmpty	[vim cache/cache_helpers.h +81]
  │   │   │   │   ├── IsEmpty	[vim utilities/persistent_cache/lrulist.h +106]
  │   │   │   │   ├── IsEmpty	[vim table/block_based/cachable_entry.h +102]
  │   │   │   │   ├── BlockBasedTableBuilder::IsEmpty	[vim table/block_based/block_based_table_builder.cc +1775]
  │   │   │   │   ├── IsEmpty	[vim table/table_builder.h +176]
  │   │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +322]
  │   │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +385]
  │   │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +418]
  │   │   │   │   ├── IsEmpty	[vim db/wal_edit.h +107]
  │   │   │   │   ├── IsEmpty	[vim db/version_builder.cc +91]
  │   │   │   │   ├── IsEmpty	[vim db/memtable.h +326]
  │   │   │   │   ├── AtomicGroupReadBuffer::IsEmpty	[vim db/version_set.cc +3738]
  │   │   │   │   └── IsEmpty	[vim logging/log_buffer.h +29]
  │   │   │   ├── Ref [+]
  │   │   │   │   ├── Ref	[vim cache/lru_cache.h +82]
  │   │   │   │   ├── ClockCacheShard::Ref	[vim cache/clock_cache.cc +450]
  │   │   │   │   ├── ShardedCache::Ref	[vim cache/sharded_cache.cc +59]
  │   │   │   │   ├── LRUCacheShard::Ref	[vim cache/lru_cache.cc +285]
  │   │   │   │   ├── Ref	[vim env/mock_env.cc +41]
  │   │   │   │   ├── Ref	[vim utilities/simulator_cache/sim_cache.cc +215]
  │   │   │   │   ├── Ref	[vim db/column_family.h +280]
  │   │   │   │   ├── SuperVersion::Ref	[vim db/column_family.cc +429]
  │   │   │   │   ├── MemTableListVersion::Ref	[vim db/memtable_list.cc +71]
  │   │   │   │   ├── Ref	[vim db/memtable.h +118]
  │   │   │   │   └── Version::Ref	[vim db/version_set.cc +3033]
  │   │   │   ├── DBImpl::SwitchMemtable	[vim db/db_impl/db_impl_write.cc +1674]
  │   │   │   │   ├── AssertHeld
  │   │   │   │   ├── DBImpl::WriteRecoverableState	[vim db/db_impl/db_impl_write.cc +1180]
  │   │   │   │   ├── prev_log_number	[vim db/version_set.h +1113]
  │   │   │   │   ├── NewFileNumber	[vim db/version_set.h +1055]
  │   │   │   │   ├── GetLatestMutableCFOptions	[vim db/column_family.h +338]
  │   │   │   │   ├── GetEarliestSequenceNumber
  │   │   │   │   ├── num_entries	[vim db/memtable.h +293]
  │   │   │   │   ├── num_deletes	[vim db/memtable.h +300]
  │   │   │   │   ├── DBImpl::GetWalPreallocateBlockSize	[vim db/db_impl/db_impl_write.cc +1843]
  │   │   │   │   ├── CreateWAL	[OUT-OF-TREE]
  │   │   │   │   ├── ColumnFamilyData::ConstructNewMemtable	[vim db/column_family.cc +1047]
  │   │   │   │   ├── NewSuperVersion	[vim db/job_context.h +47]
  │   │   │   │   ├── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   │   ├── pop_front	[OUT-OF-TREE]
  │   │   │   │   ├── Writer::WriteBuffer	[vim db/log_writer.cc +40]
  │   │   │   │   ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │   │   ├── GetName
  │   │   │   │   ├── c_str	[OUT-OF-TREE]
  │   │   │   │   ├── get_log_number
  │   │   │   │   ├── emplace_back	[OUT-OF-TREE]
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   ├── LogFileNumberSize	[vim db/db_impl/db_impl.h +1294]
  │   │   │   │   ├── release
  │   │   │   │   ├── SetBGError
  │   │   │   │   ├── GetBGError	[vim db/error_handler.h +60]
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── GetFirstSequenceNumber	[vim db/memtable.h +332]
  │   │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   │   ├── SetLogNumber
  │   │   │   │   ├── SetCreationSeq	[vim db/memtable.h +351]
  │   │   │   │   ├── LastSequence	[vim db/version_set.h +1063]
  │   │   │   │   ├── SetNextLogNumber	[vim db/memtable.h +363]
  │   │   │   │   ├── Add
  │   │   │   │   ├── mem
  │   │   │   │   ├── Ref
  │   │   │   │   ├── SetMemtable	[vim db/column_family.h +369]
  │   │   │   │   ├── DBImpl::InstallSuperVersionAndScheduleWork	[vim db/db_impl/db_impl_compaction_flush.cc +3255]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── DBImpl::NotifyOnMemTableSealed	[vim db/db_impl/db_impl_write.cc +1655]
  │   │   │   │   ├── Lock
  │   │   │   │   └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   │   ├── ColumnFamilyData::UnrefAndTryDelete	[vim db/column_family.cc +663]
  │   │   │   │   ├── fetch_sub	[OUT-OF-TREE]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── Lock
  │   │   │   │   ├── Unref
  │   │   │   │   └── Cleanup
  │   │   │   ├── WriteThread::ExitUnbatched	[vim db/write_thread.cc +770]
  │   │   │   │   ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   │   │   └── SetState
  │   │   │   ├── AssignAtomicFlushSeq [+]
  │   │   │   │   ├── AssignAtomicFlushSeq	[vim db/memtable_list.h +356]
  │   │   │   │   └── DBImpl::AssignAtomicFlushSeq	[vim db/db_impl/db_impl_write.cc +1245]
  │   │   │   ├── FlushRequested	[vim db/memtable_list.h +311]
  │   │   │   ├── DBImpl::GenerateFlushRequest	[vim db/db_impl/db_impl_compaction_flush.cc +1683]
  │   │   │   │   ├── GetLatestMemTableID	[vim db/memtable_list.h +348]
  │   │   │   │   └── emplace_back	[OUT-OF-TREE]
  │   │   │   ├── DBImpl::SchedulePendingFlush	[vim db/db_impl/db_impl_compaction_flush.cc +2257]
  │   │   │   │   ├── Ref
  │   │   │   │   ├── SetFlushReason	[vim db/column_family.h +323]
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   └── DBImpl::MaybeScheduleFlushOrCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +2094]
  │   │   │       ├── AssertHeld
  │   │   │       ├── IsRecoveryInProgress	[vim db/error_handler.h +79]
  │   │   │       ├── GetBGJobLimits
  │   │   │       ├── GetBackgroundThreads
  │   │   │       ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │       ├── IsBGWorkStopped	[vim db/error_handler.h +71]
  │   │   │       ├── DBImpl::HasExclusiveManualCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +3173]
  │   │   │       ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │       └── Schedule
  │   │   ├── DBImpl::TrimMemtableHistory	[vim db/db_impl/db_impl_write.cc +1576]
  │   │   │   ├── TakeNextColumnFamily [+]
  │   │   │   │   ├── FlushScheduler::TakeNextColumnFamily	[vim db/flush_scheduler.cc +36]
  │   │   │   │   └── TrimHistoryScheduler::TakeNextColumnFamily	[vim db/trim_history_scheduler.cc +21]
  │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── TrimHistory [+]
  │   │   │   │   ├── MemTableListVersion::TrimHistory	[vim db/memtable_list.cc +312]
  │   │   │   │   └── MemTableList::TrimHistory	[vim db/memtable_list.cc +536]
  │   │   │   ├── mem [+]
  │   │   │   │   └── mem	[vim db/column_family.h +362]
  │   │   │   ├── ApproximateMemoryUsage [+]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim memory/memory_usage.h +15]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim memory/concurrent_arena.h +69]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim memory/arena.h +65]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim util/compression.h +329]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim memtable/skiplistrep.cc +75]
  │   │   │   │   ├── HashLinkListRep::ApproximateMemoryUsage	[vim memtable/hash_linklist_rep.cc +710]
  │   │   │   │   ├── VectorRep::ApproximateMemoryUsage	[vim memtable/vectorrep.cc +127]
  │   │   │   │   ├── HashSkipListRep::ApproximateMemoryUsage	[vim memtable/hash_skiplist_rep.cc +285]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/plain/plain_table_reader.h +109]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/mock_table.cc +54]
  │   │   │   │   ├── CuckooTableReader::ApproximateMemoryUsage	[vim table/cuckoo/cuckoo_table_reader.cc +401]
  │   │   │   │   ├── PartitionedFilterBlockReader::ApproximateMemoryUsage	[vim table/block_based/partitioned_filter_block.cc +403]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/hash_index_reader.h +30]
  │   │   │   │   ├── Block::ApproximateMemoryUsage	[vim table/block_based/block.cc +1036]
  │   │   │   │   ├── UncompressionDictReader::ApproximateMemoryUsage	[vim table/block_based/uncompression_dict_reader.cc +97]
  │   │   │   │   ├── FullFilterBlockReader::ApproximateMemoryUsage	[vim table/block_based/full_filter_block.cc +275]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/binary_search_index_reader.h +33]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/parsed_full_filter_block.h +29]
  │   │   │   │   ├── BlockBasedTable::ApproximateMemoryUsage	[vim table/block_based/block_based_table_reader.cc +1127]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/block.h +106]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/partitioned_index_reader.h +33]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/block_prefix_index.h +28]
  │   │   │   │   ├── BlockBasedFilterBlockReader::ApproximateMemoryUsage	[vim table/block_based/block_based_filter_block.cc +296]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/format.h +285]
  │   │   │   │   ├── MemTableList::ApproximateMemoryUsage	[vim db/memtable_list.cc +553]
  │   │   │   │   └── MemTable::ApproximateMemoryUsage	[vim db/memtable.cc +130]
  │   │   │   ├── NewSuperVersion	[vim db/job_context.h +47]
  │   │   │   │   ├── std::unique_ptr	[OUT-OF-TREE]
  │   │   │   │   └── SuperVersion	[OUT-OF-TREE]
  │   │   │   ├── InstallSuperVersion [+]
  │   │   │   │   ├── ColumnFamilyData::InstallSuperVersion	[vim db/column_family.cc +1244]
  │   │   │   │   └── ColumnFamilyData::InstallSuperVersion	[vim db/column_family.cc +1250]
  │   │   │   ├── ColumnFamilyData::UnrefAndTryDelete	[vim db/column_family.cc +663]
  │   │   │   │   ├── fetch_sub	[OUT-OF-TREE]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── Lock
  │   │   │   │   ├── Unref
  │   │   │   │   └── Cleanup
  │   │   │   └── Status::OK [+]
  │   │   │       ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │   │       │   └── IOStatus
  │   │   │       └── OK	[vim include/rocksdb/status.h +153]
  │   │   │           └── Status
  │   │   ├── Empty [+]
  │   │   │   ├── RowValue::Empty	[vim utilities/cassandra/format.cc +301]
  │   │   │   ├── FlushScheduler::Empty	[vim db/flush_scheduler.cc +67]
  │   │   │   ├── TrimHistoryScheduler::Empty	[vim db/trim_history_scheduler.cc +41]
  │   │   │   ├── Empty	[vim utilities/backupable/backupable_db.cc +245]
  │   │   │   ├── HistogramWindowingImpl::Empty	[vim monitoring/histogram_windowing.cc +50]
  │   │   │   │   └── Empty
  │   │   │   ├── HistogramStat::Empty	[vim monitoring/histogram.cc +81]
  │   │   │   │   └── num
  │   │   │   └── HistogramImpl::Empty	[vim monitoring/histogram.cc +244]
  │   │   │       └── Empty
  │   │   ├── WaitForPendingWrites	[vim db/db_impl/db_impl.h +1549]
  │   │   │   ├── AssertHeld [+]
  │   │   │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │   │       └── AssertHeld
  │   │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │   ├── Unlock [+]
  │   │   │   │   ├── Unlock	[vim env/mock_env.cc +59]
  │   │   │   │   ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │   │   │   │   ├── Unlock	[vim port/win/port_win.h +144]
  │   │   │   │   └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  │   │   │   ├── WriteThread::WaitForMemTableWriters	[vim db/write_thread.cc +783]
  │   │   │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   │   └── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   ├── Lock [+]
  │   │   │   │   ├── Lock	[vim env/mock_env.cc +48]
  │   │   │   │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   │   │   │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   │   │   │   ├── Lock	[vim port/win/port_win.h +137]
  │   │   │   │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  │   │   │   ├── guard	[OUT-OF-TREE]
  │   │   │   └── wait [+]
  │   │   │       ├── wait	[vim util/repeatable_thread.h +83]
  │   │   │       ├── wait	[vim third-party/folly/folly/synchronization/Baton.h +156]
  │   │   │       ├── wait	[vim third-party/folly/folly/synchronization/detail/Sleeper.h +45]
  │   │   │       ├── wait	[vim third-party/folly/folly/synchronization/ParkingLot.h +35]
  │   │   │       └── wait	[vim third-party/folly/folly/synchronization/DistributedMutex-inl.h +1019]
  │   │   ├── DBImpl::ScheduleFlushes	[vim db/db_impl/db_impl_write.cc +1605]
  │   │   │   ├── DBImpl::SelectColumnFamiliesForAtomicFlush	[vim db/db_impl/db_impl_write.cc +1231]
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── IsDropped	[vim db/column_family.h +315]
  │   │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   │   ├── mem
  │   │   │   │   ├── IsEmpty
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── Ref [+]
  │   │   │   │   ├── Ref	[vim cache/lru_cache.h +82]
  │   │   │   │   ├── ClockCacheShard::Ref	[vim cache/clock_cache.cc +450]
  │   │   │   │   ├── ShardedCache::Ref	[vim cache/sharded_cache.cc +59]
  │   │   │   │   ├── LRUCacheShard::Ref	[vim cache/lru_cache.cc +285]
  │   │   │   │   ├── Ref	[vim env/mock_env.cc +41]
  │   │   │   │   ├── Ref	[vim utilities/simulator_cache/sim_cache.cc +215]
  │   │   │   │   ├── Ref	[vim db/column_family.h +280]
  │   │   │   │   ├── SuperVersion::Ref	[vim db/column_family.cc +429]
  │   │   │   │   ├── MemTableListVersion::Ref	[vim db/memtable_list.cc +71]
  │   │   │   │   ├── Ref	[vim db/memtable.h +118]
  │   │   │   │   └── Version::Ref	[vim db/version_set.cc +3033]
  │   │   │   ├── Clear [+]
  │   │   │   │   ├── Clear	[vim util/aligned_buffer.h +115]
  │   │   │   │   ├── OptimisticTransaction::Clear	[vim utilities/transactions/optimistic_transaction.cc +54]
  │   │   │   │   ├── TransactionBaseImpl::Clear	[vim utilities/transactions/transaction_base.cc +47]
  │   │   │   │   ├── PointLockTracker::Clear	[vim utilities/transactions/lock/point/point_lock_tracker.cc +264]
  │   │   │   │   ├── PessimisticTransaction::Clear	[vim utilities/transactions/pessimistic_transaction.cc +106]
  │   │   │   │   ├── WriteUnpreparedTxn::Clear	[vim utilities/transactions/write_unprepared_txn.cc +813]
  │   │   │   │   ├── WriteBatchWithIndex::Rep::Clear	[vim utilities/write_batch_with_index/write_batch_with_index.cc +551]
  │   │   │   │   ├── WriteBatchWithIndex::Clear	[vim utilities/write_batch_with_index/write_batch_with_index.cc +762]
  │   │   │   │   ├── BlockCacheTierMetadata::Clear	[vim utilities/persistent_cache/block_cache_tier_metadata.cc +34]
  │   │   │   │   ├── Clear	[vim utilities/persistent_cache/hash_table.h +157]
  │   │   │   │   ├── Clear	[vim utilities/persistent_cache/hash_table_evictable.h +111]
  │   │   │   │   ├── Clear	[vim table/block_based/block_based_table_builder.cc +537]
  │   │   │   │   ├── Clear	[vim db/dbformat.h +316]
  │   │   │   │   ├── Clear	[vim db/dbformat.h +422]
  │   │   │   │   ├── WriteBatch::Clear	[vim db/write_batch.cc +322]
  │   │   │   │   ├── FlushScheduler::Clear	[vim db/flush_scheduler.cc +78]
  │   │   │   │   ├── Clear	[vim db/internal_stats.h +262]
  │   │   │   │   ├── Clear	[vim db/internal_stats.h +324]
  │   │   │   │   ├── Clear	[vim db/internal_stats.h +464]
  │   │   │   │   ├── Clear	[vim db/internal_stats.h +509]
  │   │   │   │   ├── VersionEdit::Clear	[vim db/version_edit.cc +69]
  │   │   │   │   ├── TrimHistoryScheduler::Clear	[vim db/trim_history_scheduler.cc +46]
  │   │   │   │   ├── AtomicGroupReadBuffer::Clear	[vim db/version_set.cc +3740]
  │   │   │   │   ├── Clear	[vim db/merge_context.h +24]
  │   │   │   │   ├── HistogramWindowingImpl::Clear	[vim monitoring/histogram_windowing.cc +39]
  │   │   │   │   ├── HistogramStat::Clear	[vim monitoring/histogram.cc +70]
  │   │   │   │   └── HistogramImpl::Clear	[vim monitoring/histogram.cc +239]
  │   │   │   ├── TakeNextColumnFamily [+]
  │   │   │   │   ├── FlushScheduler::TakeNextColumnFamily	[vim db/flush_scheduler.cc +36]
  │   │   │   │   └── TrimHistoryScheduler::TakeNextColumnFamily	[vim db/trim_history_scheduler.cc +21]
  │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── DBImpl::MaybeFlushStatsCF	[vim db/db_impl/db_impl_write.cc +1542]
  │   │   │   │   ├── GetColumnFamily
  │   │   │   │   ├── mem
  │   │   │   │   ├── IsEmpty
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── GetLogNumber
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   └── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   ├── WriteThread::EnterUnbatched	[vim db/write_thread.cc +755]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │   │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   │   ├── WriteThread::WaitForMemTableWriters	[vim db/write_thread.cc +783]
  │   │   │   │   └── Lock
  │   │   │   ├── mem [+]
  │   │   │   │   └── mem	[vim db/column_family.h +362]
  │   │   │   ├── IsEmpty [+]
  │   │   │   │   ├── IsEmpty	[vim cache/cache_helpers.h +81]
  │   │   │   │   ├── IsEmpty	[vim utilities/persistent_cache/lrulist.h +106]
  │   │   │   │   ├── IsEmpty	[vim table/block_based/cachable_entry.h +102]
  │   │   │   │   ├── BlockBasedTableBuilder::IsEmpty	[vim table/block_based/block_based_table_builder.cc +1775]
  │   │   │   │   ├── IsEmpty	[vim table/table_builder.h +176]
  │   │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +322]
  │   │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +385]
  │   │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +418]
  │   │   │   │   ├── IsEmpty	[vim db/wal_edit.h +107]
  │   │   │   │   ├── IsEmpty	[vim db/version_builder.cc +91]
  │   │   │   │   ├── IsEmpty	[vim db/memtable.h +326]
  │   │   │   │   ├── AtomicGroupReadBuffer::IsEmpty	[vim db/version_set.cc +3738]
  │   │   │   │   └── IsEmpty	[vim logging/log_buffer.h +29]
  │   │   │   ├── DBImpl::SwitchMemtable	[vim db/db_impl/db_impl_write.cc +1674]
  │   │   │   │   ├── AssertHeld
  │   │   │   │   ├── DBImpl::WriteRecoverableState	[vim db/db_impl/db_impl_write.cc +1180]
  │   │   │   │   ├── prev_log_number	[vim db/version_set.h +1113]
  │   │   │   │   ├── NewFileNumber	[vim db/version_set.h +1055]
  │   │   │   │   ├── GetLatestMutableCFOptions	[vim db/column_family.h +338]
  │   │   │   │   ├── GetEarliestSequenceNumber
  │   │   │   │   ├── num_entries	[vim db/memtable.h +293]
  │   │   │   │   ├── num_deletes	[vim db/memtable.h +300]
  │   │   │   │   ├── DBImpl::GetWalPreallocateBlockSize	[vim db/db_impl/db_impl_write.cc +1843]
  │   │   │   │   ├── CreateWAL	[OUT-OF-TREE]
  │   │   │   │   ├── ColumnFamilyData::ConstructNewMemtable	[vim db/column_family.cc +1047]
  │   │   │   │   ├── NewSuperVersion	[vim db/job_context.h +47]
  │   │   │   │   ├── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   │   ├── pop_front	[OUT-OF-TREE]
  │   │   │   │   ├── Writer::WriteBuffer	[vim db/log_writer.cc +40]
  │   │   │   │   ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │   │   ├── GetName
  │   │   │   │   ├── c_str	[OUT-OF-TREE]
  │   │   │   │   ├── get_log_number
  │   │   │   │   ├── emplace_back	[OUT-OF-TREE]
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   ├── LogFileNumberSize	[vim db/db_impl/db_impl.h +1294]
  │   │   │   │   ├── release
  │   │   │   │   ├── SetBGError
  │   │   │   │   ├── GetBGError	[vim db/error_handler.h +60]
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── GetFirstSequenceNumber	[vim db/memtable.h +332]
  │   │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   │   ├── SetLogNumber
  │   │   │   │   ├── SetCreationSeq	[vim db/memtable.h +351]
  │   │   │   │   ├── LastSequence	[vim db/version_set.h +1063]
  │   │   │   │   ├── SetNextLogNumber	[vim db/memtable.h +363]
  │   │   │   │   ├── Add
  │   │   │   │   ├── mem
  │   │   │   │   ├── Ref
  │   │   │   │   ├── SetMemtable	[vim db/column_family.h +369]
  │   │   │   │   ├── DBImpl::InstallSuperVersionAndScheduleWork	[vim db/db_impl/db_impl_compaction_flush.cc +3255]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── DBImpl::NotifyOnMemTableSealed	[vim db/db_impl/db_impl_write.cc +1655]
  │   │   │   │   ├── Lock
  │   │   │   │   └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   │   ├── ColumnFamilyData::UnrefAndTryDelete	[vim db/column_family.cc +663]
  │   │   │   │   ├── fetch_sub	[OUT-OF-TREE]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── Lock
  │   │   │   │   ├── Unref
  │   │   │   │   └── Cleanup
  │   │   │   ├── WriteThread::ExitUnbatched	[vim db/write_thread.cc +770]
  │   │   │   │   ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   │   │   └── SetState
  │   │   │   ├── AssignAtomicFlushSeq [+]
  │   │   │   │   ├── AssignAtomicFlushSeq	[vim db/memtable_list.h +356]
  │   │   │   │   └── DBImpl::AssignAtomicFlushSeq	[vim db/db_impl/db_impl_write.cc +1245]
  │   │   │   ├── DBImpl::GenerateFlushRequest	[vim db/db_impl/db_impl_compaction_flush.cc +1683]
  │   │   │   │   ├── GetLatestMemTableID	[vim db/memtable_list.h +348]
  │   │   │   │   └── emplace_back	[OUT-OF-TREE]
  │   │   │   ├── DBImpl::SchedulePendingFlush	[vim db/db_impl/db_impl_compaction_flush.cc +2257]
  │   │   │   │   ├── Ref
  │   │   │   │   ├── SetFlushReason	[vim db/column_family.h +323]
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   └── DBImpl::MaybeScheduleFlushOrCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +2094]
  │   │   │       ├── AssertHeld
  │   │   │       ├── IsRecoveryInProgress	[vim db/error_handler.h +79]
  │   │   │       ├── GetBGJobLimits
  │   │   │       ├── GetBackgroundThreads
  │   │   │       ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │       ├── IsBGWorkStopped	[vim db/error_handler.h +71]
  │   │   │       ├── DBImpl::HasExclusiveManualCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +3173]
  │   │   │       ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │       └── Schedule
  │   │   ├── WriteController::IsStopped	[vim db/write_controller.cc +37]
  │   │   ├── NeedsDelay	[vim db/write_controller.h +53]
  │   │   ├── PERF_TIMER_STOP	[OUT-OF-TREE]
  │   │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │   ├── DBImpl::DelayWrite	[vim db/db_impl/db_impl_write.cc +1436]
  │   │   │   ├── GetDelay [+]
  │   │   │   │   ├── GetDelay	[vim util/stop_watch.h +71]
  │   │   │   │   └── WriteController::GetDelay	[vim db/write_controller.cc +45]
  │   │   │   ├── Unlock [+]
  │   │   │   │   ├── Unlock	[vim env/mock_env.cc +59]
  │   │   │   │   ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │   │   │   │   ├── Unlock	[vim port/win/port_win.h +144]
  │   │   │   │   └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  │   │   │   ├── start_time	[vim util/stop_watch.h +73]
  │   │   │   ├── NeedsDelay	[vim db/write_controller.h +53]
  │   │   │   ├── NowMicros [+]
  │   │   │   │   ├── NowMicros	[vim include/rocksdb/env.h +1357]
  │   │   │   │   ├── NowMicros	[vim env/composite_env_wrapper.h +530]
  │   │   │   │   ├── NowMicros	[vim env/env_posix.cc +240]
  │   │   │   │   ├── MockEnv::NowMicros	[vim env/mock_env.cc +1039]
  │   │   │   │   ├── NowMicros	[vim hdfs/env_hdfs.h +130]
  │   │   │   │   └── WinEnv::NowMicros	[vim port/win/env_win.cc +1449]
  │   │   │   ├── SleepForMicroseconds [+]
  │   │   │   │   ├── SleepForMicroseconds	[vim include/rocksdb/env.h +1361]
  │   │   │   │   ├── SleepForMicroseconds	[vim env/composite_env_wrapper.h +534]
  │   │   │   │   ├── SleepForMicroseconds	[vim env/env_posix.cc +277]
  │   │   │   │   ├── SleepForMicroseconds	[vim hdfs/env_hdfs.h +132]
  │   │   │   │   ├── WinEnvThreads::SleepForMicroseconds	[vim port/win/env_win.cc +1285]
  │   │   │   │   └── WinEnv::SleepForMicroseconds	[vim port/win/env_win.cc +1500]
  │   │   │   ├── Lock [+]
  │   │   │   │   ├── Lock	[vim env/mock_env.cc +48]
  │   │   │   │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   │   │   │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   │   │   │   ├── Lock	[vim port/win/port_win.h +137]
  │   │   │   │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  │   │   │   ├── WriteThread::BeginWriteStall	[vim db/write_thread.cc +334]
  │   │   │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   │   ├── Status::Incomplete
  │   │   │   │   └── SetState
  │   │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │   ├── Wait [+]
  │   │   │   │   ├── TransactionDBCondVarImpl::Wait	[vim utilities/transactions/transaction_db_mutex_impl.cc +93]
  │   │   │   │   ├── CondVar::Wait	[vim port/port_posix.cc +103]
  │   │   │   │   ├── CondVar::Wait	[vim port/win/port_win.cc +71]
  │   │   │   │   └── InstrumentedCondVar::Wait	[vim monitoring/instrumented_mutex.cc +39]
  │   │   │   ├── WriteThread::EndWriteStall	[vim db/write_thread.cc +364]
  │   │   │   │   ├── exchange
  │   │   │   │   └── SignalAll
  │   │   │   ├── AddDBStats	[vim db/internal_stats.h +360]
  │   │   │   │   └── fetch_add	[OUT-OF-TREE]
  │   │   │   ├── RecordTick	[vim monitoring/statistics.h +124]
  │   │   │   │   └── StatisticsImpl::recordTick	[vim monitoring/statistics.cc +334]
  │   │   │   ├── WriteController::IsStopped	[vim db/write_controller.cc +37]
  │   │   │   ├── Status::Incomplete [+]
  │   │   │   │   ├── Incomplete	[vim include/rocksdb/status.h +207]
  │   │   │   │   │   ├── Slice [+]
  │   │   │   │   │   │   ├── Slice::Slice	[vim util/slice.cc +142]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +38]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +41]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +45]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +50]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   └── Slice	[vim include/rocksdb/slice.h +55]
  │   │   │   │   │   │       ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │       └── strlen	[OUT-OF-TREE]
  │   │   │   │   │   └── Status [+]
  │   │   │   │   │       ├── Status::Status	[vim util/status.cc +60]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── sev_	[OUT-OF-TREE]
  │   │   │   │   │       ├── Status	[vim include/rocksdb/status.h +37]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── state_	[OUT-OF-TREE]
  │   │   │   │   │       ├── Status	[vim include/rocksdb/status.h +519]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── state_	[OUT-OF-TREE]
  │   │   │   │   │       ├── Status	[vim include/rocksdb/status.h +523]
  │   │   │   │   │       │   └── Status
  │   │   │   │   │       ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │   │       ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │   │       └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │   │   │   │           ├── Status
  │   │   │   │   │           └── std::move	[OUT-OF-TREE]
  │   │   │   │   └── Incomplete	[vim include/rocksdb/status.h +210]
  │   │   │   │       └── Status [+]
  │   │   │   │           ├── Status::Status	[vim util/status.cc +60]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   └── sev_	[OUT-OF-TREE]
  │   │   │   │           ├── Status	[vim include/rocksdb/status.h +37]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── state_	[OUT-OF-TREE]
  │   │   │   │           ├── Status	[vim include/rocksdb/status.h +519]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── state_	[OUT-OF-TREE]
  │   │   │   │           ├── Status	[vim include/rocksdb/status.h +523]
  │   │   │   │           │   └── Status
  │   │   │   │           ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │           ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │           └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │   │   │               ├── Status
  │   │   │   │               └── std::move	[OUT-OF-TREE]
  │   │   │   ├── ToString [+]
  │   │   │   │   ├── Configurable::ToString	[vim options/configurable.cc +458]
  │   │   │   │   │   └── SerializeOptions
  │   │   │   │   ├── Status::ToString	[vim util/status.cc +79]
  │   │   │   │   │   ├── code
  │   │   │   │   │   └── result	[OUT-OF-TREE]
  │   │   │   │   ├── ToString	[vim util/string_util.h +23]
  │   │   │   │   │   └── std::to_string	[OUT-OF-TREE]
  │   │   │   │   ├── Slice::ToString	[vim util/slice.cc +157]
  │   │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   │   └── toHex	[vim util/slice.cc +120]
  │   │   │   │   ├── ToString	[vim include/rocksdb/configurable.h +180]
  │   │   │   │   │   └── ToString
  │   │   │   │   ├── ToString	[vim include/rocksdb/table_properties.h +146]
  │   │   │   │   │   └── Name
  │   │   │   │   ├── ToString	[vim include/rocksdb/utilities/ldb_cmd_execute_result.h +27]
  │   │   │   │   ├── ToString	[vim include/rocksdb/statistics.h +564]
  │   │   │   │   │   └── std::string	[OUT-OF-TREE]
  │   │   │   │   ├── ToString	[vim include/rocksdb/file_system.h +132]
  │   │   │   │   │   └── str	[OUT-OF-TREE]
  │   │   │   │   ├── ToString	[vim utilities/simulator_cache/sim_cache.cc +287]
  │   │   │   │   │   ├── std::to_string	[OUT-OF-TREE]
  │   │   │   │   │   ├── get_miss_counter	[vim utilities/simulator_cache/sim_cache.cc +272]
  │   │   │   │   │   └── get_hit_counter	[vim utilities/simulator_cache/sim_cache.cc +276]
  │   │   │   │   ├── CompactOnDeletionCollectorFactory::ToString	[vim utilities/table_properties_collectors/compact_on_deletion_collector.cc +105]
  │   │   │   │   │   ├── Name
  │   │   │   │   │   └── str	[OUT-OF-TREE]
  │   │   │   │   ├── PersistentCacheConfig::ToString	[vim utilities/persistent_cache/persistent_cache_tier.cc +16]
  │   │   │   │   │   └── c_str	[OUT-OF-TREE]
  │   │   │   │   ├── ToString	[vim table/block_based/filter_block.h +151]
  │   │   │   │   │   └── error_msg	[OUT-OF-TREE]
  │   │   │   │   ├── BlockBasedFilterBlockReader::ToString	[vim table/block_based/block_based_filter_block.cc +306]
  │   │   │   │   │   ├── FilterBlockReaderCommon::GetOrReadFilterBlock	[vim table/block_based/filter_block_reader_common.cc +66]
  │   │   │   │   │   ├── BlockBasedFilterBlockReader::ParseFieldsFromBlock	[vim table/block_based/block_based_filter_block.cc +221]
  │   │   │   │   │   ├── GetValue
  │   │   │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │   │   │   │   ├── s_bo	[OUT-OF-TREE]
  │   │   │   │   │   ├── s_hd	[OUT-OF-TREE]
  │   │   │   │   │   ├── s_fb	[OUT-OF-TREE]
  │   │   │   │   │   ├── DecodeFixed32	[vim util/coding_lean.h +74]
  │   │   │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │   │   │   │   ├── Slice
  │   │   │   │   │   ├── AppendItem
  │   │   │   │   │   └── ToString
  │   │   │   │   ├── TableProperties::ToString	[vim table/table_properties.cc +72]
  │   │   │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │   │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │   │   │   │   └── AppendProperty
  │   │   │   │   ├── BlockHandle::ToString	[vim table/format.cc +82]
  │   │   │   │   │   ├── EncodeTo
  │   │   │   │   │   ├── Slice
  │   │   │   │   │   └── ToString
  │   │   │   │   ├── IndexValue::ToString	[vim table/format.cc +136]
  │   │   │   │   │   ├── EncodeTo
  │   │   │   │   │   ├── Slice
  │   │   │   │   │   └── ToString
  │   │   │   │   ├── Footer::ToString	[vim table/format.cc +262]
  │   │   │   │   │   ├── IsLegacyFooterFormat	[vim table/format.cc +147]
  │   │   │   │   │   ├── ToString
  │   │   │   │   │   └── ROCKSDB_NAMESPACE::ToString
  │   │   │   │   ├── BackupStatistics::ToString	[vim utilities/backupable/backupable_db.cc +81]
  │   │   │   │   │   ├── BackupStatistics::GetNumberSuccessBackup	[vim utilities/backupable/backupable_db.cc +74]
  │   │   │   │   │   └── BackupStatistics::GetNumberFailBackup	[vim utilities/backupable/backupable_db.cc +77]
  │   │   │   │   ├── HistogramWindowingImpl::ToString	[vim monitoring/histogram_windowing.cc +98]
  │   │   │   │   │   └── ToString
  │   │   │   │   ├── PerfContext::ToString	[vim monitoring/perf_context.cc +450]
  │   │   │   │   ├── IOStatsContext::ToString	[vim monitoring/iostats_context.cc +43]
  │   │   │   │   │   ├── IOSTATS_CONTEXT_OUTPUT	[OUT-OF-TREE]
  │   │   │   │   │   ├── str	[OUT-OF-TREE]
  │   │   │   │   │   └── find_last_not_of	[OUT-OF-TREE]
  │   │   │   │   ├── HistogramStat::ToString	[vim monitoring/histogram.cc +182]
  │   │   │   │   │   ├── num
  │   │   │   │   │   ├── Average
  │   │   │   │   │   ├── StandardDeviation
  │   │   │   │   │   ├── min
  │   │   │   │   │   ├── Median
  │   │   │   │   │   ├── max
  │   │   │   │   │   ├── Percentile
  │   │   │   │   │   ├── bucket_at	[vim monitoring/histogram.h +73]
  │   │   │   │   │   ├── BucketLimit	[vim monitoring/histogram.h +42]
  │   │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   ├── HistogramImpl::ToString	[vim monitoring/histogram.cc +279]
  │   │   │   │   │   └── ToString
  │   │   │   │   └── StatisticsImpl::ToString	[vim monitoring/statistics.cc +380]
  │   │   │   │       ├── StatisticsImpl::getTickerCountLocked	[vim monitoring/statistics.cc +265]
  │   │   │   │       ├── StatisticsImpl::getHistogramImplLocked	[vim monitoring/statistics.cc +280]
  │   │   │   │       ├── Data
  │   │   │   │       ├── c_str	[OUT-OF-TREE]
  │   │   │   │       └── shrink_to_fit	[OUT-OF-TREE]
  │   │   │   ├── IsDBStopped	[vim db/error_handler.h +66]
  │   │   │   │   └── severity [+]
  │   │   │   │       └── severity	[vim include/rocksdb/status.h +137]
  │   │   │   └── GetBGError	[vim db/error_handler.h +60]
  │   │   ├── PERF_TIMER_START	[OUT-OF-TREE]
  │   │   └── Wait [+]
  │   │       ├── TransactionDBCondVarImpl::Wait	[vim utilities/transactions/transaction_db_mutex_impl.cc +93]
  │   │       ├── CondVar::Wait	[vim port/port_posix.cc +103]
  │   │       ├── CondVar::Wait	[vim port/win/port_win.cc +71]
  │   │       └── InstrumentedCondVar::Wait	[vim monitoring/instrumented_mutex.cc +39]
  │   ├── DBImpl::WriteStatusCheckOnLocked	[vim db/db_impl/db_impl_write.cc +845]
  │   │   ├── IsIOFenced	[vim include/rocksdb/status.h +494]
  │   │   │   ├── code [+]
  │   │   │   │   └── code	[vim include/rocksdb/status.h +94]
  │   │   │   └── subcode [+]
  │   │   │       └── subcode	[vim include/rocksdb/status.h +120]
  │   │   ├── GetBGError	[vim db/error_handler.h +60]
  │   │   ├── AssertHeld [+]
  │   │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │       └── AssertHeld
  │   │   ├── IsBusy	[vim include/rocksdb/status.h +394]
  │   │   │   └── code [+]
  │   │   │       └── code	[vim include/rocksdb/status.h +94]
  │   │   ├── IsIncomplete	[vim include/rocksdb/status.h +356]
  │   │   │   └── code [+]
  │   │   │       └── code	[vim include/rocksdb/status.h +94]
  │   │   ├── SetBGError [+]
  │   │   │   ├── ErrorHandler::SetBGError	[vim db/error_handler.cc +247]
  │   │   │   │   ├── AssertHeld
  │   │   │   │   ├── Status::OK
  │   │   │   │   ├── subcode
  │   │   │   │   ├── code
  │   │   │   │   ├── std::make_tuple	[OUT-OF-TREE]
  │   │   │   │   ├── Status
  │   │   │   │   ├── ErrorHandler::OverrideNoSpaceError	[vim db/error_handler.cc +413]
  │   │   │   │   ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │   │   │   ├── severity
  │   │   │   │   ├── Status::NoSpace
  │   │   │   │   └── ErrorHandler::RecoverFromNoSpace	[vim db/error_handler.cc +450]
  │   │   │   └── ErrorHandler::SetBGError	[vim db/error_handler.cc +327]
  │   │   │       ├── AssertHeld
  │   │   │       ├── Status::OK
  │   │   │       ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │       ├── ToString
  │   │   │       ├── c_str	[OUT-OF-TREE]
  │   │   │       ├── DBImpl::DisableFileDeletionsWithLock	[vim db/db_impl/db_impl_files.cc +44]
  │   │   │       ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   │       ├── GetDataLoss	[vim include/rocksdb/io_status.h +63]
  │   │   │       ├── GetRetryable	[vim include/rocksdb/io_status.h +62]
  │   │   │       ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │   │       ├── bg_err	[OUT-OF-TREE]
  │   │   │       ├── severity
  │   │   │       ├── ErrorHandler::StartRecoverFromRetryableBGIOError	[vim db/error_handler.cc +540]
  │   │   │       └── SetBGError
  │   │   └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   ├── WriteThread::EnterAsBatchGroupLeader	[vim db/write_thread.cc +413]
  │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   ├── AllowWriteBatching	[vim utilities/transactions/optimistic_transaction.h +93]
  │   │   ├── ByteSize	[vim db/write_batch_internal.h +138]
  │   │   └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   ├── CheckCallback [+]
  │   │   ├── CheckCallback	[vim table/get_context.h +157]
  │   │   │   └── IsVisible [+]
  │   │   │       ├── IsVisible	[vim db/read_callback.h +25]
  │   │   │       └── DBIter::IsVisible	[vim db/db_iter.cc +1181]
  │   │   ├── CheckCallback	[vim db/write_thread.h +186]
  │   │   │   └── Callback [+]
  │   │   │       ├── Callback	[vim utilities/transactions/optimistic_transaction.h +89]
  │   │   │       ├── Callback	[vim utilities/transactions/write_unprepared_txn_db.h +58]
  │   │   │       ├── Callback	[vim utilities/transactions/write_prepared_txn_db.h +859]
  │   │   │       ├── Callback	[vim utilities/transactions/write_prepared_txn_db.h +923]
  │   │   │       └── Callback	[vim utilities/transactions/write_prepared_txn_db.h +1015]
  │   │   └── CheckCallback	[vim db/memtable.cc +630]
  │   │       └── IsVisible [+]
  │   │           ├── IsVisible	[vim db/read_callback.h +25]
  │   │           └── DBIter::IsVisible	[vim db/db_iter.cc +1181]
  │   ├── WriteBatchInternal::AppendedByteSize	[vim db/write_batch.cc +2128]
  │   ├── WriteBatchInternal::ByteSize [+]
  │   │   └── ByteSize	[vim db/write_batch_internal.h +138]
  │   ├── AddDBStats	[vim db/internal_stats.h +360]
  │   │   └── fetch_add	[OUT-OF-TREE]
  │   ├── RecordTick	[vim monitoring/statistics.h +124]
  │   │   └── StatisticsImpl::recordTick	[vim monitoring/statistics.cc +334]
  │   ├── RecordInHistogram	[vim monitoring/statistics.h +110]
  │   │   └── recordInHistogram [+]
  │   │       ├── recordInHistogram	[vim include/rocksdb/statistics.h +552]
  │   │       │   └── measureTime
  │   │       └── StatisticsImpl::recordInHistogram	[vim monitoring/statistics.cc +349]
  │   │           ├── get_stats_level	[vim include/rocksdb/statistics.h +581]
  │   │           ├── Access
  │   │           ├── Add
  │   │           └── recordInHistogram
  │   ├── PERF_TIMER_STOP	[OUT-OF-TREE]
  │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   ├── DBImpl::ConcurrentWriteToWAL	[vim db/db_impl/db_impl_write.cc +1131]
  │   │   ├── DBImpl::MergeBatch	[vim db/db_impl/db_impl_write.cc +985]
  │   │   │   ├── GetWalTerminationPoint	[vim include/rocksdb/write_batch.h +337]
  │   │   │   ├── is_cleared	[vim include/rocksdb/write_batch.h +58]
  │   │   │   ├── CallbackFailed	[vim db/write_thread.h +224]
  │   │   │   ├── WriteBatchInternal::Append	[vim db/write_batch.cc +2101]
  │   │   │   │   ├── GetWalTerminationPoint	[vim include/rocksdb/write_batch.h +337]
  │   │   │   │   ├── is_cleared	[vim include/rocksdb/write_batch.h +58]
  │   │   │   │   ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │   │   │   ├── Count
  │   │   │   │   └── Status::OK
  │   │   │   └── WriteBatchInternal::IsLatestPersistentState	[vim db/write_batch.cc +735]
  │   │   ├── Lock [+]
  │   │   │   ├── Lock	[vim env/mock_env.cc +48]
  │   │   │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   │   │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   │   │   ├── Lock	[vim port/win/port_win.h +137]
  │   │   │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  │   │   ├── FetchAddLastAllocatedSequence	[vim db/version_set.h +1098]
  │   │   │   └── fetch_add	[OUT-OF-TREE]
  │   │   ├── WriteBatchInternal::SetSequence	[vim db/write_batch.cc +755]
  │   │   │   └── EncodeFixed64	[vim util/coding_lean.h +44]
  │   │   ├── WriteToWAL [+]
  │   │   │   ├── DBImpl::WriteToWAL	[vim db/db_impl/db_impl_write.cc +1029]
  │   │   │   │   ├── WriteBatchInternal::Contents
  │   │   │   │   ├── Lock
  │   │   │   │   ├── AddRecord
  │   │   │   │   ├── Unlock
  │   │   │   │   └── AddSize	[vim db/db_impl/db_impl.h +1295]
  │   │   │   └── DBImpl::WriteToWAL	[vim db/db_impl/db_impl_write.cc +1062]
  │   │   │       ├── DBImpl::MergeBatch	[vim db/db_impl/db_impl_write.cc +985]
  │   │   │       ├── WriteBatchInternal::SetSequence	[vim db/write_batch.cc +755]
  │   │   │       ├── WriteToWAL
  │   │   │       ├── file
  │   │   │       ├── Sync
  │   │   │       ├── GetWalDir	[vim db/db_impl/db_impl.h +104]
  │   │   │       ├── Fsync
  │   │   │       ├── IOOptions	[vim include/rocksdb/file_system.h +89]
  │   │   │       ├── Clear
  │   │   │       ├── AddDBStats	[vim db/internal_stats.h +360]
  │   │   │       └── RecordTick	[vim monitoring/statistics.h +124]
  │   │   ├── Unlock [+]
  │   │   │   ├── Unlock	[vim env/mock_env.cc +59]
  │   │   │   ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │   │   │   ├── Unlock	[vim port/win/port_win.h +144]
  │   │   │   └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  │   │   ├── AddDBStats	[vim db/internal_stats.h +360]
  │   │   │   └── fetch_add	[OUT-OF-TREE]
  │   │   └── RecordTick	[vim monitoring/statistics.h +124]
  │   │       └── StatisticsImpl::recordTick	[vim monitoring/statistics.cc +334]
  │   ├── FetchAddLastAllocatedSequence	[vim db/version_set.h +1098]
  │   │   └── fetch_add	[OUT-OF-TREE]
  │   ├── FlushWAL [+]
  │   │   ├── FlushWAL	[vim include/rocksdb/db.h +1239]
  │   │   │   └── Status::NotSupported [+]
  │   │   │       ├── NotSupported	[vim include/rocksdb/io_status.h +69]
  │   │   │       │   ├── Slice
  │   │   │       │   └── IOStatus
  │   │   │       ├── NotSupported	[vim include/rocksdb/io_status.h +72]
  │   │   │       │   └── IOStatus
  │   │   │       ├── NotSupported	[vim include/rocksdb/status.h +181]
  │   │   │       │   ├── Slice
  │   │   │       │   └── Status
  │   │   │       └── NotSupported	[vim include/rocksdb/status.h +184]
  │   │   │           └── Status
  │   │   ├── FlushWAL	[vim include/rocksdb/utilities/stackable_db.h +334]
  │   │   │   └── FlushWAL
  │   │   └── DBImpl::FlushWAL	[vim db/db_impl/db_impl.cc +1191]
  │   │       ├── Writer::WriteBuffer	[vim db/log_writer.cc +40]
  │   │       │   └── Flush
  │   │       ├── ROCKS_LOG_ERROR	[OUT-OF-TREE]
  │   │       ├── ToString [+]
  │   │       │   ├── Configurable::ToString	[vim options/configurable.cc +458]
  │   │       │   │   └── SerializeOptions
  │   │       │   ├── Status::ToString	[vim util/status.cc +79]
  │   │       │   │   ├── code
  │   │       │   │   └── result	[OUT-OF-TREE]
  │   │       │   ├── ToString	[vim util/string_util.h +23]
  │   │       │   │   └── std::to_string	[OUT-OF-TREE]
  │   │       │   ├── Slice::ToString	[vim util/slice.cc +157]
  │   │       │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   │   └── toHex	[vim util/slice.cc +120]
  │   │       │   ├── ToString	[vim include/rocksdb/configurable.h +180]
  │   │       │   │   └── ToString
  │   │       │   ├── ToString	[vim include/rocksdb/table_properties.h +146]
  │   │       │   │   └── Name
  │   │       │   ├── ToString	[vim include/rocksdb/utilities/ldb_cmd_execute_result.h +27]
  │   │       │   ├── ToString	[vim include/rocksdb/statistics.h +564]
  │   │       │   │   └── std::string	[OUT-OF-TREE]
  │   │       │   ├── ToString	[vim include/rocksdb/file_system.h +132]
  │   │       │   │   └── str	[OUT-OF-TREE]
  │   │       │   ├── ToString	[vim utilities/simulator_cache/sim_cache.cc +287]
  │   │       │   │   ├── std::to_string	[OUT-OF-TREE]
  │   │       │   │   ├── get_miss_counter	[vim utilities/simulator_cache/sim_cache.cc +272]
  │   │       │   │   └── get_hit_counter	[vim utilities/simulator_cache/sim_cache.cc +276]
  │   │       │   ├── CompactOnDeletionCollectorFactory::ToString	[vim utilities/table_properties_collectors/compact_on_deletion_collector.cc +105]
  │   │       │   │   ├── Name
  │   │       │   │   └── str	[OUT-OF-TREE]
  │   │       │   ├── PersistentCacheConfig::ToString	[vim utilities/persistent_cache/persistent_cache_tier.cc +16]
  │   │       │   │   └── c_str	[OUT-OF-TREE]
  │   │       │   ├── ToString	[vim table/block_based/filter_block.h +151]
  │   │       │   │   └── error_msg	[OUT-OF-TREE]
  │   │       │   ├── BlockBasedFilterBlockReader::ToString	[vim table/block_based/block_based_filter_block.cc +306]
  │   │       │   │   ├── FilterBlockReaderCommon::GetOrReadFilterBlock	[vim table/block_based/filter_block_reader_common.cc +66]
  │   │       │   │   ├── BlockBasedFilterBlockReader::ParseFieldsFromBlock	[vim table/block_based/block_based_filter_block.cc +221]
  │   │       │   │   ├── GetValue
  │   │       │   │   ├── std::string	[OUT-OF-TREE]
  │   │       │   │   ├── s_bo	[OUT-OF-TREE]
  │   │       │   │   ├── s_hd	[OUT-OF-TREE]
  │   │       │   │   ├── s_fb	[OUT-OF-TREE]
  │   │       │   │   ├── DecodeFixed32	[vim util/coding_lean.h +74]
  │   │       │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │       │   │   ├── Slice
  │   │       │   │   ├── AppendItem
  │   │       │   │   └── ToString
  │   │       │   ├── TableProperties::ToString	[vim table/table_properties.cc +72]
  │   │       │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │       │   │   ├── std::string	[OUT-OF-TREE]
  │   │       │   │   └── AppendProperty
  │   │       │   ├── BlockHandle::ToString	[vim table/format.cc +82]
  │   │       │   │   ├── EncodeTo
  │   │       │   │   ├── Slice
  │   │       │   │   └── ToString
  │   │       │   ├── IndexValue::ToString	[vim table/format.cc +136]
  │   │       │   │   ├── EncodeTo
  │   │       │   │   ├── Slice
  │   │       │   │   └── ToString
  │   │       │   ├── Footer::ToString	[vim table/format.cc +262]
  │   │       │   │   ├── IsLegacyFooterFormat	[vim table/format.cc +147]
  │   │       │   │   ├── ToString
  │   │       │   │   └── ROCKSDB_NAMESPACE::ToString
  │   │       │   ├── BackupStatistics::ToString	[vim utilities/backupable/backupable_db.cc +81]
  │   │       │   │   ├── BackupStatistics::GetNumberSuccessBackup	[vim utilities/backupable/backupable_db.cc +74]
  │   │       │   │   └── BackupStatistics::GetNumberFailBackup	[vim utilities/backupable/backupable_db.cc +77]
  │   │       │   ├── HistogramWindowingImpl::ToString	[vim monitoring/histogram_windowing.cc +98]
  │   │       │   │   └── ToString
  │   │       │   ├── PerfContext::ToString	[vim monitoring/perf_context.cc +450]
  │   │       │   ├── IOStatsContext::ToString	[vim monitoring/iostats_context.cc +43]
  │   │       │   │   ├── IOSTATS_CONTEXT_OUTPUT	[OUT-OF-TREE]
  │   │       │   │   ├── str	[OUT-OF-TREE]
  │   │       │   │   └── find_last_not_of	[OUT-OF-TREE]
  │   │       │   ├── HistogramStat::ToString	[vim monitoring/histogram.cc +182]
  │   │       │   │   ├── num
  │   │       │   │   ├── Average
  │   │       │   │   ├── StandardDeviation
  │   │       │   │   ├── min
  │   │       │   │   ├── Median
  │   │       │   │   ├── max
  │   │       │   │   ├── Percentile
  │   │       │   │   ├── bucket_at	[vim monitoring/histogram.h +73]
  │   │       │   │   ├── BucketLimit	[vim monitoring/histogram.h +42]
  │   │       │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │       │   ├── HistogramImpl::ToString	[vim monitoring/histogram.cc +279]
  │   │       │   │   └── ToString
  │   │       │   └── StatisticsImpl::ToString	[vim monitoring/statistics.cc +380]
  │   │       │       ├── StatisticsImpl::getTickerCountLocked	[vim monitoring/statistics.cc +265]
  │   │       │       ├── StatisticsImpl::getHistogramImplLocked	[vim monitoring/statistics.cc +280]
  │   │       │       ├── Data
  │   │       │       ├── c_str	[OUT-OF-TREE]
  │   │       │       └── shrink_to_fit	[OUT-OF-TREE]
  │   │       ├── c_str	[OUT-OF-TREE]
  │   │       ├── DBImpl::IOStatusCheck	[vim db/db_impl/db_impl_write.cc +873]
  │   │       │   ├── IsBusy	[vim include/rocksdb/status.h +394]
  │   │       │   ├── IsIncomplete	[vim include/rocksdb/status.h +356]
  │   │       │   ├── IsIOFenced	[vim include/rocksdb/status.h +494]
  │   │       │   ├── Lock
  │   │       │   ├── SetBGError
  │   │       │   ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │       │   └── Unlock
  │   │       ├── std::move	[OUT-OF-TREE]
  │   │       ├── Status::OK [+]
  │   │       │   ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │       │   │   └── IOStatus
  │   │       │   └── OK	[vim include/rocksdb/status.h +153]
  │   │       │       └── Status
  │   │       ├── ROCKS_LOG_DEBUG	[OUT-OF-TREE]
  │   │       └── SyncWAL [+]
  │   │           ├── SyncWAL	[vim include/rocksdb/utilities/stackable_db.h +332]
  │   │           ├── DBImpl::SyncWAL	[vim db/db_impl/db_impl.cc +1222]
  │   │           ├── SyncWAL	[vim db/db_impl/db_impl_secondary.h +195]
  │   │           └── SyncWAL	[vim db/db_impl/db_impl_readonly.h +110]
  │   ├── SyncWAL [+]
  │   │   ├── SyncWAL	[vim include/rocksdb/utilities/stackable_db.h +332]
  │   │   ├── DBImpl::SyncWAL	[vim db/db_impl/db_impl.cc +1222]
  │   │   ├── SyncWAL	[vim db/db_impl/db_impl_secondary.h +195]
  │   │   └── SyncWAL	[vim db/db_impl/db_impl_readonly.h +110]
  │   ├── PERF_TIMER_START	[OUT-OF-TREE]
  │   ├── DBImpl::IOStatusCheck	[vim db/db_impl/db_impl_write.cc +873]
  │   │   ├── IsBusy	[vim include/rocksdb/status.h +394]
  │   │   ├── IsIncomplete	[vim include/rocksdb/status.h +356]
  │   │   ├── IsIOFenced	[vim include/rocksdb/status.h +494]
  │   │   ├── Lock
  │   │   ├── SetBGError
  │   │   ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   └── Unlock
  │   ├── DBImpl::WriteStatusCheck	[vim db/db_impl/db_impl_write.cc +859]
  │   │   ├── IsIOFenced	[vim include/rocksdb/status.h +494]
  │   │   │   ├── code [+]
  │   │   │   │   └── code	[vim include/rocksdb/status.h +94]
  │   │   │   └── subcode [+]
  │   │   │       └── subcode	[vim include/rocksdb/status.h +120]
  │   │   ├── GetBGError	[vim db/error_handler.h +60]
  │   │   ├── IsBusy	[vim include/rocksdb/status.h +394]
  │   │   │   └── code [+]
  │   │   │       └── code	[vim include/rocksdb/status.h +94]
  │   │   ├── IsIncomplete	[vim include/rocksdb/status.h +356]
  │   │   │   └── code [+]
  │   │   │       └── code	[vim include/rocksdb/status.h +94]
  │   │   ├── Lock [+]
  │   │   │   ├── Lock	[vim env/mock_env.cc +48]
  │   │   │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   │   │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   │   │   ├── Lock	[vim port/win/port_win.h +137]
  │   │   │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  │   │   ├── SetBGError [+]
  │   │   │   ├── ErrorHandler::SetBGError	[vim db/error_handler.cc +247]
  │   │   │   │   ├── AssertHeld
  │   │   │   │   ├── Status::OK
  │   │   │   │   ├── subcode
  │   │   │   │   ├── code
  │   │   │   │   ├── std::make_tuple	[OUT-OF-TREE]
  │   │   │   │   ├── Status
  │   │   │   │   ├── ErrorHandler::OverrideNoSpaceError	[vim db/error_handler.cc +413]
  │   │   │   │   ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │   │   │   ├── severity
  │   │   │   │   ├── Status::NoSpace
  │   │   │   │   └── ErrorHandler::RecoverFromNoSpace	[vim db/error_handler.cc +450]
  │   │   │   └── ErrorHandler::SetBGError	[vim db/error_handler.cc +327]
  │   │   │       ├── AssertHeld
  │   │   │       ├── Status::OK
  │   │   │       ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │       ├── ToString
  │   │   │       ├── c_str	[OUT-OF-TREE]
  │   │   │       ├── DBImpl::DisableFileDeletionsWithLock	[vim db/db_impl/db_impl_files.cc +44]
  │   │   │       ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   │       ├── GetDataLoss	[vim include/rocksdb/io_status.h +63]
  │   │   │       ├── GetRetryable	[vim include/rocksdb/io_status.h +62]
  │   │   │       ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │   │       ├── bg_err	[OUT-OF-TREE]
  │   │   │       ├── severity
  │   │   │       ├── ErrorHandler::StartRecoverFromRetryableBGIOError	[vim db/error_handler.cc +540]
  │   │   │       └── SetBGError
  │   │   ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   └── Unlock [+]
  │   │       ├── Unlock	[vim env/mock_env.cc +59]
  │   │       ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │   │       ├── Unlock	[vim port/win/port_win.h +144]
  │   │       └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  │   ├── CallbackFailed	[vim db/write_thread.h +224]
  │   ├── Callback [+]
  │   │   ├── Callback	[vim utilities/transactions/optimistic_transaction.h +89]
  │   │   ├── Callback	[vim utilities/transactions/write_unprepared_txn_db.h +58]
  │   │   ├── Callback	[vim utilities/transactions/write_prepared_txn_db.h +859]
  │   │   ├── Callback	[vim utilities/transactions/write_prepared_txn_db.h +923]
  │   │   └── Callback	[vim utilities/transactions/write_prepared_txn_db.h +1015]
  │   ├── SetLastSequence [+]
  │   │   ├── SetLastSequence	[vim db/version_edit.h +362]
  │   │   └── SetLastSequence	[vim db/version_set.h +1078]
  │   ├── WriteThread::ExitAsBatchGroupLeader	[vim db/write_thread.cc +628]
  │   │   ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   ├── WriteThread::CompleteFollower	[vim db/write_thread.cc +320]
  │   │   │   └── SetState [+]
  │   │   │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │   │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   │   ├── ShouldWriteToMemtable	[vim db/write_thread.h +228]
  │   │   │   └── CallbackFailed	[vim db/write_thread.h +224]
  │   │   ├── WriteThread::CompleteLeader	[vim db/write_thread.cc +305]
  │   │   │   └── SetState [+]
  │   │   │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │   │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   │   ├── WriteThread::LinkGroup	[vim db/write_thread.cc +257]
  │   │   │   └── compare_exchange_weak	[OUT-OF-TREE]
  │   │   ├── WriteThread::FindNextLeader	[vim db/write_thread.cc +294]
  │   │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   ├── port::AsmVolatilePause [+]
  │   │   │   │   ├── AsmVolatilePause	[vim port/win/port_win.h +285]
  │   │   │   │   └── AsmVolatilePause	[vim port/port_posix.h +166]
  │   │   │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │   │   ├── Random::GetTLSInstance	[vim util/random.cc +25]
  │   │   │   │   ├── std::hash
  │   │   │   │   ├── std::this_thread::get_id
  │   │   │   │   └── Random	[vim util/random.h +39]
  │   │   │   ├── OneIn [+]
  │   │   │   │   ├── OneIn	[vim util/random.h +69]
  │   │   │   │   ├── OneIn	[vim util/random.h +131]
  │   │   │   │   └── OneIn	[vim util/random.h +163]
  │   │   │   ├── std::this_thread::yield	[OUT-OF-TREE]
  │   │   │   ├── std::chrono::steady_clock::now	[OUT-OF-TREE]
  │   │   │   ├── std::chrono::microseconds	[OUT-OF-TREE]
  │   │   │   ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │   └── WriteThread::BlockingAwaitState	[vim db/write_thread.cc +34]
  │   │   │       ├── CreateMutex	[vim db/write_thread.h +193]
  │   │   │       ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   │       ├── guard	[OUT-OF-TREE]
  │   │   │       ├── StateMutex	[vim db/write_thread.h +238]
  │   │   │       ├── StateCV	[vim db/write_thread.h +243]
  │   │   │       └── wait
  │   │   ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   └── SetState [+]
  │   │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   └── FinalStatus	[vim db/write_thread.h +205]
  ├── DBImpl::UnorderedWriteMemtable	[vim db/db_impl/db_impl_write.cc +613]
  │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   ├── write_sw	[OUT-OF-TREE]
  │   ├── CheckCallback [+]
  │   │   ├── CheckCallback	[vim table/get_context.h +157]
  │   │   │   └── IsVisible [+]
  │   │   │       ├── IsVisible	[vim db/read_callback.h +25]
  │   │   │       └── DBIter::IsVisible	[vim db/db_iter.cc +1181]
  │   │   ├── CheckCallback	[vim db/write_thread.h +186]
  │   │   │   └── Callback [+]
  │   │   │       ├── Callback	[vim utilities/transactions/optimistic_transaction.h +89]
  │   │   │       ├── Callback	[vim utilities/transactions/write_unprepared_txn_db.h +58]
  │   │   │       ├── Callback	[vim utilities/transactions/write_prepared_txn_db.h +859]
  │   │   │       ├── Callback	[vim utilities/transactions/write_prepared_txn_db.h +923]
  │   │   │       └── Callback	[vim utilities/transactions/write_prepared_txn_db.h +1015]
  │   │   └── CheckCallback	[vim db/memtable.cc +630]
  │   │       └── IsVisible [+]
  │   │           ├── IsVisible	[vim db/read_callback.h +25]
  │   │           └── DBIter::IsVisible	[vim db/db_iter.cc +1181]
  │   ├── ShouldWriteToMemtable	[vim db/write_thread.h +228]
  │   │   └── CallbackFailed	[vim db/write_thread.h +224]
  │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   └── DecodeFixed32	[vim util/coding_lean.h +74]
  │   ├── AddDBStats	[vim db/internal_stats.h +360]
  │   │   └── fetch_add	[OUT-OF-TREE]
  │   ├── RecordTick	[vim monitoring/statistics.h +124]
  │   │   └── StatisticsImpl::recordTick	[vim monitoring/statistics.cc +334]
  │   ├── column_family_memtables	[OUT-OF-TREE]
  │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   ├── WriteBatchInternal::InsertInto [+]
  │   │   ├── WriteBatchInternal::InsertInto	[vim db/write_batch.cc +2012]
  │   │   │   ├── inserter	[OUT-OF-TREE]
  │   │   │   ├── CallbackFailed	[vim db/write_thread.h +224]
  │   │   │   ├── ShouldWriteToMemtable	[vim db/write_thread.h +228]
  │   │   │   │   └── CallbackFailed	[vim db/write_thread.h +224]
  │   │   │   ├── MaybeAdvanceSeq	[vim db/write_batch.cc +1356]
  │   │   │   ├── WriteBatchInternal::SetSequence	[vim db/write_batch.cc +755]
  │   │   │   │   └── EncodeFixed64	[vim util/coding_lean.h +44]
  │   │   │   ├── set_log_number_ref	[vim db/write_batch.cc +1362]
  │   │   │   ├── Iterate [+]
  │   │   │   │   ├── WriteBatch::Iterate	[vim db/write_batch.cc +515]
  │   │   │   │   │   ├── Status::Corruption
  │   │   │   │   │   └── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   │   ├── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   │   │   ├── input
  │   │   │   │   │   ├── Continue
  │   │   │   │   │   ├── ReadRecordFromWriteBatch	[vim db/write_batch.cc +415]
  │   │   │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │   │   │   │   ├── PutCF
  │   │   │   │   │   ├── DeleteCF
  │   │   │   │   │   ├── SingleDeleteCF
  │   │   │   │   │   ├── DeleteRangeCF
  │   │   │   │   │   ├── MergeCF
  │   │   │   │   │   ├── PutBlobIndexCF
  │   │   │   │   │   ├── LogData
  │   │   │   │   │   ├── MarkBeginPrepare
  │   │   │   │   │   ├── WriteAfterCommit
  │   │   │   │   │   ├── WriteBeforePrepare
  │   │   │   │   │   ├── Status::NotSupported
  │   │   │   │   │   ├── MarkEndPrepare
  │   │   │   │   │   ├── MarkCommit
  │   │   │   │   │   ├── MarkRollback
  │   │   │   │   │   ├── MarkNoop
  │   │   │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │   │   │   ├── Status::Corruption
  │   │   │   │   │   └── Status::OK
  │   │   │   │   └── VersionEditHandlerBase::Iterate	[vim db/version_edit_handler.cc +18]
  │   │   │   │       ├── Initialize
  │   │   │   │       ├── Reader::LastRecordEnd	[vim db/log_reader.cc +234]
  │   │   │   │       ├── ReadRecord
  │   │   │   │       ├── DecodeFrom
  │   │   │   │       ├── AtomicGroupReadBuffer::AddEdit	[vim db/version_set.cc +3700]
  │   │   │   │       ├── AtomicGroupReadBuffer::IsFull	[vim db/version_set.cc +3734]
  │   │   │   │       ├── replay_buffer
  │   │   │   │       ├── ApplyVersionEdit
  │   │   │   │       ├── Clear
  │   │   │   │       ├── CheckIterationResult
  │   │   │   │       └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │   ├── sequence [+]
  │   │   │   │   └── sequence	[vim db/write_batch.cc +1364]
  │   │   │   └── Status::OK [+]
  │   │   │       ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │   │       │   └── IOStatus
  │   │   │       └── OK	[vim include/rocksdb/status.h +153]
  │   │   │           └── Status
  │   │   ├── WriteBatchInternal::InsertInto	[vim db/write_batch.cc +2045]
  │   │   │   ├── ShouldWriteToMemtable	[vim db/write_thread.h +228]
  │   │   │   │   └── CallbackFailed	[vim db/write_thread.h +224]
  │   │   │   ├── inserter	[OUT-OF-TREE]
  │   │   │   ├── WriteBatchInternal::SetSequence	[vim db/write_batch.cc +755]
  │   │   │   │   └── EncodeFixed64	[vim util/coding_lean.h +44]
  │   │   │   ├── set_log_number_ref	[vim db/write_batch.cc +1362]
  │   │   │   ├── Iterate [+]
  │   │   │   │   ├── WriteBatch::Iterate	[vim db/write_batch.cc +515]
  │   │   │   │   │   ├── Status::Corruption
  │   │   │   │   │   └── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   │   ├── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   │   │   ├── input
  │   │   │   │   │   ├── Continue
  │   │   │   │   │   ├── ReadRecordFromWriteBatch	[vim db/write_batch.cc +415]
  │   │   │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │   │   │   │   ├── PutCF
  │   │   │   │   │   ├── DeleteCF
  │   │   │   │   │   ├── SingleDeleteCF
  │   │   │   │   │   ├── DeleteRangeCF
  │   │   │   │   │   ├── MergeCF
  │   │   │   │   │   ├── PutBlobIndexCF
  │   │   │   │   │   ├── LogData
  │   │   │   │   │   ├── MarkBeginPrepare
  │   │   │   │   │   ├── WriteAfterCommit
  │   │   │   │   │   ├── WriteBeforePrepare
  │   │   │   │   │   ├── Status::NotSupported
  │   │   │   │   │   ├── MarkEndPrepare
  │   │   │   │   │   ├── MarkCommit
  │   │   │   │   │   ├── MarkRollback
  │   │   │   │   │   ├── MarkNoop
  │   │   │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │   │   │   ├── Status::Corruption
  │   │   │   │   │   └── Status::OK
  │   │   │   │   └── VersionEditHandlerBase::Iterate	[vim db/version_edit_handler.cc +18]
  │   │   │   │       ├── Initialize
  │   │   │   │       ├── Reader::LastRecordEnd	[vim db/log_reader.cc +234]
  │   │   │   │       ├── ReadRecord
  │   │   │   │       ├── DecodeFrom
  │   │   │   │       ├── AtomicGroupReadBuffer::AddEdit	[vim db/version_set.cc +3700]
  │   │   │   │       ├── AtomicGroupReadBuffer::IsFull	[vim db/version_set.cc +3734]
  │   │   │   │       ├── replay_buffer
  │   │   │   │       ├── ApplyVersionEdit
  │   │   │   │       ├── Clear
  │   │   │   │       ├── CheckIterationResult
  │   │   │   │       └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │   ├── sequence [+]
  │   │   │   │   └── sequence	[vim db/write_batch.cc +1364]
  │   │   │   └── PostProcess	[vim db/write_batch.cc +1366]
  │   │   │       ├── GetPostMap	[vim db/write_batch.cc +1262]
  │   │   │       └── BatchPostProcess	[vim db/memtable.h +279]
  │   │   └── WriteBatchInternal::InsertInto	[vim db/write_batch.cc +2072]
  │   │       ├── inserter	[OUT-OF-TREE]
  │   │       ├── WriteBatchInternal::Sequence	[vim db/write_batch.cc +751]
  │   │       │   ├── SequenceNumber	[OUT-OF-TREE]
  │   │       │   └── DecodeFixed64	[vim util/coding_lean.h +88]
  │   │       ├── Iterate [+]
  │   │       │   ├── WriteBatch::Iterate	[vim db/write_batch.cc +515]
  │   │       │   │   ├── Status::Corruption
  │   │       │   │   └── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │       │   ├── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │       │   │   ├── input
  │   │       │   │   ├── Continue
  │   │       │   │   ├── ReadRecordFromWriteBatch	[vim db/write_batch.cc +415]
  │   │       │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │       │   │   ├── PutCF
  │   │       │   │   ├── DeleteCF
  │   │       │   │   ├── SingleDeleteCF
  │   │       │   │   ├── DeleteRangeCF
  │   │       │   │   ├── MergeCF
  │   │       │   │   ├── PutBlobIndexCF
  │   │       │   │   ├── LogData
  │   │       │   │   ├── MarkBeginPrepare
  │   │       │   │   ├── WriteAfterCommit
  │   │       │   │   ├── WriteBeforePrepare
  │   │       │   │   ├── Status::NotSupported
  │   │       │   │   ├── MarkEndPrepare
  │   │       │   │   ├── MarkCommit
  │   │       │   │   ├── MarkRollback
  │   │       │   │   ├── MarkNoop
  │   │       │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │       │   │   ├── Status::Corruption
  │   │       │   │   └── Status::OK
  │   │       │   └── VersionEditHandlerBase::Iterate	[vim db/version_edit_handler.cc +18]
  │   │       │       ├── Initialize
  │   │       │       ├── Reader::LastRecordEnd	[vim db/log_reader.cc +234]
  │   │       │       ├── ReadRecord
  │   │       │       ├── DecodeFrom
  │   │       │       ├── AtomicGroupReadBuffer::AddEdit	[vim db/version_set.cc +3700]
  │   │       │       ├── AtomicGroupReadBuffer::IsFull	[vim db/version_set.cc +3734]
  │   │       │       ├── replay_buffer
  │   │       │       ├── ApplyVersionEdit
  │   │       │       ├── Clear
  │   │       │       ├── CheckIterationResult
  │   │       │       └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │       ├── sequence [+]
  │   │       │   └── sequence	[vim db/write_batch.cc +1364]
  │   │       └── PostProcess	[vim db/write_batch.cc +1366]
  │   │           ├── GetPostMap	[vim db/write_batch.cc +1262]
  │   │           └── BatchPostProcess	[vim db/memtable.h +279]
  │   ├── fetch_sub	[OUT-OF-TREE]
  │   ├── lck	[OUT-OF-TREE]
  │   ├── notify_all	[OUT-OF-TREE]
  │   ├── DBImpl::WriteStatusCheck	[vim db/db_impl/db_impl_write.cc +859]
  │   │   ├── IsIOFenced	[vim include/rocksdb/status.h +494]
  │   │   │   ├── code [+]
  │   │   │   │   └── code	[vim include/rocksdb/status.h +94]
  │   │   │   └── subcode [+]
  │   │   │       └── subcode	[vim include/rocksdb/status.h +120]
  │   │   ├── GetBGError	[vim db/error_handler.h +60]
  │   │   ├── IsBusy	[vim include/rocksdb/status.h +394]
  │   │   │   └── code [+]
  │   │   │       └── code	[vim include/rocksdb/status.h +94]
  │   │   ├── IsIncomplete	[vim include/rocksdb/status.h +356]
  │   │   │   └── code [+]
  │   │   │       └── code	[vim include/rocksdb/status.h +94]
  │   │   ├── Lock [+]
  │   │   │   ├── Lock	[vim env/mock_env.cc +48]
  │   │   │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   │   │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   │   │   ├── Lock	[vim port/win/port_win.h +137]
  │   │   │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  │   │   ├── SetBGError [+]
  │   │   │   ├── ErrorHandler::SetBGError	[vim db/error_handler.cc +247]
  │   │   │   │   ├── AssertHeld
  │   │   │   │   ├── Status::OK
  │   │   │   │   ├── subcode
  │   │   │   │   ├── code
  │   │   │   │   ├── std::make_tuple	[OUT-OF-TREE]
  │   │   │   │   ├── Status
  │   │   │   │   ├── ErrorHandler::OverrideNoSpaceError	[vim db/error_handler.cc +413]
  │   │   │   │   ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │   │   │   ├── severity
  │   │   │   │   ├── Status::NoSpace
  │   │   │   │   └── ErrorHandler::RecoverFromNoSpace	[vim db/error_handler.cc +450]
  │   │   │   └── ErrorHandler::SetBGError	[vim db/error_handler.cc +327]
  │   │   │       ├── AssertHeld
  │   │   │       ├── Status::OK
  │   │   │       ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │       ├── ToString
  │   │   │       ├── c_str	[OUT-OF-TREE]
  │   │   │       ├── DBImpl::DisableFileDeletionsWithLock	[vim db/db_impl/db_impl_files.cc +44]
  │   │   │       ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   │       ├── GetDataLoss	[vim include/rocksdb/io_status.h +63]
  │   │   │       ├── GetRetryable	[vim include/rocksdb/io_status.h +62]
  │   │   │       ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │   │       ├── bg_err	[OUT-OF-TREE]
  │   │   │       ├── severity
  │   │   │       ├── ErrorHandler::StartRecoverFromRetryableBGIOError	[vim db/error_handler.cc +540]
  │   │   │       └── SetBGError
  │   │   ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   └── Unlock [+]
  │   │       ├── Unlock	[vim env/mock_env.cc +59]
  │   │       ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │   │       ├── Unlock	[vim port/win/port_win.h +144]
  │   │       └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  │   ├── FinalStatus	[vim db/write_thread.h +205]
  │   └── Status::OK [+]
  │       ├── OK	[vim include/rocksdb/io_status.h +67]
  │       │   └── IOStatus
  │       └── OK	[vim include/rocksdb/status.h +153]
  │           └── Status
  ├── DBImpl::PipelinedWriteImpl	[vim db/db_impl/db_impl_write.cc +469]
  │   ├── write_sw	[OUT-OF-TREE]
  │   ├── WriteThread::JoinBatchGroup	[vim db/write_thread.cc +379]
  │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   ├── Status::Incomplete [+]
  │   │   │   │   ├── Incomplete	[vim include/rocksdb/status.h +207]
  │   │   │   │   │   ├── Slice [+]
  │   │   │   │   │   │   ├── Slice::Slice	[vim util/slice.cc +142]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +38]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +41]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +45]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +50]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   └── Slice	[vim include/rocksdb/slice.h +55]
  │   │   │   │   │   │       ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │       └── strlen	[OUT-OF-TREE]
  │   │   │   │   │   └── Status [+]
  │   │   │   │   │       ├── Status::Status	[vim util/status.cc +60]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── sev_	[OUT-OF-TREE]
  │   │   │   │   │       ├── Status	[vim include/rocksdb/status.h +37]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── state_	[OUT-OF-TREE]
  │   │   │   │   │       ├── Status	[vim include/rocksdb/status.h +519]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── state_	[OUT-OF-TREE]
  │   │   │   │   │       ├── Status	[vim include/rocksdb/status.h +523]
  │   │   │   │   │       │   └── Status
  │   │   │   │   │       ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │   │       ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │   │       └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │   │   │   │           ├── Status
  │   │   │   │   │           └── std::move	[OUT-OF-TREE]
  │   │   │   │   └── Incomplete	[vim include/rocksdb/status.h +210]
  │   │   │   │       └── Status [+]
  │   │   │   │           ├── Status::Status	[vim util/status.cc +60]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   └── sev_	[OUT-OF-TREE]
  │   │   │   │           ├── Status	[vim include/rocksdb/status.h +37]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── state_	[OUT-OF-TREE]
  │   │   │   │           ├── Status	[vim include/rocksdb/status.h +519]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── state_	[OUT-OF-TREE]
  │   │   │   │           ├── Status	[vim include/rocksdb/status.h +523]
  │   │   │   │           │   └── Status
  │   │   │   │           ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │           ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │           └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │   │   │               ├── Status
  │   │   │   │               └── std::move	[OUT-OF-TREE]
  │   │   │   ├── SetState [+]
  │   │   │   │   ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │   │   │   └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   │   │   ├── Wait [+]
  │   │   │   │   ├── TransactionDBCondVarImpl::Wait	[vim utilities/transactions/transaction_db_mutex_impl.cc +93]
  │   │   │   │   ├── CondVar::Wait	[vim port/port_posix.cc +103]
  │   │   │   │   ├── CondVar::Wait	[vim port/win/port_win.cc +71]
  │   │   │   │   └── InstrumentedCondVar::Wait	[vim monitoring/instrumented_mutex.cc +39]
  │   │   │   └── compare_exchange_weak	[OUT-OF-TREE]
  │   │   ├── SetState [+]
  │   │   │   ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │   │   └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   ├── port::AsmVolatilePause [+]
  │   │   │   │   ├── AsmVolatilePause	[vim port/win/port_win.h +285]
  │   │   │   │   └── AsmVolatilePause	[vim port/port_posix.h +166]
  │   │   │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │   │   ├── Random::GetTLSInstance	[vim util/random.cc +25]
  │   │   │   │   ├── std::hash
  │   │   │   │   ├── std::this_thread::get_id
  │   │   │   │   └── Random	[vim util/random.h +39]
  │   │   │   ├── OneIn [+]
  │   │   │   │   ├── OneIn	[vim util/random.h +69]
  │   │   │   │   ├── OneIn	[vim util/random.h +131]
  │   │   │   │   └── OneIn	[vim util/random.h +163]
  │   │   │   ├── std::this_thread::yield	[OUT-OF-TREE]
  │   │   │   ├── std::chrono::steady_clock::now	[OUT-OF-TREE]
  │   │   │   ├── std::chrono::microseconds	[OUT-OF-TREE]
  │   │   │   ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │   └── WriteThread::BlockingAwaitState	[vim db/write_thread.cc +34]
  │   │   │       ├── CreateMutex	[vim db/write_thread.h +193]
  │   │   │       ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   │       ├── guard	[OUT-OF-TREE]
  │   │   │       ├── StateMutex	[vim db/write_thread.h +238]
  │   │   │       ├── StateCV	[vim db/write_thread.h +243]
  │   │   │       └── wait
  │   │   └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   ├── AllowWriteBatching	[vim utilities/transactions/optimistic_transaction.h +93]
  │   ├── WriteThread::WaitForMemTableWriters	[vim db/write_thread.cc +783]
  │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   └── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   ├── DBImpl::PreprocessWrite	[vim db/db_impl/db_impl_write.cc +903]
  │   │   ├── AssertHeld [+]
  │   │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │       └── AssertHeld
  │   │   ├── IsDBStopped	[vim db/error_handler.h +66]
  │   │   │   └── severity [+]
  │   │   │       └── severity	[vim include/rocksdb/status.h +137]
  │   │   ├── GetBGError	[vim db/error_handler.h +60]
  │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   ├── ColumnFamilySet::NumberOfColumnFamilies	[vim db/column_family.cc +1498]
  │   │   ├── DBImpl::GetMaxTotalWalSize	[vim db/db_impl/db_impl_write.cc +1427]
  │   │   │   └── AssertHeld [+]
  │   │   │       ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │       ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │       ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │       ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │       └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │           └── AssertHeld
  │   │   ├── DBImpl::SwitchWAL	[vim db/db_impl/db_impl_write.cc +1253]
  │   │   │   ├── AssertHeld [+]
  │   │   │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │   │       └── AssertHeld
  │   │   │   ├── allow_2pc	[vim db/db_impl/db_impl.h +821]
  │   │   │   ├── LogsWithPrepTracker::FindMinLogContainingOutstandingPrep	[vim db/logs_with_prep_tracker.cc +43]
  │   │   │   │   └── lock2	[OUT-OF-TREE]
  │   │   │   ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │   ├── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   ├── DBImpl::GetMaxTotalWalSize	[vim db/db_impl/db_impl_write.cc +1427]
  │   │   │   │   └── AssertHeld [+]
  │   │   │   │       ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   │       ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   │       ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   │       ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   │       └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │   │           └── AssertHeld
  │   │   │   ├── DBImpl::SelectColumnFamiliesForAtomicFlush	[vim db/db_impl/db_impl_write.cc +1231]
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── IsDropped	[vim db/column_family.h +315]
  │   │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   │   ├── mem
  │   │   │   │   ├── IsEmpty
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   ├── IsDropped	[vim db/column_family.h +315]
  │   │   │   ├── ColumnFamilyData::OldestLogToKeep	[vim db/column_family.cc +707]
  │   │   │   │   ├── GetLogNumber
  │   │   │   │   ├── MemTableList::PrecomputeMinLogContainingPrepSection	[vim db/memtable_list.cc +676]
  │   │   │   │   ├── mem
  │   │   │   │   └── MemTable::GetMinLogContainingPrepSection	[vim db/memtable.cc +1166]
  │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── DBImpl::MaybeFlushStatsCF	[vim db/db_impl/db_impl_write.cc +1542]
  │   │   │   │   ├── GetColumnFamily
  │   │   │   │   ├── mem
  │   │   │   │   ├── IsEmpty
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── GetLogNumber
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   └── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   ├── WriteThread::EnterUnbatched	[vim db/write_thread.cc +755]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │   │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   │   ├── WriteThread::WaitForMemTableWriters	[vim db/write_thread.cc +783]
  │   │   │   │   └── Lock
  │   │   │   ├── Ref [+]
  │   │   │   │   ├── Ref	[vim cache/lru_cache.h +82]
  │   │   │   │   ├── ClockCacheShard::Ref	[vim cache/clock_cache.cc +450]
  │   │   │   │   ├── ShardedCache::Ref	[vim cache/sharded_cache.cc +59]
  │   │   │   │   ├── LRUCacheShard::Ref	[vim cache/lru_cache.cc +285]
  │   │   │   │   ├── Ref	[vim env/mock_env.cc +41]
  │   │   │   │   ├── Ref	[vim utilities/simulator_cache/sim_cache.cc +215]
  │   │   │   │   ├── Ref	[vim db/column_family.h +280]
  │   │   │   │   ├── SuperVersion::Ref	[vim db/column_family.cc +429]
  │   │   │   │   ├── MemTableListVersion::Ref	[vim db/memtable_list.cc +71]
  │   │   │   │   ├── Ref	[vim db/memtable.h +118]
  │   │   │   │   └── Version::Ref	[vim db/version_set.cc +3033]
  │   │   │   ├── DBImpl::SwitchMemtable	[vim db/db_impl/db_impl_write.cc +1674]
  │   │   │   │   ├── AssertHeld
  │   │   │   │   ├── DBImpl::WriteRecoverableState	[vim db/db_impl/db_impl_write.cc +1180]
  │   │   │   │   ├── prev_log_number	[vim db/version_set.h +1113]
  │   │   │   │   ├── NewFileNumber	[vim db/version_set.h +1055]
  │   │   │   │   ├── GetLatestMutableCFOptions	[vim db/column_family.h +338]
  │   │   │   │   ├── GetEarliestSequenceNumber
  │   │   │   │   ├── num_entries	[vim db/memtable.h +293]
  │   │   │   │   ├── num_deletes	[vim db/memtable.h +300]
  │   │   │   │   ├── DBImpl::GetWalPreallocateBlockSize	[vim db/db_impl/db_impl_write.cc +1843]
  │   │   │   │   ├── CreateWAL	[OUT-OF-TREE]
  │   │   │   │   ├── ColumnFamilyData::ConstructNewMemtable	[vim db/column_family.cc +1047]
  │   │   │   │   ├── NewSuperVersion	[vim db/job_context.h +47]
  │   │   │   │   ├── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   │   ├── pop_front	[OUT-OF-TREE]
  │   │   │   │   ├── Writer::WriteBuffer	[vim db/log_writer.cc +40]
  │   │   │   │   ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │   │   ├── GetName
  │   │   │   │   ├── c_str	[OUT-OF-TREE]
  │   │   │   │   ├── get_log_number
  │   │   │   │   ├── emplace_back	[OUT-OF-TREE]
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   ├── LogFileNumberSize	[vim db/db_impl/db_impl.h +1294]
  │   │   │   │   ├── release
  │   │   │   │   ├── SetBGError
  │   │   │   │   ├── GetBGError	[vim db/error_handler.h +60]
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── GetFirstSequenceNumber	[vim db/memtable.h +332]
  │   │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   │   ├── SetLogNumber
  │   │   │   │   ├── SetCreationSeq	[vim db/memtable.h +351]
  │   │   │   │   ├── LastSequence	[vim db/version_set.h +1063]
  │   │   │   │   ├── SetNextLogNumber	[vim db/memtable.h +363]
  │   │   │   │   ├── Add
  │   │   │   │   ├── mem
  │   │   │   │   ├── Ref
  │   │   │   │   ├── SetMemtable	[vim db/column_family.h +369]
  │   │   │   │   ├── DBImpl::InstallSuperVersionAndScheduleWork	[vim db/db_impl/db_impl_compaction_flush.cc +3255]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── DBImpl::NotifyOnMemTableSealed	[vim db/db_impl/db_impl_write.cc +1655]
  │   │   │   │   ├── Lock
  │   │   │   │   └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   │   ├── ColumnFamilyData::UnrefAndTryDelete	[vim db/column_family.cc +663]
  │   │   │   │   ├── fetch_sub	[OUT-OF-TREE]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── Lock
  │   │   │   │   ├── Unref
  │   │   │   │   └── Cleanup
  │   │   │   ├── WriteThread::ExitUnbatched	[vim db/write_thread.cc +770]
  │   │   │   │   ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   │   │   └── SetState
  │   │   │   ├── AssignAtomicFlushSeq [+]
  │   │   │   │   ├── AssignAtomicFlushSeq	[vim db/memtable_list.h +356]
  │   │   │   │   └── DBImpl::AssignAtomicFlushSeq	[vim db/db_impl/db_impl_write.cc +1245]
  │   │   │   ├── FlushRequested	[vim db/memtable_list.h +311]
  │   │   │   ├── DBImpl::GenerateFlushRequest	[vim db/db_impl/db_impl_compaction_flush.cc +1683]
  │   │   │   │   ├── GetLatestMemTableID	[vim db/memtable_list.h +348]
  │   │   │   │   └── emplace_back	[OUT-OF-TREE]
  │   │   │   ├── DBImpl::SchedulePendingFlush	[vim db/db_impl/db_impl_compaction_flush.cc +2257]
  │   │   │   │   ├── Ref
  │   │   │   │   ├── SetFlushReason	[vim db/column_family.h +323]
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   └── DBImpl::MaybeScheduleFlushOrCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +2094]
  │   │   │       ├── AssertHeld
  │   │   │       ├── IsRecoveryInProgress	[vim db/error_handler.h +79]
  │   │   │       ├── GetBGJobLimits
  │   │   │       ├── GetBackgroundThreads
  │   │   │       ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │       ├── IsBGWorkStopped	[vim db/error_handler.h +71]
  │   │   │       ├── DBImpl::HasExclusiveManualCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +3173]
  │   │   │       ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │       └── Schedule
  │   │   ├── ShouldFlush	[vim include/rocksdb/write_buffer_manager.h +49]
  │   │   │   ├── enabled [+]
  │   │   │   │   └── enabled	[vim include/rocksdb/write_buffer_manager.h +35]
  │   │   │   ├── memory_usage	[vim include/rocksdb/write_buffer_manager.h +40]
  │   │   │   └── mutable_memtable_memory_usage	[vim include/rocksdb/write_buffer_manager.h +43]
  │   │   ├── DBImpl::HandleWriteBufferFull	[vim db/db_impl/db_impl_write.cc +1348]
  │   │   │   ├── AssertHeld [+]
  │   │   │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │   │       └── AssertHeld
  │   │   │   ├── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   ├── memory_usage	[vim include/rocksdb/write_buffer_manager.h +40]
  │   │   │   ├── buffer_size	[vim include/rocksdb/write_buffer_manager.h +46]
  │   │   │   ├── DBImpl::SelectColumnFamiliesForAtomicFlush	[vim db/db_impl/db_impl_write.cc +1231]
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── IsDropped	[vim db/column_family.h +315]
  │   │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   │   ├── mem
  │   │   │   │   ├── IsEmpty
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   ├── IsDropped	[vim db/column_family.h +315]
  │   │   │   ├── GetCreationSeq	[vim db/memtable.h +349]
  │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── DBImpl::MaybeFlushStatsCF	[vim db/db_impl/db_impl_write.cc +1542]
  │   │   │   │   ├── GetColumnFamily
  │   │   │   │   ├── mem
  │   │   │   │   ├── IsEmpty
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── GetLogNumber
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   └── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   ├── WriteThread::EnterUnbatched	[vim db/write_thread.cc +755]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │   │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   │   ├── WriteThread::WaitForMemTableWriters	[vim db/write_thread.cc +783]
  │   │   │   │   └── Lock
  │   │   │   ├── mem [+]
  │   │   │   │   └── mem	[vim db/column_family.h +362]
  │   │   │   ├── IsEmpty [+]
  │   │   │   │   ├── IsEmpty	[vim cache/cache_helpers.h +81]
  │   │   │   │   ├── IsEmpty	[vim utilities/persistent_cache/lrulist.h +106]
  │   │   │   │   ├── IsEmpty	[vim table/block_based/cachable_entry.h +102]
  │   │   │   │   ├── BlockBasedTableBuilder::IsEmpty	[vim table/block_based/block_based_table_builder.cc +1775]
  │   │   │   │   ├── IsEmpty	[vim table/table_builder.h +176]
  │   │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +322]
  │   │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +385]
  │   │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +418]
  │   │   │   │   ├── IsEmpty	[vim db/wal_edit.h +107]
  │   │   │   │   ├── IsEmpty	[vim db/version_builder.cc +91]
  │   │   │   │   ├── IsEmpty	[vim db/memtable.h +326]
  │   │   │   │   ├── AtomicGroupReadBuffer::IsEmpty	[vim db/version_set.cc +3738]
  │   │   │   │   └── IsEmpty	[vim logging/log_buffer.h +29]
  │   │   │   ├── Ref [+]
  │   │   │   │   ├── Ref	[vim cache/lru_cache.h +82]
  │   │   │   │   ├── ClockCacheShard::Ref	[vim cache/clock_cache.cc +450]
  │   │   │   │   ├── ShardedCache::Ref	[vim cache/sharded_cache.cc +59]
  │   │   │   │   ├── LRUCacheShard::Ref	[vim cache/lru_cache.cc +285]
  │   │   │   │   ├── Ref	[vim env/mock_env.cc +41]
  │   │   │   │   ├── Ref	[vim utilities/simulator_cache/sim_cache.cc +215]
  │   │   │   │   ├── Ref	[vim db/column_family.h +280]
  │   │   │   │   ├── SuperVersion::Ref	[vim db/column_family.cc +429]
  │   │   │   │   ├── MemTableListVersion::Ref	[vim db/memtable_list.cc +71]
  │   │   │   │   ├── Ref	[vim db/memtable.h +118]
  │   │   │   │   └── Version::Ref	[vim db/version_set.cc +3033]
  │   │   │   ├── DBImpl::SwitchMemtable	[vim db/db_impl/db_impl_write.cc +1674]
  │   │   │   │   ├── AssertHeld
  │   │   │   │   ├── DBImpl::WriteRecoverableState	[vim db/db_impl/db_impl_write.cc +1180]
  │   │   │   │   ├── prev_log_number	[vim db/version_set.h +1113]
  │   │   │   │   ├── NewFileNumber	[vim db/version_set.h +1055]
  │   │   │   │   ├── GetLatestMutableCFOptions	[vim db/column_family.h +338]
  │   │   │   │   ├── GetEarliestSequenceNumber
  │   │   │   │   ├── num_entries	[vim db/memtable.h +293]
  │   │   │   │   ├── num_deletes	[vim db/memtable.h +300]
  │   │   │   │   ├── DBImpl::GetWalPreallocateBlockSize	[vim db/db_impl/db_impl_write.cc +1843]
  │   │   │   │   ├── CreateWAL	[OUT-OF-TREE]
  │   │   │   │   ├── ColumnFamilyData::ConstructNewMemtable	[vim db/column_family.cc +1047]
  │   │   │   │   ├── NewSuperVersion	[vim db/job_context.h +47]
  │   │   │   │   ├── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   │   ├── pop_front	[OUT-OF-TREE]
  │   │   │   │   ├── Writer::WriteBuffer	[vim db/log_writer.cc +40]
  │   │   │   │   ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │   │   ├── GetName
  │   │   │   │   ├── c_str	[OUT-OF-TREE]
  │   │   │   │   ├── get_log_number
  │   │   │   │   ├── emplace_back	[OUT-OF-TREE]
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   ├── LogFileNumberSize	[vim db/db_impl/db_impl.h +1294]
  │   │   │   │   ├── release
  │   │   │   │   ├── SetBGError
  │   │   │   │   ├── GetBGError	[vim db/error_handler.h +60]
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── GetFirstSequenceNumber	[vim db/memtable.h +332]
  │   │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   │   ├── SetLogNumber
  │   │   │   │   ├── SetCreationSeq	[vim db/memtable.h +351]
  │   │   │   │   ├── LastSequence	[vim db/version_set.h +1063]
  │   │   │   │   ├── SetNextLogNumber	[vim db/memtable.h +363]
  │   │   │   │   ├── Add
  │   │   │   │   ├── mem
  │   │   │   │   ├── Ref
  │   │   │   │   ├── SetMemtable	[vim db/column_family.h +369]
  │   │   │   │   ├── DBImpl::InstallSuperVersionAndScheduleWork	[vim db/db_impl/db_impl_compaction_flush.cc +3255]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── DBImpl::NotifyOnMemTableSealed	[vim db/db_impl/db_impl_write.cc +1655]
  │   │   │   │   ├── Lock
  │   │   │   │   └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   │   ├── ColumnFamilyData::UnrefAndTryDelete	[vim db/column_family.cc +663]
  │   │   │   │   ├── fetch_sub	[OUT-OF-TREE]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── Lock
  │   │   │   │   ├── Unref
  │   │   │   │   └── Cleanup
  │   │   │   ├── WriteThread::ExitUnbatched	[vim db/write_thread.cc +770]
  │   │   │   │   ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   │   │   └── SetState
  │   │   │   ├── AssignAtomicFlushSeq [+]
  │   │   │   │   ├── AssignAtomicFlushSeq	[vim db/memtable_list.h +356]
  │   │   │   │   └── DBImpl::AssignAtomicFlushSeq	[vim db/db_impl/db_impl_write.cc +1245]
  │   │   │   ├── FlushRequested	[vim db/memtable_list.h +311]
  │   │   │   ├── DBImpl::GenerateFlushRequest	[vim db/db_impl/db_impl_compaction_flush.cc +1683]
  │   │   │   │   ├── GetLatestMemTableID	[vim db/memtable_list.h +348]
  │   │   │   │   └── emplace_back	[OUT-OF-TREE]
  │   │   │   ├── DBImpl::SchedulePendingFlush	[vim db/db_impl/db_impl_compaction_flush.cc +2257]
  │   │   │   │   ├── Ref
  │   │   │   │   ├── SetFlushReason	[vim db/column_family.h +323]
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   └── DBImpl::MaybeScheduleFlushOrCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +2094]
  │   │   │       ├── AssertHeld
  │   │   │       ├── IsRecoveryInProgress	[vim db/error_handler.h +79]
  │   │   │       ├── GetBGJobLimits
  │   │   │       ├── GetBackgroundThreads
  │   │   │       ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │       ├── IsBGWorkStopped	[vim db/error_handler.h +71]
  │   │   │       ├── DBImpl::HasExclusiveManualCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +3173]
  │   │   │       ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │       └── Schedule
  │   │   ├── DBImpl::TrimMemtableHistory	[vim db/db_impl/db_impl_write.cc +1576]
  │   │   │   ├── TakeNextColumnFamily [+]
  │   │   │   │   ├── FlushScheduler::TakeNextColumnFamily	[vim db/flush_scheduler.cc +36]
  │   │   │   │   └── TrimHistoryScheduler::TakeNextColumnFamily	[vim db/trim_history_scheduler.cc +21]
  │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── TrimHistory [+]
  │   │   │   │   ├── MemTableListVersion::TrimHistory	[vim db/memtable_list.cc +312]
  │   │   │   │   └── MemTableList::TrimHistory	[vim db/memtable_list.cc +536]
  │   │   │   ├── mem [+]
  │   │   │   │   └── mem	[vim db/column_family.h +362]
  │   │   │   ├── ApproximateMemoryUsage [+]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim memory/memory_usage.h +15]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim memory/concurrent_arena.h +69]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim memory/arena.h +65]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim util/compression.h +329]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim memtable/skiplistrep.cc +75]
  │   │   │   │   ├── HashLinkListRep::ApproximateMemoryUsage	[vim memtable/hash_linklist_rep.cc +710]
  │   │   │   │   ├── VectorRep::ApproximateMemoryUsage	[vim memtable/vectorrep.cc +127]
  │   │   │   │   ├── HashSkipListRep::ApproximateMemoryUsage	[vim memtable/hash_skiplist_rep.cc +285]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/plain/plain_table_reader.h +109]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/mock_table.cc +54]
  │   │   │   │   ├── CuckooTableReader::ApproximateMemoryUsage	[vim table/cuckoo/cuckoo_table_reader.cc +401]
  │   │   │   │   ├── PartitionedFilterBlockReader::ApproximateMemoryUsage	[vim table/block_based/partitioned_filter_block.cc +403]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/hash_index_reader.h +30]
  │   │   │   │   ├── Block::ApproximateMemoryUsage	[vim table/block_based/block.cc +1036]
  │   │   │   │   ├── UncompressionDictReader::ApproximateMemoryUsage	[vim table/block_based/uncompression_dict_reader.cc +97]
  │   │   │   │   ├── FullFilterBlockReader::ApproximateMemoryUsage	[vim table/block_based/full_filter_block.cc +275]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/binary_search_index_reader.h +33]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/parsed_full_filter_block.h +29]
  │   │   │   │   ├── BlockBasedTable::ApproximateMemoryUsage	[vim table/block_based/block_based_table_reader.cc +1127]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/block.h +106]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/partitioned_index_reader.h +33]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/block_prefix_index.h +28]
  │   │   │   │   ├── BlockBasedFilterBlockReader::ApproximateMemoryUsage	[vim table/block_based/block_based_filter_block.cc +296]
  │   │   │   │   ├── ApproximateMemoryUsage	[vim table/format.h +285]
  │   │   │   │   ├── MemTableList::ApproximateMemoryUsage	[vim db/memtable_list.cc +553]
  │   │   │   │   └── MemTable::ApproximateMemoryUsage	[vim db/memtable.cc +130]
  │   │   │   ├── NewSuperVersion	[vim db/job_context.h +47]
  │   │   │   │   ├── std::unique_ptr	[OUT-OF-TREE]
  │   │   │   │   └── SuperVersion	[OUT-OF-TREE]
  │   │   │   ├── InstallSuperVersion [+]
  │   │   │   │   ├── ColumnFamilyData::InstallSuperVersion	[vim db/column_family.cc +1244]
  │   │   │   │   └── ColumnFamilyData::InstallSuperVersion	[vim db/column_family.cc +1250]
  │   │   │   ├── ColumnFamilyData::UnrefAndTryDelete	[vim db/column_family.cc +663]
  │   │   │   │   ├── fetch_sub	[OUT-OF-TREE]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── Lock
  │   │   │   │   ├── Unref
  │   │   │   │   └── Cleanup
  │   │   │   └── Status::OK [+]
  │   │   │       ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │   │       │   └── IOStatus
  │   │   │       └── OK	[vim include/rocksdb/status.h +153]
  │   │   │           └── Status
  │   │   ├── Empty [+]
  │   │   │   ├── RowValue::Empty	[vim utilities/cassandra/format.cc +301]
  │   │   │   ├── FlushScheduler::Empty	[vim db/flush_scheduler.cc +67]
  │   │   │   ├── TrimHistoryScheduler::Empty	[vim db/trim_history_scheduler.cc +41]
  │   │   │   ├── Empty	[vim utilities/backupable/backupable_db.cc +245]
  │   │   │   ├── HistogramWindowingImpl::Empty	[vim monitoring/histogram_windowing.cc +50]
  │   │   │   │   └── Empty
  │   │   │   ├── HistogramStat::Empty	[vim monitoring/histogram.cc +81]
  │   │   │   │   └── num
  │   │   │   └── HistogramImpl::Empty	[vim monitoring/histogram.cc +244]
  │   │   │       └── Empty
  │   │   ├── WaitForPendingWrites	[vim db/db_impl/db_impl.h +1549]
  │   │   │   ├── AssertHeld [+]
  │   │   │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │   │       └── AssertHeld
  │   │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │   ├── Unlock [+]
  │   │   │   │   ├── Unlock	[vim env/mock_env.cc +59]
  │   │   │   │   ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │   │   │   │   ├── Unlock	[vim port/win/port_win.h +144]
  │   │   │   │   └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  │   │   │   ├── WriteThread::WaitForMemTableWriters	[vim db/write_thread.cc +783]
  │   │   │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   │   └── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   ├── Lock [+]
  │   │   │   │   ├── Lock	[vim env/mock_env.cc +48]
  │   │   │   │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   │   │   │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   │   │   │   ├── Lock	[vim port/win/port_win.h +137]
  │   │   │   │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  │   │   │   ├── guard	[OUT-OF-TREE]
  │   │   │   └── wait [+]
  │   │   │       ├── wait	[vim util/repeatable_thread.h +83]
  │   │   │       ├── wait	[vim third-party/folly/folly/synchronization/Baton.h +156]
  │   │   │       ├── wait	[vim third-party/folly/folly/synchronization/detail/Sleeper.h +45]
  │   │   │       ├── wait	[vim third-party/folly/folly/synchronization/ParkingLot.h +35]
  │   │   │       └── wait	[vim third-party/folly/folly/synchronization/DistributedMutex-inl.h +1019]
  │   │   ├── DBImpl::ScheduleFlushes	[vim db/db_impl/db_impl_write.cc +1605]
  │   │   │   ├── DBImpl::SelectColumnFamiliesForAtomicFlush	[vim db/db_impl/db_impl_write.cc +1231]
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── IsDropped	[vim db/column_family.h +315]
  │   │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   │   ├── mem
  │   │   │   │   ├── IsEmpty
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── Ref [+]
  │   │   │   │   ├── Ref	[vim cache/lru_cache.h +82]
  │   │   │   │   ├── ClockCacheShard::Ref	[vim cache/clock_cache.cc +450]
  │   │   │   │   ├── ShardedCache::Ref	[vim cache/sharded_cache.cc +59]
  │   │   │   │   ├── LRUCacheShard::Ref	[vim cache/lru_cache.cc +285]
  │   │   │   │   ├── Ref	[vim env/mock_env.cc +41]
  │   │   │   │   ├── Ref	[vim utilities/simulator_cache/sim_cache.cc +215]
  │   │   │   │   ├── Ref	[vim db/column_family.h +280]
  │   │   │   │   ├── SuperVersion::Ref	[vim db/column_family.cc +429]
  │   │   │   │   ├── MemTableListVersion::Ref	[vim db/memtable_list.cc +71]
  │   │   │   │   ├── Ref	[vim db/memtable.h +118]
  │   │   │   │   └── Version::Ref	[vim db/version_set.cc +3033]
  │   │   │   ├── Clear [+]
  │   │   │   │   ├── Clear	[vim util/aligned_buffer.h +115]
  │   │   │   │   ├── OptimisticTransaction::Clear	[vim utilities/transactions/optimistic_transaction.cc +54]
  │   │   │   │   ├── TransactionBaseImpl::Clear	[vim utilities/transactions/transaction_base.cc +47]
  │   │   │   │   ├── PointLockTracker::Clear	[vim utilities/transactions/lock/point/point_lock_tracker.cc +264]
  │   │   │   │   ├── PessimisticTransaction::Clear	[vim utilities/transactions/pessimistic_transaction.cc +106]
  │   │   │   │   ├── WriteUnpreparedTxn::Clear	[vim utilities/transactions/write_unprepared_txn.cc +813]
  │   │   │   │   ├── WriteBatchWithIndex::Rep::Clear	[vim utilities/write_batch_with_index/write_batch_with_index.cc +551]
  │   │   │   │   ├── WriteBatchWithIndex::Clear	[vim utilities/write_batch_with_index/write_batch_with_index.cc +762]
  │   │   │   │   ├── BlockCacheTierMetadata::Clear	[vim utilities/persistent_cache/block_cache_tier_metadata.cc +34]
  │   │   │   │   ├── Clear	[vim utilities/persistent_cache/hash_table.h +157]
  │   │   │   │   ├── Clear	[vim utilities/persistent_cache/hash_table_evictable.h +111]
  │   │   │   │   ├── Clear	[vim table/block_based/block_based_table_builder.cc +537]
  │   │   │   │   ├── Clear	[vim db/dbformat.h +316]
  │   │   │   │   ├── Clear	[vim db/dbformat.h +422]
  │   │   │   │   ├── WriteBatch::Clear	[vim db/write_batch.cc +322]
  │   │   │   │   ├── FlushScheduler::Clear	[vim db/flush_scheduler.cc +78]
  │   │   │   │   ├── Clear	[vim db/internal_stats.h +262]
  │   │   │   │   ├── Clear	[vim db/internal_stats.h +324]
  │   │   │   │   ├── Clear	[vim db/internal_stats.h +464]
  │   │   │   │   ├── Clear	[vim db/internal_stats.h +509]
  │   │   │   │   ├── VersionEdit::Clear	[vim db/version_edit.cc +69]
  │   │   │   │   ├── TrimHistoryScheduler::Clear	[vim db/trim_history_scheduler.cc +46]
  │   │   │   │   ├── AtomicGroupReadBuffer::Clear	[vim db/version_set.cc +3740]
  │   │   │   │   ├── Clear	[vim db/merge_context.h +24]
  │   │   │   │   ├── HistogramWindowingImpl::Clear	[vim monitoring/histogram_windowing.cc +39]
  │   │   │   │   ├── HistogramStat::Clear	[vim monitoring/histogram.cc +70]
  │   │   │   │   └── HistogramImpl::Clear	[vim monitoring/histogram.cc +239]
  │   │   │   ├── TakeNextColumnFamily [+]
  │   │   │   │   ├── FlushScheduler::TakeNextColumnFamily	[vim db/flush_scheduler.cc +36]
  │   │   │   │   └── TrimHistoryScheduler::TakeNextColumnFamily	[vim db/trim_history_scheduler.cc +21]
  │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── DBImpl::MaybeFlushStatsCF	[vim db/db_impl/db_impl_write.cc +1542]
  │   │   │   │   ├── GetColumnFamily
  │   │   │   │   ├── mem
  │   │   │   │   ├── IsEmpty
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── GetLogNumber
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   └── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   ├── WriteThread::EnterUnbatched	[vim db/write_thread.cc +755]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │   │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   │   ├── WriteThread::WaitForMemTableWriters	[vim db/write_thread.cc +783]
  │   │   │   │   └── Lock
  │   │   │   ├── mem [+]
  │   │   │   │   └── mem	[vim db/column_family.h +362]
  │   │   │   ├── IsEmpty [+]
  │   │   │   │   ├── IsEmpty	[vim cache/cache_helpers.h +81]
  │   │   │   │   ├── IsEmpty	[vim utilities/persistent_cache/lrulist.h +106]
  │   │   │   │   ├── IsEmpty	[vim table/block_based/cachable_entry.h +102]
  │   │   │   │   ├── BlockBasedTableBuilder::IsEmpty	[vim table/block_based/block_based_table_builder.cc +1775]
  │   │   │   │   ├── IsEmpty	[vim table/table_builder.h +176]
  │   │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +322]
  │   │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +385]
  │   │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +418]
  │   │   │   │   ├── IsEmpty	[vim db/wal_edit.h +107]
  │   │   │   │   ├── IsEmpty	[vim db/version_builder.cc +91]
  │   │   │   │   ├── IsEmpty	[vim db/memtable.h +326]
  │   │   │   │   ├── AtomicGroupReadBuffer::IsEmpty	[vim db/version_set.cc +3738]
  │   │   │   │   └── IsEmpty	[vim logging/log_buffer.h +29]
  │   │   │   ├── DBImpl::SwitchMemtable	[vim db/db_impl/db_impl_write.cc +1674]
  │   │   │   │   ├── AssertHeld
  │   │   │   │   ├── DBImpl::WriteRecoverableState	[vim db/db_impl/db_impl_write.cc +1180]
  │   │   │   │   ├── prev_log_number	[vim db/version_set.h +1113]
  │   │   │   │   ├── NewFileNumber	[vim db/version_set.h +1055]
  │   │   │   │   ├── GetLatestMutableCFOptions	[vim db/column_family.h +338]
  │   │   │   │   ├── GetEarliestSequenceNumber
  │   │   │   │   ├── num_entries	[vim db/memtable.h +293]
  │   │   │   │   ├── num_deletes	[vim db/memtable.h +300]
  │   │   │   │   ├── DBImpl::GetWalPreallocateBlockSize	[vim db/db_impl/db_impl_write.cc +1843]
  │   │   │   │   ├── CreateWAL	[OUT-OF-TREE]
  │   │   │   │   ├── ColumnFamilyData::ConstructNewMemtable	[vim db/column_family.cc +1047]
  │   │   │   │   ├── NewSuperVersion	[vim db/job_context.h +47]
  │   │   │   │   ├── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   │   ├── pop_front	[OUT-OF-TREE]
  │   │   │   │   ├── Writer::WriteBuffer	[vim db/log_writer.cc +40]
  │   │   │   │   ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │   │   ├── GetName
  │   │   │   │   ├── c_str	[OUT-OF-TREE]
  │   │   │   │   ├── get_log_number
  │   │   │   │   ├── emplace_back	[OUT-OF-TREE]
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   ├── LogFileNumberSize	[vim db/db_impl/db_impl.h +1294]
  │   │   │   │   ├── release
  │   │   │   │   ├── SetBGError
  │   │   │   │   ├── GetBGError	[vim db/error_handler.h +60]
  │   │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   │   ├── GetFirstSequenceNumber	[vim db/memtable.h +332]
  │   │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   │   ├── SetLogNumber
  │   │   │   │   ├── SetCreationSeq	[vim db/memtable.h +351]
  │   │   │   │   ├── LastSequence	[vim db/version_set.h +1063]
  │   │   │   │   ├── SetNextLogNumber	[vim db/memtable.h +363]
  │   │   │   │   ├── Add
  │   │   │   │   ├── mem
  │   │   │   │   ├── Ref
  │   │   │   │   ├── SetMemtable	[vim db/column_family.h +369]
  │   │   │   │   ├── DBImpl::InstallSuperVersionAndScheduleWork	[vim db/db_impl/db_impl_compaction_flush.cc +3255]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── DBImpl::NotifyOnMemTableSealed	[vim db/db_impl/db_impl_write.cc +1655]
  │   │   │   │   ├── Lock
  │   │   │   │   └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   │   ├── ColumnFamilyData::UnrefAndTryDelete	[vim db/column_family.cc +663]
  │   │   │   │   ├── fetch_sub	[OUT-OF-TREE]
  │   │   │   │   ├── Unlock
  │   │   │   │   ├── Lock
  │   │   │   │   ├── Unref
  │   │   │   │   └── Cleanup
  │   │   │   ├── WriteThread::ExitUnbatched	[vim db/write_thread.cc +770]
  │   │   │   │   ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   │   │   └── SetState
  │   │   │   ├── AssignAtomicFlushSeq [+]
  │   │   │   │   ├── AssignAtomicFlushSeq	[vim db/memtable_list.h +356]
  │   │   │   │   └── DBImpl::AssignAtomicFlushSeq	[vim db/db_impl/db_impl_write.cc +1245]
  │   │   │   ├── DBImpl::GenerateFlushRequest	[vim db/db_impl/db_impl_compaction_flush.cc +1683]
  │   │   │   │   ├── GetLatestMemTableID	[vim db/memtable_list.h +348]
  │   │   │   │   └── emplace_back	[OUT-OF-TREE]
  │   │   │   ├── DBImpl::SchedulePendingFlush	[vim db/db_impl/db_impl_compaction_flush.cc +2257]
  │   │   │   │   ├── Ref
  │   │   │   │   ├── SetFlushReason	[vim db/column_family.h +323]
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   └── DBImpl::MaybeScheduleFlushOrCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +2094]
  │   │   │       ├── AssertHeld
  │   │   │       ├── IsRecoveryInProgress	[vim db/error_handler.h +79]
  │   │   │       ├── GetBGJobLimits
  │   │   │       ├── GetBackgroundThreads
  │   │   │       ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │       ├── IsBGWorkStopped	[vim db/error_handler.h +71]
  │   │   │       ├── DBImpl::HasExclusiveManualCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +3173]
  │   │   │       ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │       └── Schedule
  │   │   ├── WriteController::IsStopped	[vim db/write_controller.cc +37]
  │   │   ├── NeedsDelay	[vim db/write_controller.h +53]
  │   │   ├── PERF_TIMER_STOP	[OUT-OF-TREE]
  │   │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │   ├── DBImpl::DelayWrite	[vim db/db_impl/db_impl_write.cc +1436]
  │   │   │   ├── GetDelay [+]
  │   │   │   │   ├── GetDelay	[vim util/stop_watch.h +71]
  │   │   │   │   └── WriteController::GetDelay	[vim db/write_controller.cc +45]
  │   │   │   ├── Unlock [+]
  │   │   │   │   ├── Unlock	[vim env/mock_env.cc +59]
  │   │   │   │   ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │   │   │   │   ├── Unlock	[vim port/win/port_win.h +144]
  │   │   │   │   └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  │   │   │   ├── start_time	[vim util/stop_watch.h +73]
  │   │   │   ├── NeedsDelay	[vim db/write_controller.h +53]
  │   │   │   ├── NowMicros [+]
  │   │   │   │   ├── NowMicros	[vim include/rocksdb/env.h +1357]
  │   │   │   │   ├── NowMicros	[vim env/composite_env_wrapper.h +530]
  │   │   │   │   ├── NowMicros	[vim env/env_posix.cc +240]
  │   │   │   │   ├── MockEnv::NowMicros	[vim env/mock_env.cc +1039]
  │   │   │   │   ├── NowMicros	[vim hdfs/env_hdfs.h +130]
  │   │   │   │   └── WinEnv::NowMicros	[vim port/win/env_win.cc +1449]
  │   │   │   ├── SleepForMicroseconds [+]
  │   │   │   │   ├── SleepForMicroseconds	[vim include/rocksdb/env.h +1361]
  │   │   │   │   ├── SleepForMicroseconds	[vim env/composite_env_wrapper.h +534]
  │   │   │   │   ├── SleepForMicroseconds	[vim env/env_posix.cc +277]
  │   │   │   │   ├── SleepForMicroseconds	[vim hdfs/env_hdfs.h +132]
  │   │   │   │   ├── WinEnvThreads::SleepForMicroseconds	[vim port/win/env_win.cc +1285]
  │   │   │   │   └── WinEnv::SleepForMicroseconds	[vim port/win/env_win.cc +1500]
  │   │   │   ├── Lock [+]
  │   │   │   │   ├── Lock	[vim env/mock_env.cc +48]
  │   │   │   │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   │   │   │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   │   │   │   ├── Lock	[vim port/win/port_win.h +137]
  │   │   │   │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  │   │   │   ├── WriteThread::BeginWriteStall	[vim db/write_thread.cc +334]
  │   │   │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   │   ├── Status::Incomplete
  │   │   │   │   └── SetState
  │   │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │   ├── Wait [+]
  │   │   │   │   ├── TransactionDBCondVarImpl::Wait	[vim utilities/transactions/transaction_db_mutex_impl.cc +93]
  │   │   │   │   ├── CondVar::Wait	[vim port/port_posix.cc +103]
  │   │   │   │   ├── CondVar::Wait	[vim port/win/port_win.cc +71]
  │   │   │   │   └── InstrumentedCondVar::Wait	[vim monitoring/instrumented_mutex.cc +39]
  │   │   │   ├── WriteThread::EndWriteStall	[vim db/write_thread.cc +364]
  │   │   │   │   ├── exchange
  │   │   │   │   └── SignalAll
  │   │   │   ├── AddDBStats	[vim db/internal_stats.h +360]
  │   │   │   │   └── fetch_add	[OUT-OF-TREE]
  │   │   │   ├── RecordTick	[vim monitoring/statistics.h +124]
  │   │   │   │   └── StatisticsImpl::recordTick	[vim monitoring/statistics.cc +334]
  │   │   │   ├── WriteController::IsStopped	[vim db/write_controller.cc +37]
  │   │   │   ├── Status::Incomplete [+]
  │   │   │   │   ├── Incomplete	[vim include/rocksdb/status.h +207]
  │   │   │   │   │   ├── Slice [+]
  │   │   │   │   │   │   ├── Slice::Slice	[vim util/slice.cc +142]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +38]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +41]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +45]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +50]
  │   │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   │   └── Slice	[vim include/rocksdb/slice.h +55]
  │   │   │   │   │   │       ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │       └── strlen	[OUT-OF-TREE]
  │   │   │   │   │   └── Status [+]
  │   │   │   │   │       ├── Status::Status	[vim util/status.cc +60]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── sev_	[OUT-OF-TREE]
  │   │   │   │   │       ├── Status	[vim include/rocksdb/status.h +37]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── state_	[OUT-OF-TREE]
  │   │   │   │   │       ├── Status	[vim include/rocksdb/status.h +519]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── state_	[OUT-OF-TREE]
  │   │   │   │   │       ├── Status	[vim include/rocksdb/status.h +523]
  │   │   │   │   │       │   └── Status
  │   │   │   │   │       ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │   │       ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │   │       └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │   │   │   │           ├── Status
  │   │   │   │   │           └── std::move	[OUT-OF-TREE]
  │   │   │   │   └── Incomplete	[vim include/rocksdb/status.h +210]
  │   │   │   │       └── Status [+]
  │   │   │   │           ├── Status::Status	[vim util/status.cc +60]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   └── sev_	[OUT-OF-TREE]
  │   │   │   │           ├── Status	[vim include/rocksdb/status.h +37]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── state_	[OUT-OF-TREE]
  │   │   │   │           ├── Status	[vim include/rocksdb/status.h +519]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── state_	[OUT-OF-TREE]
  │   │   │   │           ├── Status	[vim include/rocksdb/status.h +523]
  │   │   │   │           │   └── Status
  │   │   │   │           ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │           ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │           │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │           └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │   │   │               ├── Status
  │   │   │   │               └── std::move	[OUT-OF-TREE]
  │   │   │   ├── ToString [+]
  │   │   │   │   ├── Configurable::ToString	[vim options/configurable.cc +458]
  │   │   │   │   │   └── SerializeOptions
  │   │   │   │   ├── Status::ToString	[vim util/status.cc +79]
  │   │   │   │   │   ├── code
  │   │   │   │   │   └── result	[OUT-OF-TREE]
  │   │   │   │   ├── ToString	[vim util/string_util.h +23]
  │   │   │   │   │   └── std::to_string	[OUT-OF-TREE]
  │   │   │   │   ├── Slice::ToString	[vim util/slice.cc +157]
  │   │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   │   └── toHex	[vim util/slice.cc +120]
  │   │   │   │   ├── ToString	[vim include/rocksdb/configurable.h +180]
  │   │   │   │   │   └── ToString
  │   │   │   │   ├── ToString	[vim include/rocksdb/table_properties.h +146]
  │   │   │   │   │   └── Name
  │   │   │   │   ├── ToString	[vim include/rocksdb/utilities/ldb_cmd_execute_result.h +27]
  │   │   │   │   ├── ToString	[vim include/rocksdb/statistics.h +564]
  │   │   │   │   │   └── std::string	[OUT-OF-TREE]
  │   │   │   │   ├── ToString	[vim include/rocksdb/file_system.h +132]
  │   │   │   │   │   └── str	[OUT-OF-TREE]
  │   │   │   │   ├── ToString	[vim utilities/simulator_cache/sim_cache.cc +287]
  │   │   │   │   │   ├── std::to_string	[OUT-OF-TREE]
  │   │   │   │   │   ├── get_miss_counter	[vim utilities/simulator_cache/sim_cache.cc +272]
  │   │   │   │   │   └── get_hit_counter	[vim utilities/simulator_cache/sim_cache.cc +276]
  │   │   │   │   ├── CompactOnDeletionCollectorFactory::ToString	[vim utilities/table_properties_collectors/compact_on_deletion_collector.cc +105]
  │   │   │   │   │   ├── Name
  │   │   │   │   │   └── str	[OUT-OF-TREE]
  │   │   │   │   ├── PersistentCacheConfig::ToString	[vim utilities/persistent_cache/persistent_cache_tier.cc +16]
  │   │   │   │   │   └── c_str	[OUT-OF-TREE]
  │   │   │   │   ├── ToString	[vim table/block_based/filter_block.h +151]
  │   │   │   │   │   └── error_msg	[OUT-OF-TREE]
  │   │   │   │   ├── BlockBasedFilterBlockReader::ToString	[vim table/block_based/block_based_filter_block.cc +306]
  │   │   │   │   │   ├── FilterBlockReaderCommon::GetOrReadFilterBlock	[vim table/block_based/filter_block_reader_common.cc +66]
  │   │   │   │   │   ├── BlockBasedFilterBlockReader::ParseFieldsFromBlock	[vim table/block_based/block_based_filter_block.cc +221]
  │   │   │   │   │   ├── GetValue
  │   │   │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │   │   │   │   ├── s_bo	[OUT-OF-TREE]
  │   │   │   │   │   ├── s_hd	[OUT-OF-TREE]
  │   │   │   │   │   ├── s_fb	[OUT-OF-TREE]
  │   │   │   │   │   ├── DecodeFixed32	[vim util/coding_lean.h +74]
  │   │   │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │   │   │   │   ├── Slice
  │   │   │   │   │   ├── AppendItem
  │   │   │   │   │   └── ToString
  │   │   │   │   ├── TableProperties::ToString	[vim table/table_properties.cc +72]
  │   │   │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │   │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │   │   │   │   └── AppendProperty
  │   │   │   │   ├── BlockHandle::ToString	[vim table/format.cc +82]
  │   │   │   │   │   ├── EncodeTo
  │   │   │   │   │   ├── Slice
  │   │   │   │   │   └── ToString
  │   │   │   │   ├── IndexValue::ToString	[vim table/format.cc +136]
  │   │   │   │   │   ├── EncodeTo
  │   │   │   │   │   ├── Slice
  │   │   │   │   │   └── ToString
  │   │   │   │   ├── Footer::ToString	[vim table/format.cc +262]
  │   │   │   │   │   ├── IsLegacyFooterFormat	[vim table/format.cc +147]
  │   │   │   │   │   ├── ToString
  │   │   │   │   │   └── ROCKSDB_NAMESPACE::ToString
  │   │   │   │   ├── BackupStatistics::ToString	[vim utilities/backupable/backupable_db.cc +81]
  │   │   │   │   │   ├── BackupStatistics::GetNumberSuccessBackup	[vim utilities/backupable/backupable_db.cc +74]
  │   │   │   │   │   └── BackupStatistics::GetNumberFailBackup	[vim utilities/backupable/backupable_db.cc +77]
  │   │   │   │   ├── HistogramWindowingImpl::ToString	[vim monitoring/histogram_windowing.cc +98]
  │   │   │   │   │   └── ToString
  │   │   │   │   ├── PerfContext::ToString	[vim monitoring/perf_context.cc +450]
  │   │   │   │   ├── IOStatsContext::ToString	[vim monitoring/iostats_context.cc +43]
  │   │   │   │   │   ├── IOSTATS_CONTEXT_OUTPUT	[OUT-OF-TREE]
  │   │   │   │   │   ├── str	[OUT-OF-TREE]
  │   │   │   │   │   └── find_last_not_of	[OUT-OF-TREE]
  │   │   │   │   ├── HistogramStat::ToString	[vim monitoring/histogram.cc +182]
  │   │   │   │   │   ├── num
  │   │   │   │   │   ├── Average
  │   │   │   │   │   ├── StandardDeviation
  │   │   │   │   │   ├── min
  │   │   │   │   │   ├── Median
  │   │   │   │   │   ├── max
  │   │   │   │   │   ├── Percentile
  │   │   │   │   │   ├── bucket_at	[vim monitoring/histogram.h +73]
  │   │   │   │   │   ├── BucketLimit	[vim monitoring/histogram.h +42]
  │   │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   ├── HistogramImpl::ToString	[vim monitoring/histogram.cc +279]
  │   │   │   │   │   └── ToString
  │   │   │   │   └── StatisticsImpl::ToString	[vim monitoring/statistics.cc +380]
  │   │   │   │       ├── StatisticsImpl::getTickerCountLocked	[vim monitoring/statistics.cc +265]
  │   │   │   │       ├── StatisticsImpl::getHistogramImplLocked	[vim monitoring/statistics.cc +280]
  │   │   │   │       ├── Data
  │   │   │   │       ├── c_str	[OUT-OF-TREE]
  │   │   │   │       └── shrink_to_fit	[OUT-OF-TREE]
  │   │   │   ├── IsDBStopped	[vim db/error_handler.h +66]
  │   │   │   │   └── severity [+]
  │   │   │   │       └── severity	[vim include/rocksdb/status.h +137]
  │   │   │   └── GetBGError	[vim db/error_handler.h +60]
  │   │   ├── PERF_TIMER_START	[OUT-OF-TREE]
  │   │   └── Wait [+]
  │   │       ├── TransactionDBCondVarImpl::Wait	[vim utilities/transactions/transaction_db_mutex_impl.cc +93]
  │   │       ├── CondVar::Wait	[vim port/port_posix.cc +103]
  │   │       ├── CondVar::Wait	[vim port/win/port_win.cc +71]
  │   │       └── InstrumentedCondVar::Wait	[vim monitoring/instrumented_mutex.cc +39]
  │   ├── PERF_TIMER_START	[OUT-OF-TREE]
  │   ├── WriteThread::EnterAsBatchGroupLeader	[vim db/write_thread.cc +413]
  │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   ├── AllowWriteBatching	[vim utilities/transactions/optimistic_transaction.h +93]
  │   │   ├── ByteSize	[vim db/write_batch_internal.h +138]
  │   │   └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   ├── LastSequence	[vim db/version_set.h +1063]
  │   ├── CheckCallback [+]
  │   │   ├── CheckCallback	[vim table/get_context.h +157]
  │   │   │   └── IsVisible [+]
  │   │   │       ├── IsVisible	[vim db/read_callback.h +25]
  │   │   │       └── DBIter::IsVisible	[vim db/db_iter.cc +1181]
  │   │   ├── CheckCallback	[vim db/write_thread.h +186]
  │   │   │   └── Callback [+]
  │   │   │       ├── Callback	[vim utilities/transactions/optimistic_transaction.h +89]
  │   │   │       ├── Callback	[vim utilities/transactions/write_unprepared_txn_db.h +58]
  │   │   │       ├── Callback	[vim utilities/transactions/write_prepared_txn_db.h +859]
  │   │   │       ├── Callback	[vim utilities/transactions/write_prepared_txn_db.h +923]
  │   │   │       └── Callback	[vim utilities/transactions/write_prepared_txn_db.h +1015]
  │   │   └── CheckCallback	[vim db/memtable.cc +630]
  │   │       └── IsVisible [+]
  │   │           ├── IsVisible	[vim db/read_callback.h +25]
  │   │           └── DBIter::IsVisible	[vim db/db_iter.cc +1181]
  │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   └── DecodeFixed32	[vim util/coding_lean.h +74]
  │   ├── WriteBatchInternal::AppendedByteSize	[vim db/write_batch.cc +2128]
  │   ├── WriteBatchInternal::ByteSize [+]
  │   │   └── ByteSize	[vim db/write_batch_internal.h +138]
  │   ├── UpdateLastSequence	[vim db/write_thread.h +340]
  │   ├── RecordInHistogram	[vim monitoring/statistics.h +110]
  │   │   └── recordInHistogram [+]
  │   │       ├── recordInHistogram	[vim include/rocksdb/statistics.h +552]
  │   │       │   └── measureTime
  │   │       └── StatisticsImpl::recordInHistogram	[vim monitoring/statistics.cc +349]
  │   │           ├── get_stats_level	[vim include/rocksdb/statistics.h +581]
  │   │           ├── Access
  │   │           ├── Add
  │   │           └── recordInHistogram
  │   ├── PERF_TIMER_STOP	[OUT-OF-TREE]
  │   ├── AddDBStats	[vim db/internal_stats.h +360]
  │   │   └── fetch_add	[OUT-OF-TREE]
  │   ├── RecordTick	[vim monitoring/statistics.h +124]
  │   │   └── StatisticsImpl::recordTick	[vim monitoring/statistics.cc +334]
  │   ├── WriteToWAL [+]
  │   │   ├── DBImpl::WriteToWAL	[vim db/db_impl/db_impl_write.cc +1029]
  │   │   │   ├── WriteBatchInternal::Contents
  │   │   │   ├── Lock
  │   │   │   ├── AddRecord
  │   │   │   ├── Unlock
  │   │   │   └── AddSize	[vim db/db_impl/db_impl.h +1295]
  │   │   └── DBImpl::WriteToWAL	[vim db/db_impl/db_impl_write.cc +1062]
  │   │       ├── DBImpl::MergeBatch	[vim db/db_impl/db_impl_write.cc +985]
  │   │       ├── WriteBatchInternal::SetSequence	[vim db/write_batch.cc +755]
  │   │       ├── WriteToWAL
  │   │       ├── file
  │   │       ├── Sync
  │   │       ├── GetWalDir	[vim db/db_impl/db_impl.h +104]
  │   │       ├── Fsync
  │   │       ├── IOOptions	[vim include/rocksdb/file_system.h +89]
  │   │       ├── Clear
  │   │       ├── AddDBStats	[vim db/internal_stats.h +360]
  │   │       └── RecordTick	[vim monitoring/statistics.h +124]
  │   ├── CallbackFailed	[vim db/write_thread.h +224]
  │   ├── DBImpl::IOStatusCheck	[vim db/db_impl/db_impl_write.cc +873]
  │   │   ├── IsBusy	[vim include/rocksdb/status.h +394]
  │   │   ├── IsIncomplete	[vim include/rocksdb/status.h +356]
  │   │   ├── IsIOFenced	[vim include/rocksdb/status.h +494]
  │   │   ├── Lock
  │   │   ├── SetBGError
  │   │   ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   └── Unlock
  │   ├── DBImpl::WriteStatusCheck	[vim db/db_impl/db_impl_write.cc +859]
  │   │   ├── IsIOFenced	[vim include/rocksdb/status.h +494]
  │   │   │   ├── code [+]
  │   │   │   │   └── code	[vim include/rocksdb/status.h +94]
  │   │   │   └── subcode [+]
  │   │   │       └── subcode	[vim include/rocksdb/status.h +120]
  │   │   ├── GetBGError	[vim db/error_handler.h +60]
  │   │   ├── IsBusy	[vim include/rocksdb/status.h +394]
  │   │   │   └── code [+]
  │   │   │       └── code	[vim include/rocksdb/status.h +94]
  │   │   ├── IsIncomplete	[vim include/rocksdb/status.h +356]
  │   │   │   └── code [+]
  │   │   │       └── code	[vim include/rocksdb/status.h +94]
  │   │   ├── Lock [+]
  │   │   │   ├── Lock	[vim env/mock_env.cc +48]
  │   │   │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   │   │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   │   │   ├── Lock	[vim port/win/port_win.h +137]
  │   │   │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  │   │   ├── SetBGError [+]
  │   │   │   ├── ErrorHandler::SetBGError	[vim db/error_handler.cc +247]
  │   │   │   │   ├── AssertHeld
  │   │   │   │   ├── Status::OK
  │   │   │   │   ├── subcode
  │   │   │   │   ├── code
  │   │   │   │   ├── std::make_tuple	[OUT-OF-TREE]
  │   │   │   │   ├── Status
  │   │   │   │   ├── ErrorHandler::OverrideNoSpaceError	[vim db/error_handler.cc +413]
  │   │   │   │   ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │   │   │   ├── severity
  │   │   │   │   ├── Status::NoSpace
  │   │   │   │   └── ErrorHandler::RecoverFromNoSpace	[vim db/error_handler.cc +450]
  │   │   │   └── ErrorHandler::SetBGError	[vim db/error_handler.cc +327]
  │   │   │       ├── AssertHeld
  │   │   │       ├── Status::OK
  │   │   │       ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │       ├── ToString
  │   │   │       ├── c_str	[OUT-OF-TREE]
  │   │   │       ├── DBImpl::DisableFileDeletionsWithLock	[vim db/db_impl/db_impl_files.cc +44]
  │   │   │       ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   │       ├── GetDataLoss	[vim include/rocksdb/io_status.h +63]
  │   │   │       ├── GetRetryable	[vim include/rocksdb/io_status.h +62]
  │   │   │       ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │   │       ├── bg_err	[OUT-OF-TREE]
  │   │   │       ├── severity
  │   │   │       ├── ErrorHandler::StartRecoverFromRetryableBGIOError	[vim db/error_handler.cc +540]
  │   │   │       └── SetBGError
  │   │   ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   └── Unlock [+]
  │   │       ├── Unlock	[vim env/mock_env.cc +59]
  │   │       ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │   │       ├── Unlock	[vim port/win/port_win.h +144]
  │   │       └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  │   ├── Lock [+]
  │   │   ├── Lock	[vim env/mock_env.cc +48]
  │   │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   │   ├── Lock	[vim port/win/port_win.h +137]
  │   │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  │   ├── DBImpl::MarkLogsSynced	[vim db/db_impl/db_impl.cc +1316]
  │   │   ├── AssertHeld [+]
  │   │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │       └── AssertHeld
  │   │   ├── AddWal [+]
  │   │   │   ├── AddWal	[vim db/version_edit.h +456]
  │   │   │   │   ├── WalMetadata	[vim db/wal_edit.h +35]
  │   │   │   │   ├── NumEntries
  │   │   │   │   ├── emplace_back	[OUT-OF-TREE]
  │   │   │   │   └── std::move	[OUT-OF-TREE]
  │   │   │   └── WalSet::AddWal	[vim db/wal_edit.cc +107]
  │   │   │       ├── lower_bound
  │   │   │       ├── HasSyncedSize	[vim db/wal_edit.h +38]
  │   │   │       ├── Status::Corruption
  │   │   │       ├── str	[OUT-OF-TREE]
  │   │   │       ├── SetSyncedSizeInBytes	[vim db/wal_edit.h +40]
  │   │   │       ├── GetSyncedSizeInBytes	[vim db/wal_edit.h +42]
  │   │   │       ├── GetLogNumber
  │   │   │       ├── GetMetadata	[vim db/wal_edit.h +74]
  │   │   │       └── Status::OK
  │   │   ├── WalMetadata	[vim db/wal_edit.h +35]
  │   │   │   └── synced_size_bytes_	[OUT-OF-TREE]
  │   │   ├── file [+]
  │   │   │   ├── file	[vim file/sequence_file_reader.h +51]
  │   │   │   ├── file	[vim file/random_access_file_reader.h +134]
  │   │   │   ├── file	[vim db/log_writer.h +85]
  │   │   │   ├── file	[vim db/log_writer.h +86]
  │   │   │   ├── file	[vim db/log_reader.h +94]
  │   │   │   ├── file	[vim db/blob/blob_log_writer.h +62]
  │   │   │   └── file	[vim db/blob/blob_log_writer.h +64]
  │   │   ├── GetFileSize [+]
  │   │   │   ├── GetFileSize	[vim file/writable_file_writer.h +219]
  │   │   │   ├── GetFileSize	[vim include/rocksdb/env.h +851]
  │   │   │   ├── GetFileSize	[vim include/rocksdb/env.h +1292]
  │   │   │   │   └── GetFileSize
  │   │   │   ├── GetFileSize	[vim include/rocksdb/env.h +1545]
  │   │   │   │   └── GetFileSize
  │   │   │   ├── GetFileSize	[vim include/rocksdb/utilities/env_mirror.h +118]
  │   │   │   │   └── GetFileSize
  │   │   │   ├── GetFileSize	[vim include/rocksdb/file_system.h +835]
  │   │   │   ├── GetFileSize	[vim include/rocksdb/file_system.h +1142]
  │   │   │   │   └── GetFileSize
  │   │   │   ├── GetFileSize	[vim include/rocksdb/file_system.h +1367]
  │   │   │   │   └── GetFileSize
  │   │   │   ├── TraceWriterJniCallback::GetFileSize	[vim java/rocksjni/trace_writer_jnicallback.cc +93]
  │   │   │   │   ├── getJniEnv
  │   │   │   │   ├── CallLongMethod	[OUT-OF-TREE]
  │   │   │   │   ├── ExceptionCheck	[OUT-OF-TREE]
  │   │   │   │   ├── ExceptionDescribe	[OUT-OF-TREE]
  │   │   │   │   └── releaseJniEnv
  │   │   │   ├── GetFileSize	[vim env/fs_posix.cc +670]
  │   │   │   │   ├── stat	[OUT-OF-TREE]
  │   │   │   │   ├── c_str	[OUT-OF-TREE]
  │   │   │   │   ├── IOError
  │   │   │   │   └── IOStatus::OK
  │   │   │   ├── FileSystemTracingWrapper::GetFileSize	[vim env/file_system_tracer.cc +170]
  │   │   │   │   ├── timer	[OUT-OF-TREE]
  │   │   │   │   ├── Start
  │   │   │   │   ├── target
  │   │   │   │   ├── GetFileSize
  │   │   │   │   ├── ElapsedNanos	[vim util/stop_watch.h +100]
  │   │   │   │   ├── io_record	[OUT-OF-TREE]
  │   │   │   │   ├── NowNanos
  │   │   │   │   ├── ToString
  │   │   │   │   └── WriteIOOp
  │   │   │   ├── FSWritableFileTracingWrapper::GetFileSize	[vim env/file_system_tracer.cc +348]
  │   │   │   │   ├── timer	[OUT-OF-TREE]
  │   │   │   │   ├── Start
  │   │   │   │   ├── target
  │   │   │   │   ├── GetFileSize
  │   │   │   │   ├── ElapsedNanos	[vim util/stop_watch.h +100]
  │   │   │   │   ├── io_record	[OUT-OF-TREE]
  │   │   │   │   ├── NowNanos
  │   │   │   │   └── WriteIOOp
  │   │   │   ├── PosixMmapFile::GetFileSize	[vim env/io_posix.cc +1085]
  │   │   │   ├── PosixWritableFile::GetFileSize	[vim env/io_posix.cc +1288]
  │   │   │   ├── HdfsEnv::GetFileSize	[vim env/env_hdfs.cc +548]
  │   │   │   │   ├── hdfsGetPathInfo	[OUT-OF-TREE]
  │   │   │   │   ├── c_str	[OUT-OF-TREE]
  │   │   │   │   ├── hdfsFreeFileInfo	[OUT-OF-TREE]
  │   │   │   │   ├── Status::OK
  │   │   │   │   └── IOError
  │   │   │   ├── GetFileSize	[vim env/composite_env_wrapper.h +164]
  │   │   │   │   └── GetFileSize
  │   │   │   ├── GetFileSize	[vim env/composite_env_wrapper.h +430]
  │   │   │   │   └── GetFileSize
  │   │   │   ├── GetFileSize	[vim env/composite_env_wrapper.h +782]
  │   │   │   │   └── GetFileSize
  │   │   │   ├── GetFileSize	[vim env/composite_env_wrapper.h +1014]
  │   │   │   │   ├── status_to_io_status	[vim include/rocksdb/io_status.h +254]
  │   │   │   │   └── GetFileSize
  │   │   │   ├── GetFileSize	[vim env/env_chroot.cc +196]
  │   │   │   │   ├── EncodePath	[vim env/env_chroot.cc +284]
  │   │   │   │   └── EnvWrapper::GetFileSize
  │   │   │   ├── EncryptedWritableFile::GetFileSize	[vim env/env_encryption.cc +304]
  │   │   │   │   └── GetFileSize
  │   │   │   ├── GetFileSize	[vim env/env_encryption.cc +830]
  │   │   │   │   ├── EnvWrapper::GetFileSize
  │   │   │   │   ├── GetReadableProvider	[vim env/env_encryption.cc +432]
  │   │   │   │   └── CTREncryptionProvider::GetPrefixLength	[vim env/env_encryption.cc +1012]
  │   │   │   ├── GetFileSize	[vim env/mock_env.cc +352]
  │   │   │   │   └── Size
  │   │   │   ├── MockFileSystem::GetFileSize	[vim env/mock_env.cc +869]
  │   │   │   │   ├── NormalizeMockPath	[vim env/mock_env.cc +601]
  │   │   │   │   ├── IOStatus::PathNotFound
  │   │   │   │   ├── Size
  │   │   │   │   └── IOStatus::OK
  │   │   │   ├── GetFileSize	[vim utilities/env_timed.cc +99]
  │   │   │   │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │   │   │   └── EnvWrapper::GetFileSize
  │   │   │   ├── FileTraceWriter::GetFileSize	[vim utilities/trace/file_trace_reader_writer.cc +90]
  │   │   │   │   └── GetFileSize
  │   │   │   ├── GetFileSize	[vim utilities/env_mirror.cc +159]
  │   │   │   │   └── GetFileSize
  │   │   │   ├── GetFileSize	[vim utilities/env_librados.cc +463]
  │   │   │   │   └── LOG_DEBUG	[OUT-OF-TREE]
  │   │   │   ├── EnvLibrados::GetFileSize	[vim utilities/env_librados.cc +1280]
  │   │   │   │   ├── split
  │   │   │   │   ├── EnvLibrados::_GetFid	[vim utilities/env_librados.cc +724]
  │   │   │   │   ├── EnvLibrados::_GetIoctx	[vim utilities/env_librados.cc +847]
  │   │   │   │   ├── stat	[OUT-OF-TREE]
  │   │   │   │   ├── err_to_status	[vim utilities/env_librados.cc +41]
  │   │   │   │   ├── Status::OK
  │   │   │   │   ├── LOG_DEBUG	[OUT-OF-TREE]
  │   │   │   │   ├── ToString
  │   │   │   │   └── c_str	[OUT-OF-TREE]
  │   │   │   ├── GetFileSize	[vim utilities/blob_db/blob_file.h +185]
  │   │   │   ├── GetFileSize	[vim db/version_edit.h +139]
  │   │   │   ├── WinMmapFile::GetFileSize	[vim port/win/io_win.cc +528]
  │   │   │   ├── WinWritableFile::GetFileSize	[vim port/win/io_win.cc +978]
  │   │   │   │   └── GetFileNextWriteOffset	[vim port/win/io_win.h +319]
  │   │   │   └── WinEnv::GetFileSize	[vim port/win/env_win.cc +1398]
  │   │   │       └── GetFileSize
  │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   ├── ReleaseWriter	[vim db/db_impl/db_impl.h +1306]
  │   │   ├── IsWalAddition	[vim db/version_edit.h +464]
  │   │   ├── LogAndApplyToDefaultColumnFamily	[vim db/version_set.h +920]
  │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   ├── ColumnFamilySet::GetDefault	[vim db/column_family.cc +1462]
  │   │   │   ├── GetLatestMutableCFOptions	[vim db/column_family.h +338]
  │   │   │   └── LogAndApply [+]
  │   │   │       ├── LogAndApply	[vim db/version_set.h +937]
  │   │   │       ├── LogAndApply	[vim db/version_set.h +956]
  │   │   │       ├── LogAndApply	[vim db/version_set.h +1422]
  │   │   │       └── VersionSet::LogAndApply	[vim db/version_set.cc +4323]
  │   │   ├── IsIOError	[vim include/rocksdb/status.h +340]
  │   │   │   └── code [+]
  │   │   │       └── code	[vim include/rocksdb/status.h +94]
  │   │   ├── SetBGError [+]
  │   │   │   ├── ErrorHandler::SetBGError	[vim db/error_handler.cc +247]
  │   │   │   │   ├── AssertHeld
  │   │   │   │   ├── Status::OK
  │   │   │   │   ├── subcode
  │   │   │   │   ├── code
  │   │   │   │   ├── std::make_tuple	[OUT-OF-TREE]
  │   │   │   │   ├── Status
  │   │   │   │   ├── ErrorHandler::OverrideNoSpaceError	[vim db/error_handler.cc +413]
  │   │   │   │   ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │   │   │   ├── severity
  │   │   │   │   ├── Status::NoSpace
  │   │   │   │   └── ErrorHandler::RecoverFromNoSpace	[vim db/error_handler.cc +450]
  │   │   │   └── ErrorHandler::SetBGError	[vim db/error_handler.cc +327]
  │   │   │       ├── AssertHeld
  │   │   │       ├── Status::OK
  │   │   │       ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │       ├── ToString
  │   │   │       ├── c_str	[OUT-OF-TREE]
  │   │   │       ├── DBImpl::DisableFileDeletionsWithLock	[vim db/db_impl/db_impl_files.cc +44]
  │   │   │       ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   │       ├── GetDataLoss	[vim include/rocksdb/io_status.h +63]
  │   │   │       ├── GetRetryable	[vim include/rocksdb/io_status.h +62]
  │   │   │       ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │   │       ├── bg_err	[OUT-OF-TREE]
  │   │   │       ├── severity
  │   │   │       ├── ErrorHandler::StartRecoverFromRetryableBGIOError	[vim db/error_handler.cc +540]
  │   │   │       └── SetBGError
  │   │   ├── io_status [+]
  │   │   │   ├── io_status	[vim table/plain/plain_table_builder.h +66]
  │   │   │   ├── io_status	[vim table/mock_table.cc +162]
  │   │   │   │   └── IOStatus::OK
  │   │   │   ├── io_status	[vim table/cuckoo/cuckoo_table_builder.h +49]
  │   │   │   ├── BlockBasedTableBuilder::io_status	[vim table/block_based/block_based_table_builder.cc +1338]
  │   │   │   │   └── GetIOStatus	[vim table/block_based/block_based_table_builder.cc +358]
  │   │   │   ├── io_status	[vim db/flush_job.h +96]
  │   │   │   ├── io_status	[vim db/compaction/compaction_job.h +105]
  │   │   │   └── io_status	[vim db/version_set.h +1203]
  │   │   └── SignalAll [+]
  │   │       ├── CondVar::SignalAll	[vim port/port_posix.cc +138]
  │   │       │   ├── PthreadCall
  │   │       │   └── pthread_cond_broadcast	[OUT-OF-TREE]
  │   │       ├── CondVar::SignalAll	[vim port/win/port_win.cc +130]
  │   │       │   └── notify_all	[OUT-OF-TREE]
  │   │       └── SignalAll	[vim monitoring/instrumented_mutex.h +85]
  │   │           └── SignalAll
  │   ├── DBImpl::MarkLogsNotSynced	[vim db/db_impl/db_impl.cc +1355]
  │   │   ├── AssertHeld [+]
  │   │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │       └── AssertHeld
  │   │   └── SignalAll [+]
  │   │       ├── CondVar::SignalAll	[vim port/port_posix.cc +138]
  │   │       │   ├── PthreadCall
  │   │       │   └── pthread_cond_broadcast	[OUT-OF-TREE]
  │   │       ├── CondVar::SignalAll	[vim port/win/port_win.cc +130]
  │   │       │   └── notify_all	[OUT-OF-TREE]
  │   │       └── SignalAll	[vim monitoring/instrumented_mutex.h +85]
  │   │           └── SignalAll
  │   ├── Unlock [+]
  │   │   ├── Unlock	[vim env/mock_env.cc +59]
  │   │   ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │   │   ├── Unlock	[vim port/win/port_win.h +144]
  │   │   └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  │   ├── WriteThread::ExitAsBatchGroupLeader	[vim db/write_thread.cc +628]
  │   │   ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   ├── WriteThread::CompleteFollower	[vim db/write_thread.cc +320]
  │   │   │   └── SetState [+]
  │   │   │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │   │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   │   ├── ShouldWriteToMemtable	[vim db/write_thread.h +228]
  │   │   │   └── CallbackFailed	[vim db/write_thread.h +224]
  │   │   ├── WriteThread::CompleteLeader	[vim db/write_thread.cc +305]
  │   │   │   └── SetState [+]
  │   │   │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │   │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   │   ├── WriteThread::LinkGroup	[vim db/write_thread.cc +257]
  │   │   │   └── compare_exchange_weak	[OUT-OF-TREE]
  │   │   ├── WriteThread::FindNextLeader	[vim db/write_thread.cc +294]
  │   │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   ├── port::AsmVolatilePause [+]
  │   │   │   │   ├── AsmVolatilePause	[vim port/win/port_win.h +285]
  │   │   │   │   └── AsmVolatilePause	[vim port/port_posix.h +166]
  │   │   │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │   │   ├── Random::GetTLSInstance	[vim util/random.cc +25]
  │   │   │   │   ├── std::hash
  │   │   │   │   ├── std::this_thread::get_id
  │   │   │   │   └── Random	[vim util/random.h +39]
  │   │   │   ├── OneIn [+]
  │   │   │   │   ├── OneIn	[vim util/random.h +69]
  │   │   │   │   ├── OneIn	[vim util/random.h +131]
  │   │   │   │   └── OneIn	[vim util/random.h +163]
  │   │   │   ├── std::this_thread::yield	[OUT-OF-TREE]
  │   │   │   ├── std::chrono::steady_clock::now	[OUT-OF-TREE]
  │   │   │   ├── std::chrono::microseconds	[OUT-OF-TREE]
  │   │   │   ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │   └── WriteThread::BlockingAwaitState	[vim db/write_thread.cc +34]
  │   │   │       ├── CreateMutex	[vim db/write_thread.h +193]
  │   │   │       ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   │       ├── guard	[OUT-OF-TREE]
  │   │   │       ├── StateMutex	[vim db/write_thread.h +238]
  │   │   │       ├── StateCV	[vim db/write_thread.h +243]
  │   │   │       └── wait
  │   │   ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   └── SetState [+]
  │   │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   ├── WriteThread::EnterAsMemTableWriter	[vim db/write_thread.cc +493]
  │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   ├── WriteBatch::HasMerge	[vim db/write_batch.cc +378]
  │   │   │   └── WriteBatch::ComputeContentFlags	[vim db/write_batch.cc +339]
  │   │   │       ├── Iterate
  │   │   │       └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   ├── WriteBatchInternal::ByteSize [+]
  │   │   │   └── ByteSize	[vim db/write_batch_internal.h +138]
  │   │   └── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │       └── DecodeFixed32	[vim util/coding_lean.h +74]
  │   ├── WriteThread::LaunchParallelMemTableWriters	[vim db/write_thread.cc +586]
  │   │   └── SetState [+]
  │   │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   ├── ShouldWriteToMemtable	[vim db/write_thread.h +228]
  │   │   └── CallbackFailed	[vim db/write_thread.h +224]
  │   ├── column_family_memtables	[OUT-OF-TREE]
  │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   ├── WriteBatchInternal::InsertInto [+]
  │   │   ├── WriteBatchInternal::InsertInto	[vim db/write_batch.cc +2012]
  │   │   │   ├── inserter	[OUT-OF-TREE]
  │   │   │   ├── CallbackFailed	[vim db/write_thread.h +224]
  │   │   │   ├── ShouldWriteToMemtable	[vim db/write_thread.h +228]
  │   │   │   │   └── CallbackFailed	[vim db/write_thread.h +224]
  │   │   │   ├── MaybeAdvanceSeq	[vim db/write_batch.cc +1356]
  │   │   │   ├── WriteBatchInternal::SetSequence	[vim db/write_batch.cc +755]
  │   │   │   │   └── EncodeFixed64	[vim util/coding_lean.h +44]
  │   │   │   ├── set_log_number_ref	[vim db/write_batch.cc +1362]
  │   │   │   ├── Iterate [+]
  │   │   │   │   ├── WriteBatch::Iterate	[vim db/write_batch.cc +515]
  │   │   │   │   │   ├── Status::Corruption
  │   │   │   │   │   └── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   │   ├── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   │   │   ├── input
  │   │   │   │   │   ├── Continue
  │   │   │   │   │   ├── ReadRecordFromWriteBatch	[vim db/write_batch.cc +415]
  │   │   │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │   │   │   │   ├── PutCF
  │   │   │   │   │   ├── DeleteCF
  │   │   │   │   │   ├── SingleDeleteCF
  │   │   │   │   │   ├── DeleteRangeCF
  │   │   │   │   │   ├── MergeCF
  │   │   │   │   │   ├── PutBlobIndexCF
  │   │   │   │   │   ├── LogData
  │   │   │   │   │   ├── MarkBeginPrepare
  │   │   │   │   │   ├── WriteAfterCommit
  │   │   │   │   │   ├── WriteBeforePrepare
  │   │   │   │   │   ├── Status::NotSupported
  │   │   │   │   │   ├── MarkEndPrepare
  │   │   │   │   │   ├── MarkCommit
  │   │   │   │   │   ├── MarkRollback
  │   │   │   │   │   ├── MarkNoop
  │   │   │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │   │   │   ├── Status::Corruption
  │   │   │   │   │   └── Status::OK
  │   │   │   │   └── VersionEditHandlerBase::Iterate	[vim db/version_edit_handler.cc +18]
  │   │   │   │       ├── Initialize
  │   │   │   │       ├── Reader::LastRecordEnd	[vim db/log_reader.cc +234]
  │   │   │   │       ├── ReadRecord
  │   │   │   │       ├── DecodeFrom
  │   │   │   │       ├── AtomicGroupReadBuffer::AddEdit	[vim db/version_set.cc +3700]
  │   │   │   │       ├── AtomicGroupReadBuffer::IsFull	[vim db/version_set.cc +3734]
  │   │   │   │       ├── replay_buffer
  │   │   │   │       ├── ApplyVersionEdit
  │   │   │   │       ├── Clear
  │   │   │   │       ├── CheckIterationResult
  │   │   │   │       └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │   ├── sequence [+]
  │   │   │   │   └── sequence	[vim db/write_batch.cc +1364]
  │   │   │   └── Status::OK [+]
  │   │   │       ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │   │       │   └── IOStatus
  │   │   │       └── OK	[vim include/rocksdb/status.h +153]
  │   │   │           └── Status
  │   │   ├── WriteBatchInternal::InsertInto	[vim db/write_batch.cc +2045]
  │   │   │   ├── ShouldWriteToMemtable	[vim db/write_thread.h +228]
  │   │   │   │   └── CallbackFailed	[vim db/write_thread.h +224]
  │   │   │   ├── inserter	[OUT-OF-TREE]
  │   │   │   ├── WriteBatchInternal::SetSequence	[vim db/write_batch.cc +755]
  │   │   │   │   └── EncodeFixed64	[vim util/coding_lean.h +44]
  │   │   │   ├── set_log_number_ref	[vim db/write_batch.cc +1362]
  │   │   │   ├── Iterate [+]
  │   │   │   │   ├── WriteBatch::Iterate	[vim db/write_batch.cc +515]
  │   │   │   │   │   ├── Status::Corruption
  │   │   │   │   │   └── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   │   ├── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   │   │   ├── input
  │   │   │   │   │   ├── Continue
  │   │   │   │   │   ├── ReadRecordFromWriteBatch	[vim db/write_batch.cc +415]
  │   │   │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │   │   │   │   ├── PutCF
  │   │   │   │   │   ├── DeleteCF
  │   │   │   │   │   ├── SingleDeleteCF
  │   │   │   │   │   ├── DeleteRangeCF
  │   │   │   │   │   ├── MergeCF
  │   │   │   │   │   ├── PutBlobIndexCF
  │   │   │   │   │   ├── LogData
  │   │   │   │   │   ├── MarkBeginPrepare
  │   │   │   │   │   ├── WriteAfterCommit
  │   │   │   │   │   ├── WriteBeforePrepare
  │   │   │   │   │   ├── Status::NotSupported
  │   │   │   │   │   ├── MarkEndPrepare
  │   │   │   │   │   ├── MarkCommit
  │   │   │   │   │   ├── MarkRollback
  │   │   │   │   │   ├── MarkNoop
  │   │   │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │   │   │   ├── Status::Corruption
  │   │   │   │   │   └── Status::OK
  │   │   │   │   └── VersionEditHandlerBase::Iterate	[vim db/version_edit_handler.cc +18]
  │   │   │   │       ├── Initialize
  │   │   │   │       ├── Reader::LastRecordEnd	[vim db/log_reader.cc +234]
  │   │   │   │       ├── ReadRecord
  │   │   │   │       ├── DecodeFrom
  │   │   │   │       ├── AtomicGroupReadBuffer::AddEdit	[vim db/version_set.cc +3700]
  │   │   │   │       ├── AtomicGroupReadBuffer::IsFull	[vim db/version_set.cc +3734]
  │   │   │   │       ├── replay_buffer
  │   │   │   │       ├── ApplyVersionEdit
  │   │   │   │       ├── Clear
  │   │   │   │       ├── CheckIterationResult
  │   │   │   │       └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │   ├── sequence [+]
  │   │   │   │   └── sequence	[vim db/write_batch.cc +1364]
  │   │   │   └── PostProcess	[vim db/write_batch.cc +1366]
  │   │   │       ├── GetPostMap	[vim db/write_batch.cc +1262]
  │   │   │       └── BatchPostProcess	[vim db/memtable.h +279]
  │   │   └── WriteBatchInternal::InsertInto	[vim db/write_batch.cc +2072]
  │   │       ├── inserter	[OUT-OF-TREE]
  │   │       ├── WriteBatchInternal::Sequence	[vim db/write_batch.cc +751]
  │   │       │   ├── SequenceNumber	[OUT-OF-TREE]
  │   │       │   └── DecodeFixed64	[vim util/coding_lean.h +88]
  │   │       ├── Iterate [+]
  │   │       │   ├── WriteBatch::Iterate	[vim db/write_batch.cc +515]
  │   │       │   │   ├── Status::Corruption
  │   │       │   │   └── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │       │   ├── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │       │   │   ├── input
  │   │       │   │   ├── Continue
  │   │       │   │   ├── ReadRecordFromWriteBatch	[vim db/write_batch.cc +415]
  │   │       │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │       │   │   ├── PutCF
  │   │       │   │   ├── DeleteCF
  │   │       │   │   ├── SingleDeleteCF
  │   │       │   │   ├── DeleteRangeCF
  │   │       │   │   ├── MergeCF
  │   │       │   │   ├── PutBlobIndexCF
  │   │       │   │   ├── LogData
  │   │       │   │   ├── MarkBeginPrepare
  │   │       │   │   ├── WriteAfterCommit
  │   │       │   │   ├── WriteBeforePrepare
  │   │       │   │   ├── Status::NotSupported
  │   │       │   │   ├── MarkEndPrepare
  │   │       │   │   ├── MarkCommit
  │   │       │   │   ├── MarkRollback
  │   │       │   │   ├── MarkNoop
  │   │       │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │       │   │   ├── Status::Corruption
  │   │       │   │   └── Status::OK
  │   │       │   └── VersionEditHandlerBase::Iterate	[vim db/version_edit_handler.cc +18]
  │   │       │       ├── Initialize
  │   │       │       ├── Reader::LastRecordEnd	[vim db/log_reader.cc +234]
  │   │       │       ├── ReadRecord
  │   │       │       ├── DecodeFrom
  │   │       │       ├── AtomicGroupReadBuffer::AddEdit	[vim db/version_set.cc +3700]
  │   │       │       ├── AtomicGroupReadBuffer::IsFull	[vim db/version_set.cc +3734]
  │   │       │       ├── replay_buffer
  │   │       │       ├── ApplyVersionEdit
  │   │       │       ├── Clear
  │   │       │       ├── CheckIterationResult
  │   │       │       └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │       ├── sequence [+]
  │   │       │   └── sequence	[vim db/write_batch.cc +1364]
  │   │       └── PostProcess	[vim db/write_batch.cc +1366]
  │   │           ├── GetPostMap	[vim db/write_batch.cc +1262]
  │   │           └── BatchPostProcess	[vim db/memtable.h +279]
  │   ├── WriteThread::CompleteParallelMemTableWriter	[vim db/write_thread.cc +596]
  │   │   ├── guard	[OUT-OF-TREE]
  │   │   ├── StateMutex	[vim db/write_thread.h +238]
  │   │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   ├── port::AsmVolatilePause [+]
  │   │   │   │   ├── AsmVolatilePause	[vim port/win/port_win.h +285]
  │   │   │   │   └── AsmVolatilePause	[vim port/port_posix.h +166]
  │   │   │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │   │   ├── Random::GetTLSInstance	[vim util/random.cc +25]
  │   │   │   │   ├── std::hash
  │   │   │   │   ├── std::this_thread::get_id
  │   │   │   │   └── Random	[vim util/random.h +39]
  │   │   │   ├── OneIn [+]
  │   │   │   │   ├── OneIn	[vim util/random.h +69]
  │   │   │   │   ├── OneIn	[vim util/random.h +131]
  │   │   │   │   └── OneIn	[vim util/random.h +163]
  │   │   │   ├── std::this_thread::yield	[OUT-OF-TREE]
  │   │   │   ├── std::chrono::steady_clock::now	[OUT-OF-TREE]
  │   │   │   ├── std::chrono::microseconds	[OUT-OF-TREE]
  │   │   │   ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │   └── WriteThread::BlockingAwaitState	[vim db/write_thread.cc +34]
  │   │   │       ├── CreateMutex	[vim db/write_thread.h +193]
  │   │   │       ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   │       ├── guard	[OUT-OF-TREE]
  │   │   │       ├── StateMutex	[vim db/write_thread.h +238]
  │   │   │       ├── StateCV	[vim db/write_thread.h +243]
  │   │   │       └── wait
  │   │   └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   ├── DBImpl::MemTableInsertStatusCheck	[vim db/db_impl/db_impl_write.cc +887]
  │   │   ├── Lock [+]
  │   │   │   ├── Lock	[vim env/mock_env.cc +48]
  │   │   │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   │   │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   │   │   ├── Lock	[vim port/win/port_win.h +137]
  │   │   │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  │   │   ├── IsBGWorkStopped	[vim db/error_handler.h +71]
  │   │   │   └── severity [+]
  │   │   │       └── severity	[vim include/rocksdb/status.h +137]
  │   │   ├── SetBGError [+]
  │   │   │   ├── ErrorHandler::SetBGError	[vim db/error_handler.cc +247]
  │   │   │   │   ├── AssertHeld
  │   │   │   │   ├── Status::OK
  │   │   │   │   ├── subcode
  │   │   │   │   ├── code
  │   │   │   │   ├── std::make_tuple	[OUT-OF-TREE]
  │   │   │   │   ├── Status
  │   │   │   │   ├── ErrorHandler::OverrideNoSpaceError	[vim db/error_handler.cc +413]
  │   │   │   │   ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │   │   │   ├── severity
  │   │   │   │   ├── Status::NoSpace
  │   │   │   │   └── ErrorHandler::RecoverFromNoSpace	[vim db/error_handler.cc +450]
  │   │   │   └── ErrorHandler::SetBGError	[vim db/error_handler.cc +327]
  │   │   │       ├── AssertHeld
  │   │   │       ├── Status::OK
  │   │   │       ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │       ├── ToString
  │   │   │       ├── c_str	[OUT-OF-TREE]
  │   │   │       ├── DBImpl::DisableFileDeletionsWithLock	[vim db/db_impl/db_impl_files.cc +44]
  │   │   │       ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   │       ├── GetDataLoss	[vim include/rocksdb/io_status.h +63]
  │   │   │       ├── GetRetryable	[vim include/rocksdb/io_status.h +62]
  │   │   │       ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │   │       ├── bg_err	[OUT-OF-TREE]
  │   │   │       ├── severity
  │   │   │       ├── ErrorHandler::StartRecoverFromRetryableBGIOError	[vim db/error_handler.cc +540]
  │   │   │       └── SetBGError
  │   │   ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   └── Unlock [+]
  │   │       ├── Unlock	[vim env/mock_env.cc +59]
  │   │       ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │   │       ├── Unlock	[vim port/win/port_win.h +144]
  │   │       └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  │   ├── SetLastSequence [+]
  │   │   ├── SetLastSequence	[vim db/version_edit.h +362]
  │   │   └── SetLastSequence	[vim db/version_set.h +1078]
  │   ├── WriteThread::ExitAsMemTableWriter	[vim db/write_thread.cc +553]
  │   │   ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   └── SetState [+]
  │   │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   └── FinalStatus	[vim db/write_thread.h +205]
  ├── write_sw	[OUT-OF-TREE]
  ├── WriteThread::JoinBatchGroup	[vim db/write_thread.cc +379]
  │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   ├── Status::Incomplete [+]
  │   │   │   ├── Incomplete	[vim include/rocksdb/status.h +207]
  │   │   │   │   ├── Slice [+]
  │   │   │   │   │   ├── Slice::Slice	[vim util/slice.cc +142]
  │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +38]
  │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +41]
  │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +45]
  │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +50]
  │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   └── Slice	[vim include/rocksdb/slice.h +55]
  │   │   │   │   │       ├── data_	[OUT-OF-TREE]
  │   │   │   │   │       └── strlen	[OUT-OF-TREE]
  │   │   │   │   └── Status [+]
  │   │   │   │       ├── Status::Status	[vim util/status.cc +60]
  │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │       │   └── sev_	[OUT-OF-TREE]
  │   │   │   │       ├── Status	[vim include/rocksdb/status.h +37]
  │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │       │   └── state_	[OUT-OF-TREE]
  │   │   │   │       ├── Status	[vim include/rocksdb/status.h +519]
  │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │       │   └── state_	[OUT-OF-TREE]
  │   │   │   │       ├── Status	[vim include/rocksdb/status.h +523]
  │   │   │   │       │   └── Status
  │   │   │   │       ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │       ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │       └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │   │   │           ├── Status
  │   │   │   │           └── std::move	[OUT-OF-TREE]
  │   │   │   └── Incomplete	[vim include/rocksdb/status.h +210]
  │   │   │       └── Status [+]
  │   │   │           ├── Status::Status	[vim util/status.cc +60]
  │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │           │   └── sev_	[OUT-OF-TREE]
  │   │   │           ├── Status	[vim include/rocksdb/status.h +37]
  │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │           │   └── state_	[OUT-OF-TREE]
  │   │   │           ├── Status	[vim include/rocksdb/status.h +519]
  │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │           │   └── state_	[OUT-OF-TREE]
  │   │   │           ├── Status	[vim include/rocksdb/status.h +523]
  │   │   │           │   └── Status
  │   │   │           ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │           │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │           ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │           │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │           └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │   │               ├── Status
  │   │   │               └── std::move	[OUT-OF-TREE]
  │   │   ├── SetState [+]
  │   │   │   ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │   │   └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   │   ├── Wait [+]
  │   │   │   ├── TransactionDBCondVarImpl::Wait	[vim utilities/transactions/transaction_db_mutex_impl.cc +93]
  │   │   │   ├── CondVar::Wait	[vim port/port_posix.cc +103]
  │   │   │   ├── CondVar::Wait	[vim port/win/port_win.cc +71]
  │   │   │   └── InstrumentedCondVar::Wait	[vim monitoring/instrumented_mutex.cc +39]
  │   │   └── compare_exchange_weak	[OUT-OF-TREE]
  │   ├── SetState [+]
  │   │   ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │   └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   ├── port::AsmVolatilePause [+]
  │   │   │   ├── AsmVolatilePause	[vim port/win/port_win.h +285]
  │   │   │   └── AsmVolatilePause	[vim port/port_posix.h +166]
  │   │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │   ├── Random::GetTLSInstance	[vim util/random.cc +25]
  │   │   │   ├── std::hash
  │   │   │   ├── std::this_thread::get_id
  │   │   │   └── Random	[vim util/random.h +39]
  │   │   ├── OneIn [+]
  │   │   │   ├── OneIn	[vim util/random.h +69]
  │   │   │   ├── OneIn	[vim util/random.h +131]
  │   │   │   └── OneIn	[vim util/random.h +163]
  │   │   ├── std::this_thread::yield	[OUT-OF-TREE]
  │   │   ├── std::chrono::steady_clock::now	[OUT-OF-TREE]
  │   │   ├── std::chrono::microseconds	[OUT-OF-TREE]
  │   │   ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   └── WriteThread::BlockingAwaitState	[vim db/write_thread.cc +34]
  │   │       ├── CreateMutex	[vim db/write_thread.h +193]
  │   │       ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │       ├── guard	[OUT-OF-TREE]
  │   │       ├── StateMutex	[vim db/write_thread.h +238]
  │   │       ├── StateCV	[vim db/write_thread.h +243]
  │   │       └── wait
  │   └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  ├── WriteThread::ExitAsBatchGroupFollower	[vim db/write_thread.cc +616]
  │   ├── WriteThread::ExitAsBatchGroupLeader	[vim db/write_thread.cc +628]
  │   │   ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   ├── WriteThread::CompleteFollower	[vim db/write_thread.cc +320]
  │   │   │   └── SetState [+]
  │   │   │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │   │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   │   ├── ShouldWriteToMemtable	[vim db/write_thread.h +228]
  │   │   │   └── CallbackFailed	[vim db/write_thread.h +224]
  │   │   ├── WriteThread::CompleteLeader	[vim db/write_thread.cc +305]
  │   │   │   └── SetState [+]
  │   │   │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │   │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   │   ├── WriteThread::LinkGroup	[vim db/write_thread.cc +257]
  │   │   │   └── compare_exchange_weak	[OUT-OF-TREE]
  │   │   ├── WriteThread::FindNextLeader	[vim db/write_thread.cc +294]
  │   │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   ├── port::AsmVolatilePause [+]
  │   │   │   │   ├── AsmVolatilePause	[vim port/win/port_win.h +285]
  │   │   │   │   └── AsmVolatilePause	[vim port/port_posix.h +166]
  │   │   │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │   │   ├── Random::GetTLSInstance	[vim util/random.cc +25]
  │   │   │   │   ├── std::hash
  │   │   │   │   ├── std::this_thread::get_id
  │   │   │   │   └── Random	[vim util/random.h +39]
  │   │   │   ├── OneIn [+]
  │   │   │   │   ├── OneIn	[vim util/random.h +69]
  │   │   │   │   ├── OneIn	[vim util/random.h +131]
  │   │   │   │   └── OneIn	[vim util/random.h +163]
  │   │   │   ├── std::this_thread::yield	[OUT-OF-TREE]
  │   │   │   ├── std::chrono::steady_clock::now	[OUT-OF-TREE]
  │   │   │   ├── std::chrono::microseconds	[OUT-OF-TREE]
  │   │   │   ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   │   └── WriteThread::BlockingAwaitState	[vim db/write_thread.cc +34]
  │   │   │       ├── CreateMutex	[vim db/write_thread.h +193]
  │   │   │       ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   │       ├── guard	[OUT-OF-TREE]
  │   │   │       ├── StateMutex	[vim db/write_thread.h +238]
  │   │   │       ├── StateCV	[vim db/write_thread.h +243]
  │   │   │       └── wait
  │   │   ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   └── SetState [+]
  │   │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   └── SetState [+]
  │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  ├── DBImpl::PreprocessWrite	[vim db/db_impl/db_impl_write.cc +903]
  │   ├── AssertHeld [+]
  │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │       └── AssertHeld
  │   ├── IsDBStopped	[vim db/error_handler.h +66]
  │   │   └── severity [+]
  │   │       └── severity	[vim include/rocksdb/status.h +137]
  │   ├── GetBGError	[vim db/error_handler.h +60]
  │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   ├── ColumnFamilySet::NumberOfColumnFamilies	[vim db/column_family.cc +1498]
  │   ├── DBImpl::GetMaxTotalWalSize	[vim db/db_impl/db_impl_write.cc +1427]
  │   │   └── AssertHeld [+]
  │   │       ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │       ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │       ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │       ├── AssertHeld	[vim port/port_posix.h +144]
  │   │       └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │           └── AssertHeld
  │   ├── DBImpl::SwitchWAL	[vim db/db_impl/db_impl_write.cc +1253]
  │   │   ├── AssertHeld [+]
  │   │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │       └── AssertHeld
  │   │   ├── allow_2pc	[vim db/db_impl/db_impl.h +821]
  │   │   ├── LogsWithPrepTracker::FindMinLogContainingOutstandingPrep	[vim db/logs_with_prep_tracker.cc +43]
  │   │   │   └── lock2	[OUT-OF-TREE]
  │   │   ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   ├── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   ├── DBImpl::GetMaxTotalWalSize	[vim db/db_impl/db_impl_write.cc +1427]
  │   │   │   └── AssertHeld [+]
  │   │   │       ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │       ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │       ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │       ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │       └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │           └── AssertHeld
  │   │   ├── DBImpl::SelectColumnFamiliesForAtomicFlush	[vim db/db_impl/db_impl_write.cc +1231]
  │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   ├── IsDropped	[vim db/column_family.h +315]
  │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   ├── mem
  │   │   │   ├── IsEmpty
  │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   ├── IsDropped	[vim db/column_family.h +315]
  │   │   ├── ColumnFamilyData::OldestLogToKeep	[vim db/column_family.cc +707]
  │   │   │   ├── GetLogNumber
  │   │   │   ├── MemTableList::PrecomputeMinLogContainingPrepSection	[vim db/memtable_list.cc +676]
  │   │   │   ├── mem
  │   │   │   └── MemTable::GetMinLogContainingPrepSection	[vim db/memtable.cc +1166]
  │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   ├── DBImpl::MaybeFlushStatsCF	[vim db/db_impl/db_impl_write.cc +1542]
  │   │   │   ├── GetColumnFamily
  │   │   │   ├── mem
  │   │   │   ├── IsEmpty
  │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   ├── GetLogNumber
  │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   └── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   ├── WriteThread::EnterUnbatched	[vim db/write_thread.cc +755]
  │   │   │   ├── Unlock
  │   │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   ├── WriteThread::WaitForMemTableWriters	[vim db/write_thread.cc +783]
  │   │   │   └── Lock
  │   │   ├── Ref [+]
  │   │   │   ├── Ref	[vim cache/lru_cache.h +82]
  │   │   │   ├── ClockCacheShard::Ref	[vim cache/clock_cache.cc +450]
  │   │   │   ├── ShardedCache::Ref	[vim cache/sharded_cache.cc +59]
  │   │   │   ├── LRUCacheShard::Ref	[vim cache/lru_cache.cc +285]
  │   │   │   ├── Ref	[vim env/mock_env.cc +41]
  │   │   │   ├── Ref	[vim utilities/simulator_cache/sim_cache.cc +215]
  │   │   │   ├── Ref	[vim db/column_family.h +280]
  │   │   │   ├── SuperVersion::Ref	[vim db/column_family.cc +429]
  │   │   │   ├── MemTableListVersion::Ref	[vim db/memtable_list.cc +71]
  │   │   │   ├── Ref	[vim db/memtable.h +118]
  │   │   │   └── Version::Ref	[vim db/version_set.cc +3033]
  │   │   ├── DBImpl::SwitchMemtable	[vim db/db_impl/db_impl_write.cc +1674]
  │   │   │   ├── AssertHeld
  │   │   │   ├── DBImpl::WriteRecoverableState	[vim db/db_impl/db_impl_write.cc +1180]
  │   │   │   ├── prev_log_number	[vim db/version_set.h +1113]
  │   │   │   ├── NewFileNumber	[vim db/version_set.h +1055]
  │   │   │   ├── GetLatestMutableCFOptions	[vim db/column_family.h +338]
  │   │   │   ├── GetEarliestSequenceNumber
  │   │   │   ├── num_entries	[vim db/memtable.h +293]
  │   │   │   ├── num_deletes	[vim db/memtable.h +300]
  │   │   │   ├── DBImpl::GetWalPreallocateBlockSize	[vim db/db_impl/db_impl_write.cc +1843]
  │   │   │   ├── CreateWAL	[OUT-OF-TREE]
  │   │   │   ├── ColumnFamilyData::ConstructNewMemtable	[vim db/column_family.cc +1047]
  │   │   │   ├── NewSuperVersion	[vim db/job_context.h +47]
  │   │   │   ├── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   ├── pop_front	[OUT-OF-TREE]
  │   │   │   ├── Writer::WriteBuffer	[vim db/log_writer.cc +40]
  │   │   │   ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │   ├── GetName
  │   │   │   ├── c_str	[OUT-OF-TREE]
  │   │   │   ├── get_log_number
  │   │   │   ├── emplace_back	[OUT-OF-TREE]
  │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── LogFileNumberSize	[vim db/db_impl/db_impl.h +1294]
  │   │   │   ├── release
  │   │   │   ├── SetBGError
  │   │   │   ├── GetBGError	[vim db/error_handler.h +60]
  │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   ├── GetFirstSequenceNumber	[vim db/memtable.h +332]
  │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   ├── SetLogNumber
  │   │   │   ├── SetCreationSeq	[vim db/memtable.h +351]
  │   │   │   ├── LastSequence	[vim db/version_set.h +1063]
  │   │   │   ├── SetNextLogNumber	[vim db/memtable.h +363]
  │   │   │   ├── Add
  │   │   │   ├── mem
  │   │   │   ├── Ref
  │   │   │   ├── SetMemtable	[vim db/column_family.h +369]
  │   │   │   ├── DBImpl::InstallSuperVersionAndScheduleWork	[vim db/db_impl/db_impl_compaction_flush.cc +3255]
  │   │   │   ├── Unlock
  │   │   │   ├── DBImpl::NotifyOnMemTableSealed	[vim db/db_impl/db_impl_write.cc +1655]
  │   │   │   ├── Lock
  │   │   │   └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   ├── ColumnFamilyData::UnrefAndTryDelete	[vim db/column_family.cc +663]
  │   │   │   ├── fetch_sub	[OUT-OF-TREE]
  │   │   │   ├── Unlock
  │   │   │   ├── Lock
  │   │   │   ├── Unref
  │   │   │   └── Cleanup
  │   │   ├── WriteThread::ExitUnbatched	[vim db/write_thread.cc +770]
  │   │   │   ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   │   └── SetState
  │   │   ├── AssignAtomicFlushSeq [+]
  │   │   │   ├── AssignAtomicFlushSeq	[vim db/memtable_list.h +356]
  │   │   │   └── DBImpl::AssignAtomicFlushSeq	[vim db/db_impl/db_impl_write.cc +1245]
  │   │   ├── FlushRequested	[vim db/memtable_list.h +311]
  │   │   ├── DBImpl::GenerateFlushRequest	[vim db/db_impl/db_impl_compaction_flush.cc +1683]
  │   │   │   ├── GetLatestMemTableID	[vim db/memtable_list.h +348]
  │   │   │   └── emplace_back	[OUT-OF-TREE]
  │   │   ├── DBImpl::SchedulePendingFlush	[vim db/db_impl/db_impl_compaction_flush.cc +2257]
  │   │   │   ├── Ref
  │   │   │   ├── SetFlushReason	[vim db/column_family.h +323]
  │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   └── DBImpl::MaybeScheduleFlushOrCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +2094]
  │   │       ├── AssertHeld
  │   │       ├── IsRecoveryInProgress	[vim db/error_handler.h +79]
  │   │       ├── GetBGJobLimits
  │   │       ├── GetBackgroundThreads
  │   │       ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │       ├── IsBGWorkStopped	[vim db/error_handler.h +71]
  │   │       ├── DBImpl::HasExclusiveManualCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +3173]
  │   │       ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │       └── Schedule
  │   ├── ShouldFlush	[vim include/rocksdb/write_buffer_manager.h +49]
  │   │   ├── enabled [+]
  │   │   │   └── enabled	[vim include/rocksdb/write_buffer_manager.h +35]
  │   │   ├── memory_usage	[vim include/rocksdb/write_buffer_manager.h +40]
  │   │   └── mutable_memtable_memory_usage	[vim include/rocksdb/write_buffer_manager.h +43]
  │   ├── DBImpl::HandleWriteBufferFull	[vim db/db_impl/db_impl_write.cc +1348]
  │   │   ├── AssertHeld [+]
  │   │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │       └── AssertHeld
  │   │   ├── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   ├── memory_usage	[vim include/rocksdb/write_buffer_manager.h +40]
  │   │   ├── buffer_size	[vim include/rocksdb/write_buffer_manager.h +46]
  │   │   ├── DBImpl::SelectColumnFamiliesForAtomicFlush	[vim db/db_impl/db_impl_write.cc +1231]
  │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   ├── IsDropped	[vim db/column_family.h +315]
  │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   ├── mem
  │   │   │   ├── IsEmpty
  │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   ├── IsDropped	[vim db/column_family.h +315]
  │   │   ├── GetCreationSeq	[vim db/memtable.h +349]
  │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   ├── DBImpl::MaybeFlushStatsCF	[vim db/db_impl/db_impl_write.cc +1542]
  │   │   │   ├── GetColumnFamily
  │   │   │   ├── mem
  │   │   │   ├── IsEmpty
  │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   ├── GetLogNumber
  │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   └── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   ├── WriteThread::EnterUnbatched	[vim db/write_thread.cc +755]
  │   │   │   ├── Unlock
  │   │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   ├── WriteThread::WaitForMemTableWriters	[vim db/write_thread.cc +783]
  │   │   │   └── Lock
  │   │   ├── mem [+]
  │   │   │   └── mem	[vim db/column_family.h +362]
  │   │   ├── IsEmpty [+]
  │   │   │   ├── IsEmpty	[vim cache/cache_helpers.h +81]
  │   │   │   ├── IsEmpty	[vim utilities/persistent_cache/lrulist.h +106]
  │   │   │   ├── IsEmpty	[vim table/block_based/cachable_entry.h +102]
  │   │   │   ├── BlockBasedTableBuilder::IsEmpty	[vim table/block_based/block_based_table_builder.cc +1775]
  │   │   │   ├── IsEmpty	[vim table/table_builder.h +176]
  │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +322]
  │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +385]
  │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +418]
  │   │   │   ├── IsEmpty	[vim db/wal_edit.h +107]
  │   │   │   ├── IsEmpty	[vim db/version_builder.cc +91]
  │   │   │   ├── IsEmpty	[vim db/memtable.h +326]
  │   │   │   ├── AtomicGroupReadBuffer::IsEmpty	[vim db/version_set.cc +3738]
  │   │   │   └── IsEmpty	[vim logging/log_buffer.h +29]
  │   │   ├── Ref [+]
  │   │   │   ├── Ref	[vim cache/lru_cache.h +82]
  │   │   │   ├── ClockCacheShard::Ref	[vim cache/clock_cache.cc +450]
  │   │   │   ├── ShardedCache::Ref	[vim cache/sharded_cache.cc +59]
  │   │   │   ├── LRUCacheShard::Ref	[vim cache/lru_cache.cc +285]
  │   │   │   ├── Ref	[vim env/mock_env.cc +41]
  │   │   │   ├── Ref	[vim utilities/simulator_cache/sim_cache.cc +215]
  │   │   │   ├── Ref	[vim db/column_family.h +280]
  │   │   │   ├── SuperVersion::Ref	[vim db/column_family.cc +429]
  │   │   │   ├── MemTableListVersion::Ref	[vim db/memtable_list.cc +71]
  │   │   │   ├── Ref	[vim db/memtable.h +118]
  │   │   │   └── Version::Ref	[vim db/version_set.cc +3033]
  │   │   ├── DBImpl::SwitchMemtable	[vim db/db_impl/db_impl_write.cc +1674]
  │   │   │   ├── AssertHeld
  │   │   │   ├── DBImpl::WriteRecoverableState	[vim db/db_impl/db_impl_write.cc +1180]
  │   │   │   ├── prev_log_number	[vim db/version_set.h +1113]
  │   │   │   ├── NewFileNumber	[vim db/version_set.h +1055]
  │   │   │   ├── GetLatestMutableCFOptions	[vim db/column_family.h +338]
  │   │   │   ├── GetEarliestSequenceNumber
  │   │   │   ├── num_entries	[vim db/memtable.h +293]
  │   │   │   ├── num_deletes	[vim db/memtable.h +300]
  │   │   │   ├── DBImpl::GetWalPreallocateBlockSize	[vim db/db_impl/db_impl_write.cc +1843]
  │   │   │   ├── CreateWAL	[OUT-OF-TREE]
  │   │   │   ├── ColumnFamilyData::ConstructNewMemtable	[vim db/column_family.cc +1047]
  │   │   │   ├── NewSuperVersion	[vim db/job_context.h +47]
  │   │   │   ├── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   ├── pop_front	[OUT-OF-TREE]
  │   │   │   ├── Writer::WriteBuffer	[vim db/log_writer.cc +40]
  │   │   │   ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │   ├── GetName
  │   │   │   ├── c_str	[OUT-OF-TREE]
  │   │   │   ├── get_log_number
  │   │   │   ├── emplace_back	[OUT-OF-TREE]
  │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── LogFileNumberSize	[vim db/db_impl/db_impl.h +1294]
  │   │   │   ├── release
  │   │   │   ├── SetBGError
  │   │   │   ├── GetBGError	[vim db/error_handler.h +60]
  │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   ├── GetFirstSequenceNumber	[vim db/memtable.h +332]
  │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   ├── SetLogNumber
  │   │   │   ├── SetCreationSeq	[vim db/memtable.h +351]
  │   │   │   ├── LastSequence	[vim db/version_set.h +1063]
  │   │   │   ├── SetNextLogNumber	[vim db/memtable.h +363]
  │   │   │   ├── Add
  │   │   │   ├── mem
  │   │   │   ├── Ref
  │   │   │   ├── SetMemtable	[vim db/column_family.h +369]
  │   │   │   ├── DBImpl::InstallSuperVersionAndScheduleWork	[vim db/db_impl/db_impl_compaction_flush.cc +3255]
  │   │   │   ├── Unlock
  │   │   │   ├── DBImpl::NotifyOnMemTableSealed	[vim db/db_impl/db_impl_write.cc +1655]
  │   │   │   ├── Lock
  │   │   │   └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   ├── ColumnFamilyData::UnrefAndTryDelete	[vim db/column_family.cc +663]
  │   │   │   ├── fetch_sub	[OUT-OF-TREE]
  │   │   │   ├── Unlock
  │   │   │   ├── Lock
  │   │   │   ├── Unref
  │   │   │   └── Cleanup
  │   │   ├── WriteThread::ExitUnbatched	[vim db/write_thread.cc +770]
  │   │   │   ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   │   └── SetState
  │   │   ├── AssignAtomicFlushSeq [+]
  │   │   │   ├── AssignAtomicFlushSeq	[vim db/memtable_list.h +356]
  │   │   │   └── DBImpl::AssignAtomicFlushSeq	[vim db/db_impl/db_impl_write.cc +1245]
  │   │   ├── FlushRequested	[vim db/memtable_list.h +311]
  │   │   ├── DBImpl::GenerateFlushRequest	[vim db/db_impl/db_impl_compaction_flush.cc +1683]
  │   │   │   ├── GetLatestMemTableID	[vim db/memtable_list.h +348]
  │   │   │   └── emplace_back	[OUT-OF-TREE]
  │   │   ├── DBImpl::SchedulePendingFlush	[vim db/db_impl/db_impl_compaction_flush.cc +2257]
  │   │   │   ├── Ref
  │   │   │   ├── SetFlushReason	[vim db/column_family.h +323]
  │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   └── DBImpl::MaybeScheduleFlushOrCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +2094]
  │   │       ├── AssertHeld
  │   │       ├── IsRecoveryInProgress	[vim db/error_handler.h +79]
  │   │       ├── GetBGJobLimits
  │   │       ├── GetBackgroundThreads
  │   │       ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │       ├── IsBGWorkStopped	[vim db/error_handler.h +71]
  │   │       ├── DBImpl::HasExclusiveManualCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +3173]
  │   │       ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │       └── Schedule
  │   ├── DBImpl::TrimMemtableHistory	[vim db/db_impl/db_impl_write.cc +1576]
  │   │   ├── TakeNextColumnFamily [+]
  │   │   │   ├── FlushScheduler::TakeNextColumnFamily	[vim db/flush_scheduler.cc +36]
  │   │   │   └── TrimHistoryScheduler::TakeNextColumnFamily	[vim db/trim_history_scheduler.cc +21]
  │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   ├── TrimHistory [+]
  │   │   │   ├── MemTableListVersion::TrimHistory	[vim db/memtable_list.cc +312]
  │   │   │   └── MemTableList::TrimHistory	[vim db/memtable_list.cc +536]
  │   │   ├── mem [+]
  │   │   │   └── mem	[vim db/column_family.h +362]
  │   │   ├── ApproximateMemoryUsage [+]
  │   │   │   ├── ApproximateMemoryUsage	[vim memory/memory_usage.h +15]
  │   │   │   ├── ApproximateMemoryUsage	[vim memory/concurrent_arena.h +69]
  │   │   │   ├── ApproximateMemoryUsage	[vim memory/arena.h +65]
  │   │   │   ├── ApproximateMemoryUsage	[vim util/compression.h +329]
  │   │   │   ├── ApproximateMemoryUsage	[vim memtable/skiplistrep.cc +75]
  │   │   │   ├── HashLinkListRep::ApproximateMemoryUsage	[vim memtable/hash_linklist_rep.cc +710]
  │   │   │   ├── VectorRep::ApproximateMemoryUsage	[vim memtable/vectorrep.cc +127]
  │   │   │   ├── HashSkipListRep::ApproximateMemoryUsage	[vim memtable/hash_skiplist_rep.cc +285]
  │   │   │   ├── ApproximateMemoryUsage	[vim table/plain/plain_table_reader.h +109]
  │   │   │   ├── ApproximateMemoryUsage	[vim table/mock_table.cc +54]
  │   │   │   ├── CuckooTableReader::ApproximateMemoryUsage	[vim table/cuckoo/cuckoo_table_reader.cc +401]
  │   │   │   ├── PartitionedFilterBlockReader::ApproximateMemoryUsage	[vim table/block_based/partitioned_filter_block.cc +403]
  │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/hash_index_reader.h +30]
  │   │   │   ├── Block::ApproximateMemoryUsage	[vim table/block_based/block.cc +1036]
  │   │   │   ├── UncompressionDictReader::ApproximateMemoryUsage	[vim table/block_based/uncompression_dict_reader.cc +97]
  │   │   │   ├── FullFilterBlockReader::ApproximateMemoryUsage	[vim table/block_based/full_filter_block.cc +275]
  │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/binary_search_index_reader.h +33]
  │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/parsed_full_filter_block.h +29]
  │   │   │   ├── BlockBasedTable::ApproximateMemoryUsage	[vim table/block_based/block_based_table_reader.cc +1127]
  │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/block.h +106]
  │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/partitioned_index_reader.h +33]
  │   │   │   ├── ApproximateMemoryUsage	[vim table/block_based/block_prefix_index.h +28]
  │   │   │   ├── BlockBasedFilterBlockReader::ApproximateMemoryUsage	[vim table/block_based/block_based_filter_block.cc +296]
  │   │   │   ├── ApproximateMemoryUsage	[vim table/format.h +285]
  │   │   │   ├── MemTableList::ApproximateMemoryUsage	[vim db/memtable_list.cc +553]
  │   │   │   └── MemTable::ApproximateMemoryUsage	[vim db/memtable.cc +130]
  │   │   ├── NewSuperVersion	[vim db/job_context.h +47]
  │   │   │   ├── std::unique_ptr	[OUT-OF-TREE]
  │   │   │   └── SuperVersion	[OUT-OF-TREE]
  │   │   ├── InstallSuperVersion [+]
  │   │   │   ├── ColumnFamilyData::InstallSuperVersion	[vim db/column_family.cc +1244]
  │   │   │   └── ColumnFamilyData::InstallSuperVersion	[vim db/column_family.cc +1250]
  │   │   ├── ColumnFamilyData::UnrefAndTryDelete	[vim db/column_family.cc +663]
  │   │   │   ├── fetch_sub	[OUT-OF-TREE]
  │   │   │   ├── Unlock
  │   │   │   ├── Lock
  │   │   │   ├── Unref
  │   │   │   └── Cleanup
  │   │   └── Status::OK [+]
  │   │       ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │       │   └── IOStatus
  │   │       └── OK	[vim include/rocksdb/status.h +153]
  │   │           └── Status
  │   ├── Empty [+]
  │   │   ├── RowValue::Empty	[vim utilities/cassandra/format.cc +301]
  │   │   ├── FlushScheduler::Empty	[vim db/flush_scheduler.cc +67]
  │   │   ├── TrimHistoryScheduler::Empty	[vim db/trim_history_scheduler.cc +41]
  │   │   ├── Empty	[vim utilities/backupable/backupable_db.cc +245]
  │   │   ├── HistogramWindowingImpl::Empty	[vim monitoring/histogram_windowing.cc +50]
  │   │   │   └── Empty
  │   │   ├── HistogramStat::Empty	[vim monitoring/histogram.cc +81]
  │   │   │   └── num
  │   │   └── HistogramImpl::Empty	[vim monitoring/histogram.cc +244]
  │   │       └── Empty
  │   ├── WaitForPendingWrites	[vim db/db_impl/db_impl.h +1549]
  │   │   ├── AssertHeld [+]
  │   │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │   │       └── AssertHeld
  │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   ├── Unlock [+]
  │   │   │   ├── Unlock	[vim env/mock_env.cc +59]
  │   │   │   ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │   │   │   ├── Unlock	[vim port/win/port_win.h +144]
  │   │   │   └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  │   │   ├── WriteThread::WaitForMemTableWriters	[vim db/write_thread.cc +783]
  │   │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   └── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   ├── Lock [+]
  │   │   │   ├── Lock	[vim env/mock_env.cc +48]
  │   │   │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   │   │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   │   │   ├── Lock	[vim port/win/port_win.h +137]
  │   │   │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  │   │   ├── guard	[OUT-OF-TREE]
  │   │   └── wait [+]
  │   │       ├── wait	[vim util/repeatable_thread.h +83]
  │   │       ├── wait	[vim third-party/folly/folly/synchronization/Baton.h +156]
  │   │       ├── wait	[vim third-party/folly/folly/synchronization/detail/Sleeper.h +45]
  │   │       ├── wait	[vim third-party/folly/folly/synchronization/ParkingLot.h +35]
  │   │       └── wait	[vim third-party/folly/folly/synchronization/DistributedMutex-inl.h +1019]
  │   ├── DBImpl::ScheduleFlushes	[vim db/db_impl/db_impl_write.cc +1605]
  │   │   ├── DBImpl::SelectColumnFamiliesForAtomicFlush	[vim db/db_impl/db_impl_write.cc +1231]
  │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   ├── IsDropped	[vim db/column_family.h +315]
  │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   ├── mem
  │   │   │   ├── IsEmpty
  │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   ├── Ref [+]
  │   │   │   ├── Ref	[vim cache/lru_cache.h +82]
  │   │   │   ├── ClockCacheShard::Ref	[vim cache/clock_cache.cc +450]
  │   │   │   ├── ShardedCache::Ref	[vim cache/sharded_cache.cc +59]
  │   │   │   ├── LRUCacheShard::Ref	[vim cache/lru_cache.cc +285]
  │   │   │   ├── Ref	[vim env/mock_env.cc +41]
  │   │   │   ├── Ref	[vim utilities/simulator_cache/sim_cache.cc +215]
  │   │   │   ├── Ref	[vim db/column_family.h +280]
  │   │   │   ├── SuperVersion::Ref	[vim db/column_family.cc +429]
  │   │   │   ├── MemTableListVersion::Ref	[vim db/memtable_list.cc +71]
  │   │   │   ├── Ref	[vim db/memtable.h +118]
  │   │   │   └── Version::Ref	[vim db/version_set.cc +3033]
  │   │   ├── Clear [+]
  │   │   │   ├── Clear	[vim util/aligned_buffer.h +115]
  │   │   │   ├── OptimisticTransaction::Clear	[vim utilities/transactions/optimistic_transaction.cc +54]
  │   │   │   ├── TransactionBaseImpl::Clear	[vim utilities/transactions/transaction_base.cc +47]
  │   │   │   ├── PointLockTracker::Clear	[vim utilities/transactions/lock/point/point_lock_tracker.cc +264]
  │   │   │   ├── PessimisticTransaction::Clear	[vim utilities/transactions/pessimistic_transaction.cc +106]
  │   │   │   ├── WriteUnpreparedTxn::Clear	[vim utilities/transactions/write_unprepared_txn.cc +813]
  │   │   │   ├── WriteBatchWithIndex::Rep::Clear	[vim utilities/write_batch_with_index/write_batch_with_index.cc +551]
  │   │   │   ├── WriteBatchWithIndex::Clear	[vim utilities/write_batch_with_index/write_batch_with_index.cc +762]
  │   │   │   ├── BlockCacheTierMetadata::Clear	[vim utilities/persistent_cache/block_cache_tier_metadata.cc +34]
  │   │   │   ├── Clear	[vim utilities/persistent_cache/hash_table.h +157]
  │   │   │   ├── Clear	[vim utilities/persistent_cache/hash_table_evictable.h +111]
  │   │   │   ├── Clear	[vim table/block_based/block_based_table_builder.cc +537]
  │   │   │   ├── Clear	[vim db/dbformat.h +316]
  │   │   │   ├── Clear	[vim db/dbformat.h +422]
  │   │   │   ├── WriteBatch::Clear	[vim db/write_batch.cc +322]
  │   │   │   ├── FlushScheduler::Clear	[vim db/flush_scheduler.cc +78]
  │   │   │   ├── Clear	[vim db/internal_stats.h +262]
  │   │   │   ├── Clear	[vim db/internal_stats.h +324]
  │   │   │   ├── Clear	[vim db/internal_stats.h +464]
  │   │   │   ├── Clear	[vim db/internal_stats.h +509]
  │   │   │   ├── VersionEdit::Clear	[vim db/version_edit.cc +69]
  │   │   │   ├── TrimHistoryScheduler::Clear	[vim db/trim_history_scheduler.cc +46]
  │   │   │   ├── AtomicGroupReadBuffer::Clear	[vim db/version_set.cc +3740]
  │   │   │   ├── Clear	[vim db/merge_context.h +24]
  │   │   │   ├── HistogramWindowingImpl::Clear	[vim monitoring/histogram_windowing.cc +39]
  │   │   │   ├── HistogramStat::Clear	[vim monitoring/histogram.cc +70]
  │   │   │   └── HistogramImpl::Clear	[vim monitoring/histogram.cc +239]
  │   │   ├── TakeNextColumnFamily [+]
  │   │   │   ├── FlushScheduler::TakeNextColumnFamily	[vim db/flush_scheduler.cc +36]
  │   │   │   └── TrimHistoryScheduler::TakeNextColumnFamily	[vim db/trim_history_scheduler.cc +21]
  │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   ├── DBImpl::MaybeFlushStatsCF	[vim db/db_impl/db_impl_write.cc +1542]
  │   │   │   ├── GetColumnFamily
  │   │   │   ├── mem
  │   │   │   ├── IsEmpty
  │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   ├── GetLogNumber
  │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   └── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   ├── WriteThread::EnterUnbatched	[vim db/write_thread.cc +755]
  │   │   │   ├── Unlock
  │   │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   │   ├── WriteThread::WaitForMemTableWriters	[vim db/write_thread.cc +783]
  │   │   │   └── Lock
  │   │   ├── mem [+]
  │   │   │   └── mem	[vim db/column_family.h +362]
  │   │   ├── IsEmpty [+]
  │   │   │   ├── IsEmpty	[vim cache/cache_helpers.h +81]
  │   │   │   ├── IsEmpty	[vim utilities/persistent_cache/lrulist.h +106]
  │   │   │   ├── IsEmpty	[vim table/block_based/cachable_entry.h +102]
  │   │   │   ├── BlockBasedTableBuilder::IsEmpty	[vim table/block_based/block_based_table_builder.cc +1775]
  │   │   │   ├── IsEmpty	[vim table/table_builder.h +176]
  │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +322]
  │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +385]
  │   │   │   ├── IsEmpty	[vim db/range_del_aggregator.h +418]
  │   │   │   ├── IsEmpty	[vim db/wal_edit.h +107]
  │   │   │   ├── IsEmpty	[vim db/version_builder.cc +91]
  │   │   │   ├── IsEmpty	[vim db/memtable.h +326]
  │   │   │   ├── AtomicGroupReadBuffer::IsEmpty	[vim db/version_set.cc +3738]
  │   │   │   └── IsEmpty	[vim logging/log_buffer.h +29]
  │   │   ├── DBImpl::SwitchMemtable	[vim db/db_impl/db_impl_write.cc +1674]
  │   │   │   ├── AssertHeld
  │   │   │   ├── DBImpl::WriteRecoverableState	[vim db/db_impl/db_impl_write.cc +1180]
  │   │   │   ├── prev_log_number	[vim db/version_set.h +1113]
  │   │   │   ├── NewFileNumber	[vim db/version_set.h +1055]
  │   │   │   ├── GetLatestMutableCFOptions	[vim db/column_family.h +338]
  │   │   │   ├── GetEarliestSequenceNumber
  │   │   │   ├── num_entries	[vim db/memtable.h +293]
  │   │   │   ├── num_deletes	[vim db/memtable.h +300]
  │   │   │   ├── DBImpl::GetWalPreallocateBlockSize	[vim db/db_impl/db_impl_write.cc +1843]
  │   │   │   ├── CreateWAL	[OUT-OF-TREE]
  │   │   │   ├── ColumnFamilyData::ConstructNewMemtable	[vim db/column_family.cc +1047]
  │   │   │   ├── NewSuperVersion	[vim db/job_context.h +47]
  │   │   │   ├── ROCKS_LOG_INFO	[OUT-OF-TREE]
  │   │   │   ├── pop_front	[OUT-OF-TREE]
  │   │   │   ├── Writer::WriteBuffer	[vim db/log_writer.cc +40]
  │   │   │   ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │   │   ├── GetName
  │   │   │   ├── c_str	[OUT-OF-TREE]
  │   │   │   ├── get_log_number
  │   │   │   ├── emplace_back	[OUT-OF-TREE]
  │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── LogFileNumberSize	[vim db/db_impl/db_impl.h +1294]
  │   │   │   ├── release
  │   │   │   ├── SetBGError
  │   │   │   ├── GetBGError	[vim db/error_handler.h +60]
  │   │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   │   ├── GetFirstSequenceNumber	[vim db/memtable.h +332]
  │   │   │   ├── MemTableList::NumNotFlushed	[vim db/memtable_list.cc +91]
  │   │   │   ├── SetLogNumber
  │   │   │   ├── SetCreationSeq	[vim db/memtable.h +351]
  │   │   │   ├── LastSequence	[vim db/version_set.h +1063]
  │   │   │   ├── SetNextLogNumber	[vim db/memtable.h +363]
  │   │   │   ├── Add
  │   │   │   ├── mem
  │   │   │   ├── Ref
  │   │   │   ├── SetMemtable	[vim db/column_family.h +369]
  │   │   │   ├── DBImpl::InstallSuperVersionAndScheduleWork	[vim db/db_impl/db_impl_compaction_flush.cc +3255]
  │   │   │   ├── Unlock
  │   │   │   ├── DBImpl::NotifyOnMemTableSealed	[vim db/db_impl/db_impl_write.cc +1655]
  │   │   │   ├── Lock
  │   │   │   └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │   ├── ColumnFamilyData::UnrefAndTryDelete	[vim db/column_family.cc +663]
  │   │   │   ├── fetch_sub	[OUT-OF-TREE]
  │   │   │   ├── Unlock
  │   │   │   ├── Lock
  │   │   │   ├── Unref
  │   │   │   └── Cleanup
  │   │   ├── WriteThread::ExitUnbatched	[vim db/write_thread.cc +770]
  │   │   │   ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │   │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   │   │   └── SetState
  │   │   ├── AssignAtomicFlushSeq [+]
  │   │   │   ├── AssignAtomicFlushSeq	[vim db/memtable_list.h +356]
  │   │   │   └── DBImpl::AssignAtomicFlushSeq	[vim db/db_impl/db_impl_write.cc +1245]
  │   │   ├── DBImpl::GenerateFlushRequest	[vim db/db_impl/db_impl_compaction_flush.cc +1683]
  │   │   │   ├── GetLatestMemTableID	[vim db/memtable_list.h +348]
  │   │   │   └── emplace_back	[OUT-OF-TREE]
  │   │   ├── DBImpl::SchedulePendingFlush	[vim db/db_impl/db_impl_compaction_flush.cc +2257]
  │   │   │   ├── Ref
  │   │   │   ├── SetFlushReason	[vim db/column_family.h +323]
  │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   └── DBImpl::MaybeScheduleFlushOrCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +2094]
  │   │       ├── AssertHeld
  │   │       ├── IsRecoveryInProgress	[vim db/error_handler.h +79]
  │   │       ├── GetBGJobLimits
  │   │       ├── GetBackgroundThreads
  │   │       ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │       ├── IsBGWorkStopped	[vim db/error_handler.h +71]
  │   │       ├── DBImpl::HasExclusiveManualCompaction	[vim db/db_impl/db_impl_compaction_flush.cc +3173]
  │   │       ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │       └── Schedule
  │   ├── WriteController::IsStopped	[vim db/write_controller.cc +37]
  │   ├── NeedsDelay	[vim db/write_controller.h +53]
  │   ├── PERF_TIMER_STOP	[OUT-OF-TREE]
  │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   ├── DBImpl::DelayWrite	[vim db/db_impl/db_impl_write.cc +1436]
  │   │   ├── GetDelay [+]
  │   │   │   ├── GetDelay	[vim util/stop_watch.h +71]
  │   │   │   └── WriteController::GetDelay	[vim db/write_controller.cc +45]
  │   │   ├── Unlock [+]
  │   │   │   ├── Unlock	[vim env/mock_env.cc +59]
  │   │   │   ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │   │   │   ├── Unlock	[vim port/win/port_win.h +144]
  │   │   │   └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  │   │   ├── start_time	[vim util/stop_watch.h +73]
  │   │   ├── NeedsDelay	[vim db/write_controller.h +53]
  │   │   ├── NowMicros [+]
  │   │   │   ├── NowMicros	[vim include/rocksdb/env.h +1357]
  │   │   │   ├── NowMicros	[vim env/composite_env_wrapper.h +530]
  │   │   │   ├── NowMicros	[vim env/env_posix.cc +240]
  │   │   │   ├── MockEnv::NowMicros	[vim env/mock_env.cc +1039]
  │   │   │   ├── NowMicros	[vim hdfs/env_hdfs.h +130]
  │   │   │   └── WinEnv::NowMicros	[vim port/win/env_win.cc +1449]
  │   │   ├── SleepForMicroseconds [+]
  │   │   │   ├── SleepForMicroseconds	[vim include/rocksdb/env.h +1361]
  │   │   │   ├── SleepForMicroseconds	[vim env/composite_env_wrapper.h +534]
  │   │   │   ├── SleepForMicroseconds	[vim env/env_posix.cc +277]
  │   │   │   ├── SleepForMicroseconds	[vim hdfs/env_hdfs.h +132]
  │   │   │   ├── WinEnvThreads::SleepForMicroseconds	[vim port/win/env_win.cc +1285]
  │   │   │   └── WinEnv::SleepForMicroseconds	[vim port/win/env_win.cc +1500]
  │   │   ├── Lock [+]
  │   │   │   ├── Lock	[vim env/mock_env.cc +48]
  │   │   │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   │   │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   │   │   ├── Lock	[vim port/win/port_win.h +137]
  │   │   │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  │   │   ├── WriteThread::BeginWriteStall	[vim db/write_thread.cc +334]
  │   │   │   ├── WriteThread::LinkOne	[vim db/write_thread.cc +223]
  │   │   │   ├── Status::Incomplete
  │   │   │   └── SetState
  │   │   ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  │   │   ├── Wait [+]
  │   │   │   ├── TransactionDBCondVarImpl::Wait	[vim utilities/transactions/transaction_db_mutex_impl.cc +93]
  │   │   │   ├── CondVar::Wait	[vim port/port_posix.cc +103]
  │   │   │   ├── CondVar::Wait	[vim port/win/port_win.cc +71]
  │   │   │   └── InstrumentedCondVar::Wait	[vim monitoring/instrumented_mutex.cc +39]
  │   │   ├── WriteThread::EndWriteStall	[vim db/write_thread.cc +364]
  │   │   │   ├── exchange
  │   │   │   └── SignalAll
  │   │   ├── AddDBStats	[vim db/internal_stats.h +360]
  │   │   │   └── fetch_add	[OUT-OF-TREE]
  │   │   ├── RecordTick	[vim monitoring/statistics.h +124]
  │   │   │   └── StatisticsImpl::recordTick	[vim monitoring/statistics.cc +334]
  │   │   ├── WriteController::IsStopped	[vim db/write_controller.cc +37]
  │   │   ├── Status::Incomplete [+]
  │   │   │   ├── Incomplete	[vim include/rocksdb/status.h +207]
  │   │   │   │   ├── Slice [+]
  │   │   │   │   │   ├── Slice::Slice	[vim util/slice.cc +142]
  │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +38]
  │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +41]
  │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +45]
  │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   ├── Slice	[vim include/rocksdb/slice.h +50]
  │   │   │   │   │   │   ├── data_	[OUT-OF-TREE]
  │   │   │   │   │   │   └── size_	[OUT-OF-TREE]
  │   │   │   │   │   └── Slice	[vim include/rocksdb/slice.h +55]
  │   │   │   │   │       ├── data_	[OUT-OF-TREE]
  │   │   │   │   │       └── strlen	[OUT-OF-TREE]
  │   │   │   │   └── Status [+]
  │   │   │   │       ├── Status::Status	[vim util/status.cc +60]
  │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │       │   └── sev_	[OUT-OF-TREE]
  │   │   │   │       ├── Status	[vim include/rocksdb/status.h +37]
  │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │       │   └── state_	[OUT-OF-TREE]
  │   │   │   │       ├── Status	[vim include/rocksdb/status.h +519]
  │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │       │   └── state_	[OUT-OF-TREE]
  │   │   │   │       ├── Status	[vim include/rocksdb/status.h +523]
  │   │   │   │       │   └── Status
  │   │   │   │       ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │       ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │   │   │       │   ├── code_	[OUT-OF-TREE]
  │   │   │   │       │   ├── subcode_	[OUT-OF-TREE]
  │   │   │   │       │   ├── sev_	[OUT-OF-TREE]
  │   │   │   │       │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │   │       └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │   │   │           ├── Status
  │   │   │   │           └── std::move	[OUT-OF-TREE]
  │   │   │   └── Incomplete	[vim include/rocksdb/status.h +210]
  │   │   │       └── Status [+]
  │   │   │           ├── Status::Status	[vim util/status.cc +60]
  │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │           │   └── sev_	[OUT-OF-TREE]
  │   │   │           ├── Status	[vim include/rocksdb/status.h +37]
  │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │           │   └── state_	[OUT-OF-TREE]
  │   │   │           ├── Status	[vim include/rocksdb/status.h +519]
  │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │           │   └── state_	[OUT-OF-TREE]
  │   │   │           ├── Status	[vim include/rocksdb/status.h +523]
  │   │   │           │   └── Status
  │   │   │           ├── Status::Status	[vim include/rocksdb/status.h +529]
  │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │           │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │           ├── Status::Status	[vim include/rocksdb/status.h +536]
  │   │   │           │   ├── code_	[OUT-OF-TREE]
  │   │   │           │   ├── subcode_	[OUT-OF-TREE]
  │   │   │           │   ├── sev_	[OUT-OF-TREE]
  │   │   │           │   └── Status::CopyState	[vim util/status.cc +20]
  │   │   │           └── Status::Status	[vim include/rocksdb/status.h +558]
  │   │   │               ├── Status
  │   │   │               └── std::move	[OUT-OF-TREE]
  │   │   ├── ToString [+]
  │   │   │   ├── Configurable::ToString	[vim options/configurable.cc +458]
  │   │   │   │   └── SerializeOptions
  │   │   │   ├── Status::ToString	[vim util/status.cc +79]
  │   │   │   │   ├── code
  │   │   │   │   └── result	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim util/string_util.h +23]
  │   │   │   │   └── std::to_string	[OUT-OF-TREE]
  │   │   │   ├── Slice::ToString	[vim util/slice.cc +157]
  │   │   │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   │   └── toHex	[vim util/slice.cc +120]
  │   │   │   ├── ToString	[vim include/rocksdb/configurable.h +180]
  │   │   │   │   └── ToString
  │   │   │   ├── ToString	[vim include/rocksdb/table_properties.h +146]
  │   │   │   │   └── Name
  │   │   │   ├── ToString	[vim include/rocksdb/utilities/ldb_cmd_execute_result.h +27]
  │   │   │   ├── ToString	[vim include/rocksdb/statistics.h +564]
  │   │   │   │   └── std::string	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim include/rocksdb/file_system.h +132]
  │   │   │   │   └── str	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim utilities/simulator_cache/sim_cache.cc +287]
  │   │   │   │   ├── std::to_string	[OUT-OF-TREE]
  │   │   │   │   ├── get_miss_counter	[vim utilities/simulator_cache/sim_cache.cc +272]
  │   │   │   │   └── get_hit_counter	[vim utilities/simulator_cache/sim_cache.cc +276]
  │   │   │   ├── CompactOnDeletionCollectorFactory::ToString	[vim utilities/table_properties_collectors/compact_on_deletion_collector.cc +105]
  │   │   │   │   ├── Name
  │   │   │   │   └── str	[OUT-OF-TREE]
  │   │   │   ├── PersistentCacheConfig::ToString	[vim utilities/persistent_cache/persistent_cache_tier.cc +16]
  │   │   │   │   └── c_str	[OUT-OF-TREE]
  │   │   │   ├── ToString	[vim table/block_based/filter_block.h +151]
  │   │   │   │   └── error_msg	[OUT-OF-TREE]
  │   │   │   ├── BlockBasedFilterBlockReader::ToString	[vim table/block_based/block_based_filter_block.cc +306]
  │   │   │   │   ├── FilterBlockReaderCommon::GetOrReadFilterBlock	[vim table/block_based/filter_block_reader_common.cc +66]
  │   │   │   │   ├── BlockBasedFilterBlockReader::ParseFieldsFromBlock	[vim table/block_based/block_based_filter_block.cc +221]
  │   │   │   │   ├── GetValue
  │   │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │   │   │   ├── s_bo	[OUT-OF-TREE]
  │   │   │   │   ├── s_hd	[OUT-OF-TREE]
  │   │   │   │   ├── s_fb	[OUT-OF-TREE]
  │   │   │   │   ├── DecodeFixed32	[vim util/coding_lean.h +74]
  │   │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │   │   │   ├── Slice
  │   │   │   │   ├── AppendItem
  │   │   │   │   └── ToString
  │   │   │   ├── TableProperties::ToString	[vim table/table_properties.cc +72]
  │   │   │   │   ├── ROCKSDB_NAMESPACE::ToString
  │   │   │   │   ├── std::string	[OUT-OF-TREE]
  │   │   │   │   └── AppendProperty
  │   │   │   ├── BlockHandle::ToString	[vim table/format.cc +82]
  │   │   │   │   ├── EncodeTo
  │   │   │   │   ├── Slice
  │   │   │   │   └── ToString
  │   │   │   ├── IndexValue::ToString	[vim table/format.cc +136]
  │   │   │   │   ├── EncodeTo
  │   │   │   │   ├── Slice
  │   │   │   │   └── ToString
  │   │   │   ├── Footer::ToString	[vim table/format.cc +262]
  │   │   │   │   ├── IsLegacyFooterFormat	[vim table/format.cc +147]
  │   │   │   │   ├── ToString
  │   │   │   │   └── ROCKSDB_NAMESPACE::ToString
  │   │   │   ├── BackupStatistics::ToString	[vim utilities/backupable/backupable_db.cc +81]
  │   │   │   │   ├── BackupStatistics::GetNumberSuccessBackup	[vim utilities/backupable/backupable_db.cc +74]
  │   │   │   │   └── BackupStatistics::GetNumberFailBackup	[vim utilities/backupable/backupable_db.cc +77]
  │   │   │   ├── HistogramWindowingImpl::ToString	[vim monitoring/histogram_windowing.cc +98]
  │   │   │   │   └── ToString
  │   │   │   ├── PerfContext::ToString	[vim monitoring/perf_context.cc +450]
  │   │   │   ├── IOStatsContext::ToString	[vim monitoring/iostats_context.cc +43]
  │   │   │   │   ├── IOSTATS_CONTEXT_OUTPUT	[OUT-OF-TREE]
  │   │   │   │   ├── str	[OUT-OF-TREE]
  │   │   │   │   └── find_last_not_of	[OUT-OF-TREE]
  │   │   │   ├── HistogramStat::ToString	[vim monitoring/histogram.cc +182]
  │   │   │   │   ├── num
  │   │   │   │   ├── Average
  │   │   │   │   ├── StandardDeviation
  │   │   │   │   ├── min
  │   │   │   │   ├── Median
  │   │   │   │   ├── max
  │   │   │   │   ├── Percentile
  │   │   │   │   ├── bucket_at	[vim monitoring/histogram.h +73]
  │   │   │   │   ├── BucketLimit	[vim monitoring/histogram.h +42]
  │   │   │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   │   │   ├── HistogramImpl::ToString	[vim monitoring/histogram.cc +279]
  │   │   │   │   └── ToString
  │   │   │   └── StatisticsImpl::ToString	[vim monitoring/statistics.cc +380]
  │   │   │       ├── StatisticsImpl::getTickerCountLocked	[vim monitoring/statistics.cc +265]
  │   │   │       ├── StatisticsImpl::getHistogramImplLocked	[vim monitoring/statistics.cc +280]
  │   │   │       ├── Data
  │   │   │       ├── c_str	[OUT-OF-TREE]
  │   │   │       └── shrink_to_fit	[OUT-OF-TREE]
  │   │   ├── IsDBStopped	[vim db/error_handler.h +66]
  │   │   │   └── severity [+]
  │   │   │       └── severity	[vim include/rocksdb/status.h +137]
  │   │   └── GetBGError	[vim db/error_handler.h +60]
  │   ├── PERF_TIMER_START	[OUT-OF-TREE]
  │   └── Wait [+]
  │       ├── TransactionDBCondVarImpl::Wait	[vim utilities/transactions/transaction_db_mutex_impl.cc +93]
  │       ├── CondVar::Wait	[vim port/port_posix.cc +103]
  │       ├── CondVar::Wait	[vim port/win/port_win.cc +71]
  │       └── InstrumentedCondVar::Wait	[vim monitoring/instrumented_mutex.cc +39]
  ├── LastSequence	[vim db/version_set.h +1063]
  ├── TEST_SYNC_POINT	[OUT-OF-TREE]
  ├── WriteThread::EnterAsBatchGroupLeader	[vim db/write_thread.cc +413]
  │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   ├── AllowWriteBatching	[vim utilities/transactions/optimistic_transaction.h +93]
  │   ├── ByteSize	[vim db/write_batch_internal.h +138]
  │   └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  ├── CheckCallback [+]
  │   ├── CheckCallback	[vim table/get_context.h +157]
  │   │   └── IsVisible [+]
  │   │       ├── IsVisible	[vim db/read_callback.h +25]
  │   │       └── DBIter::IsVisible	[vim db/db_iter.cc +1181]
  │   ├── CheckCallback	[vim db/write_thread.h +186]
  │   │   └── Callback [+]
  │   │       ├── Callback	[vim utilities/transactions/optimistic_transaction.h +89]
  │   │       ├── Callback	[vim utilities/transactions/write_unprepared_txn_db.h +58]
  │   │       ├── Callback	[vim utilities/transactions/write_prepared_txn_db.h +859]
  │   │       ├── Callback	[vim utilities/transactions/write_prepared_txn_db.h +923]
  │   │       └── Callback	[vim utilities/transactions/write_prepared_txn_db.h +1015]
  │   └── CheckCallback	[vim db/memtable.cc +630]
  │       └── IsVisible [+]
  │           ├── IsVisible	[vim db/read_callback.h +25]
  │           └── DBIter::IsVisible	[vim db/db_iter.cc +1181]
  ├── WriteBatch::HasMerge	[vim db/write_batch.cc +378]
  │   └── WriteBatch::ComputeContentFlags	[vim db/write_batch.cc +339]
  │       ├── Iterate
  │       └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  ├── WriteBatchInternal::AppendedByteSize	[vim db/write_batch.cc +2128]
  ├── WriteBatchInternal::ByteSize [+]
  │   └── ByteSize	[vim db/write_batch_internal.h +138]
  ├── AddDBStats	[vim db/internal_stats.h +360]
  │   └── fetch_add	[OUT-OF-TREE]
  ├── RecordTick	[vim monitoring/statistics.h +124]
  │   └── StatisticsImpl::recordTick	[vim monitoring/statistics.cc +334]
  ├── RecordInHistogram	[vim monitoring/statistics.h +110]
  │   └── recordInHistogram [+]
  │       ├── recordInHistogram	[vim include/rocksdb/statistics.h +552]
  │       │   └── measureTime
  │       └── StatisticsImpl::recordInHistogram	[vim monitoring/statistics.cc +349]
  │           ├── get_stats_level	[vim include/rocksdb/statistics.h +581]
  │           ├── Access
  │           ├── Add
  │           └── recordInHistogram
  ├── PERF_TIMER_STOP	[OUT-OF-TREE]
  ├── WriteToWAL [+]
  │   ├── DBImpl::WriteToWAL	[vim db/db_impl/db_impl_write.cc +1029]
  │   │   ├── WriteBatchInternal::Contents
  │   │   ├── Lock
  │   │   ├── AddRecord
  │   │   ├── Unlock
  │   │   └── AddSize	[vim db/db_impl/db_impl.h +1295]
  │   └── DBImpl::WriteToWAL	[vim db/db_impl/db_impl_write.cc +1062]
  │       ├── DBImpl::MergeBatch	[vim db/db_impl/db_impl_write.cc +985]
  │       ├── WriteBatchInternal::SetSequence	[vim db/write_batch.cc +755]
  │       ├── WriteToWAL
  │       ├── file
  │       ├── Sync
  │       ├── GetWalDir	[vim db/db_impl/db_impl.h +104]
  │       ├── Fsync
  │       ├── IOOptions	[vim include/rocksdb/file_system.h +89]
  │       ├── Clear
  │       ├── AddDBStats	[vim db/internal_stats.h +360]
  │       └── RecordTick	[vim monitoring/statistics.h +124]
  ├── DBImpl::ConcurrentWriteToWAL	[vim db/db_impl/db_impl_write.cc +1131]
  │   ├── DBImpl::MergeBatch	[vim db/db_impl/db_impl_write.cc +985]
  │   │   ├── GetWalTerminationPoint	[vim include/rocksdb/write_batch.h +337]
  │   │   ├── is_cleared	[vim include/rocksdb/write_batch.h +58]
  │   │   ├── CallbackFailed	[vim db/write_thread.h +224]
  │   │   ├── WriteBatchInternal::Append	[vim db/write_batch.cc +2101]
  │   │   │   ├── GetWalTerminationPoint	[vim include/rocksdb/write_batch.h +337]
  │   │   │   ├── is_cleared	[vim include/rocksdb/write_batch.h +58]
  │   │   │   ├── WriteBatchInternal::SetCount	[vim db/write_batch.cc +747]
  │   │   │   ├── Count
  │   │   │   └── Status::OK
  │   │   └── WriteBatchInternal::IsLatestPersistentState	[vim db/write_batch.cc +735]
  │   ├── Lock [+]
  │   │   ├── Lock	[vim env/mock_env.cc +48]
  │   │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   │   ├── Lock	[vim port/win/port_win.h +137]
  │   │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  │   ├── FetchAddLastAllocatedSequence	[vim db/version_set.h +1098]
  │   │   └── fetch_add	[OUT-OF-TREE]
  │   ├── WriteBatchInternal::SetSequence	[vim db/write_batch.cc +755]
  │   │   └── EncodeFixed64	[vim util/coding_lean.h +44]
  │   ├── WriteToWAL [+]
  │   │   ├── DBImpl::WriteToWAL	[vim db/db_impl/db_impl_write.cc +1029]
  │   │   │   ├── WriteBatchInternal::Contents
  │   │   │   ├── Lock
  │   │   │   ├── AddRecord
  │   │   │   ├── Unlock
  │   │   │   └── AddSize	[vim db/db_impl/db_impl.h +1295]
  │   │   └── DBImpl::WriteToWAL	[vim db/db_impl/db_impl_write.cc +1062]
  │   │       ├── DBImpl::MergeBatch	[vim db/db_impl/db_impl_write.cc +985]
  │   │       ├── WriteBatchInternal::SetSequence	[vim db/write_batch.cc +755]
  │   │       ├── WriteToWAL
  │   │       ├── file
  │   │       ├── Sync
  │   │       ├── GetWalDir	[vim db/db_impl/db_impl.h +104]
  │   │       ├── Fsync
  │   │       ├── IOOptions	[vim include/rocksdb/file_system.h +89]
  │   │       ├── Clear
  │   │       ├── AddDBStats	[vim db/internal_stats.h +360]
  │   │       └── RecordTick	[vim monitoring/statistics.h +124]
  │   ├── Unlock [+]
  │   │   ├── Unlock	[vim env/mock_env.cc +59]
  │   │   ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │   │   ├── Unlock	[vim port/win/port_win.h +144]
  │   │   └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  │   ├── AddDBStats	[vim db/internal_stats.h +360]
  │   │   └── fetch_add	[OUT-OF-TREE]
  │   └── RecordTick	[vim monitoring/statistics.h +124]
  │       └── StatisticsImpl::recordTick	[vim monitoring/statistics.cc +334]
  ├── FetchAddLastAllocatedSequence	[vim db/version_set.h +1098]
  │   └── fetch_add	[OUT-OF-TREE]
  ├── Callback [+]
  │   ├── Callback	[vim utilities/transactions/optimistic_transaction.h +89]
  │   ├── Callback	[vim utilities/transactions/write_unprepared_txn_db.h +58]
  │   ├── Callback	[vim utilities/transactions/write_prepared_txn_db.h +859]
  │   ├── Callback	[vim utilities/transactions/write_prepared_txn_db.h +923]
  │   └── Callback	[vim utilities/transactions/write_prepared_txn_db.h +1015]
  ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   └── DecodeFixed32	[vim util/coding_lean.h +74]
  ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  ├── WriteThread::LaunchParallelMemTableWriters	[vim db/write_thread.cc +586]
  │   └── SetState [+]
  │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  ├── ShouldWriteToMemtable	[vim db/write_thread.h +228]
  │   └── CallbackFailed	[vim db/write_thread.h +224]
  ├── column_family_memtables	[OUT-OF-TREE]
  ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  ├── WriteBatchInternal::InsertInto [+]
  │   ├── WriteBatchInternal::InsertInto	[vim db/write_batch.cc +2012]
  │   │   ├── inserter	[OUT-OF-TREE]
  │   │   ├── CallbackFailed	[vim db/write_thread.h +224]
  │   │   ├── ShouldWriteToMemtable	[vim db/write_thread.h +228]
  │   │   │   └── CallbackFailed	[vim db/write_thread.h +224]
  │   │   ├── MaybeAdvanceSeq	[vim db/write_batch.cc +1356]
  │   │   ├── WriteBatchInternal::SetSequence	[vim db/write_batch.cc +755]
  │   │   │   └── EncodeFixed64	[vim util/coding_lean.h +44]
  │   │   ├── set_log_number_ref	[vim db/write_batch.cc +1362]
  │   │   ├── Iterate [+]
  │   │   │   ├── WriteBatch::Iterate	[vim db/write_batch.cc +515]
  │   │   │   │   ├── Status::Corruption
  │   │   │   │   └── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   ├── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   │   ├── input
  │   │   │   │   ├── Continue
  │   │   │   │   ├── ReadRecordFromWriteBatch	[vim db/write_batch.cc +415]
  │   │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │   │   │   ├── PutCF
  │   │   │   │   ├── DeleteCF
  │   │   │   │   ├── SingleDeleteCF
  │   │   │   │   ├── DeleteRangeCF
  │   │   │   │   ├── MergeCF
  │   │   │   │   ├── PutBlobIndexCF
  │   │   │   │   ├── LogData
  │   │   │   │   ├── MarkBeginPrepare
  │   │   │   │   ├── WriteAfterCommit
  │   │   │   │   ├── WriteBeforePrepare
  │   │   │   │   ├── Status::NotSupported
  │   │   │   │   ├── MarkEndPrepare
  │   │   │   │   ├── MarkCommit
  │   │   │   │   ├── MarkRollback
  │   │   │   │   ├── MarkNoop
  │   │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │   │   ├── Status::Corruption
  │   │   │   │   └── Status::OK
  │   │   │   └── VersionEditHandlerBase::Iterate	[vim db/version_edit_handler.cc +18]
  │   │   │       ├── Initialize
  │   │   │       ├── Reader::LastRecordEnd	[vim db/log_reader.cc +234]
  │   │   │       ├── ReadRecord
  │   │   │       ├── DecodeFrom
  │   │   │       ├── AtomicGroupReadBuffer::AddEdit	[vim db/version_set.cc +3700]
  │   │   │       ├── AtomicGroupReadBuffer::IsFull	[vim db/version_set.cc +3734]
  │   │   │       ├── replay_buffer
  │   │   │       ├── ApplyVersionEdit
  │   │   │       ├── Clear
  │   │   │       ├── CheckIterationResult
  │   │   │       └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   ├── sequence [+]
  │   │   │   └── sequence	[vim db/write_batch.cc +1364]
  │   │   └── Status::OK [+]
  │   │       ├── OK	[vim include/rocksdb/io_status.h +67]
  │   │       │   └── IOStatus
  │   │       └── OK	[vim include/rocksdb/status.h +153]
  │   │           └── Status
  │   ├── WriteBatchInternal::InsertInto	[vim db/write_batch.cc +2045]
  │   │   ├── ShouldWriteToMemtable	[vim db/write_thread.h +228]
  │   │   │   └── CallbackFailed	[vim db/write_thread.h +224]
  │   │   ├── inserter	[OUT-OF-TREE]
  │   │   ├── WriteBatchInternal::SetSequence	[vim db/write_batch.cc +755]
  │   │   │   └── EncodeFixed64	[vim util/coding_lean.h +44]
  │   │   ├── set_log_number_ref	[vim db/write_batch.cc +1362]
  │   │   ├── Iterate [+]
  │   │   │   ├── WriteBatch::Iterate	[vim db/write_batch.cc +515]
  │   │   │   │   ├── Status::Corruption
  │   │   │   │   └── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   ├── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │   │   │   │   ├── input
  │   │   │   │   ├── Continue
  │   │   │   │   ├── ReadRecordFromWriteBatch	[vim db/write_batch.cc +415]
  │   │   │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │   │   │   │   ├── PutCF
  │   │   │   │   ├── DeleteCF
  │   │   │   │   ├── SingleDeleteCF
  │   │   │   │   ├── DeleteRangeCF
  │   │   │   │   ├── MergeCF
  │   │   │   │   ├── PutBlobIndexCF
  │   │   │   │   ├── LogData
  │   │   │   │   ├── MarkBeginPrepare
  │   │   │   │   ├── WriteAfterCommit
  │   │   │   │   ├── WriteBeforePrepare
  │   │   │   │   ├── Status::NotSupported
  │   │   │   │   ├── MarkEndPrepare
  │   │   │   │   ├── MarkCommit
  │   │   │   │   ├── MarkRollback
  │   │   │   │   ├── MarkNoop
  │   │   │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │   │   │   │   ├── Status::Corruption
  │   │   │   │   └── Status::OK
  │   │   │   └── VersionEditHandlerBase::Iterate	[vim db/version_edit_handler.cc +18]
  │   │   │       ├── Initialize
  │   │   │       ├── Reader::LastRecordEnd	[vim db/log_reader.cc +234]
  │   │   │       ├── ReadRecord
  │   │   │       ├── DecodeFrom
  │   │   │       ├── AtomicGroupReadBuffer::AddEdit	[vim db/version_set.cc +3700]
  │   │   │       ├── AtomicGroupReadBuffer::IsFull	[vim db/version_set.cc +3734]
  │   │   │       ├── replay_buffer
  │   │   │       ├── ApplyVersionEdit
  │   │   │       ├── Clear
  │   │   │       ├── CheckIterationResult
  │   │   │       └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   ├── sequence [+]
  │   │   │   └── sequence	[vim db/write_batch.cc +1364]
  │   │   └── PostProcess	[vim db/write_batch.cc +1366]
  │   │       ├── GetPostMap	[vim db/write_batch.cc +1262]
  │   │       └── BatchPostProcess	[vim db/memtable.h +279]
  │   └── WriteBatchInternal::InsertInto	[vim db/write_batch.cc +2072]
  │       ├── inserter	[OUT-OF-TREE]
  │       ├── WriteBatchInternal::Sequence	[vim db/write_batch.cc +751]
  │       │   ├── SequenceNumber	[OUT-OF-TREE]
  │       │   └── DecodeFixed64	[vim util/coding_lean.h +88]
  │       ├── Iterate [+]
  │       │   ├── WriteBatch::Iterate	[vim db/write_batch.cc +515]
  │       │   │   ├── Status::Corruption
  │       │   │   └── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │       │   ├── WriteBatchInternal::Iterate	[vim db/write_batch.cc +524]
  │       │   │   ├── input
  │       │   │   ├── Continue
  │       │   │   ├── ReadRecordFromWriteBatch	[vim db/write_batch.cc +415]
  │       │   │   ├── IsTryAgain	[vim include/rocksdb/status.h +419]
  │       │   │   ├── PutCF
  │       │   │   ├── DeleteCF
  │       │   │   ├── SingleDeleteCF
  │       │   │   ├── DeleteRangeCF
  │       │   │   ├── MergeCF
  │       │   │   ├── PutBlobIndexCF
  │       │   │   ├── LogData
  │       │   │   ├── MarkBeginPrepare
  │       │   │   ├── WriteAfterCommit
  │       │   │   ├── WriteBeforePrepare
  │       │   │   ├── Status::NotSupported
  │       │   │   ├── MarkEndPrepare
  │       │   │   ├── MarkCommit
  │       │   │   ├── MarkRollback
  │       │   │   ├── MarkNoop
  │       │   │   ├── WriteBatchInternal::Count	[vim db/write_batch.cc +743]
  │       │   │   ├── Status::Corruption
  │       │   │   └── Status::OK
  │       │   └── VersionEditHandlerBase::Iterate	[vim db/version_edit_handler.cc +18]
  │       │       ├── Initialize
  │       │       ├── Reader::LastRecordEnd	[vim db/log_reader.cc +234]
  │       │       ├── ReadRecord
  │       │       ├── DecodeFrom
  │       │       ├── AtomicGroupReadBuffer::AddEdit	[vim db/version_set.cc +3700]
  │       │       ├── AtomicGroupReadBuffer::IsFull	[vim db/version_set.cc +3734]
  │       │       ├── replay_buffer
  │       │       ├── ApplyVersionEdit
  │       │       ├── Clear
  │       │       ├── CheckIterationResult
  │       │       └── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │       ├── sequence [+]
  │       │   └── sequence	[vim db/write_batch.cc +1364]
  │       └── PostProcess	[vim db/write_batch.cc +1366]
  │           ├── GetPostMap	[vim db/write_batch.cc +1262]
  │           └── BatchPostProcess	[vim db/memtable.h +279]
  ├── PERF_TIMER_START	[OUT-OF-TREE]
  ├── CallbackFailed	[vim db/write_thread.h +224]
  ├── DBImpl::IOStatusCheck	[vim db/db_impl/db_impl_write.cc +873]
  │   ├── IsBusy	[vim include/rocksdb/status.h +394]
  │   ├── IsIncomplete	[vim include/rocksdb/status.h +356]
  │   ├── IsIOFenced	[vim include/rocksdb/status.h +494]
  │   ├── Lock
  │   ├── SetBGError
  │   ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   └── Unlock
  ├── DBImpl::WriteStatusCheck	[vim db/db_impl/db_impl_write.cc +859]
  │   ├── IsIOFenced	[vim include/rocksdb/status.h +494]
  │   │   ├── code [+]
  │   │   │   └── code	[vim include/rocksdb/status.h +94]
  │   │   └── subcode [+]
  │   │       └── subcode	[vim include/rocksdb/status.h +120]
  │   ├── GetBGError	[vim db/error_handler.h +60]
  │   ├── IsBusy	[vim include/rocksdb/status.h +394]
  │   │   └── code [+]
  │   │       └── code	[vim include/rocksdb/status.h +94]
  │   ├── IsIncomplete	[vim include/rocksdb/status.h +356]
  │   │   └── code [+]
  │   │       └── code	[vim include/rocksdb/status.h +94]
  │   ├── Lock [+]
  │   │   ├── Lock	[vim env/mock_env.cc +48]
  │   │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   │   ├── Lock	[vim port/win/port_win.h +137]
  │   │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  │   ├── SetBGError [+]
  │   │   ├── ErrorHandler::SetBGError	[vim db/error_handler.cc +247]
  │   │   │   ├── AssertHeld
  │   │   │   ├── Status::OK
  │   │   │   ├── subcode
  │   │   │   ├── code
  │   │   │   ├── std::make_tuple	[OUT-OF-TREE]
  │   │   │   ├── Status
  │   │   │   ├── ErrorHandler::OverrideNoSpaceError	[vim db/error_handler.cc +413]
  │   │   │   ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │   │   ├── severity
  │   │   │   ├── Status::NoSpace
  │   │   │   └── ErrorHandler::RecoverFromNoSpace	[vim db/error_handler.cc +450]
  │   │   └── ErrorHandler::SetBGError	[vim db/error_handler.cc +327]
  │   │       ├── AssertHeld
  │   │       ├── Status::OK
  │   │       ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │       ├── ToString
  │   │       ├── c_str	[OUT-OF-TREE]
  │   │       ├── DBImpl::DisableFileDeletionsWithLock	[vim db/db_impl/db_impl_files.cc +44]
  │   │       ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │       ├── GetDataLoss	[vim include/rocksdb/io_status.h +63]
  │   │       ├── GetRetryable	[vim include/rocksdb/io_status.h +62]
  │   │       ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │       ├── bg_err	[OUT-OF-TREE]
  │   │       ├── severity
  │   │       ├── ErrorHandler::StartRecoverFromRetryableBGIOError	[vim db/error_handler.cc +540]
  │   │       └── SetBGError
  │   ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   └── Unlock [+]
  │       ├── Unlock	[vim env/mock_env.cc +59]
  │       ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │       ├── Unlock	[vim port/win/port_win.h +144]
  │       └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  ├── Lock [+]
  │   ├── Lock	[vim env/mock_env.cc +48]
  │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   ├── Lock	[vim port/win/port_win.h +137]
  │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  ├── DBImpl::MarkLogsSynced	[vim db/db_impl/db_impl.cc +1316]
  │   ├── AssertHeld [+]
  │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │       └── AssertHeld
  │   ├── AddWal [+]
  │   │   ├── AddWal	[vim db/version_edit.h +456]
  │   │   │   ├── WalMetadata	[vim db/wal_edit.h +35]
  │   │   │   ├── NumEntries
  │   │   │   ├── emplace_back	[OUT-OF-TREE]
  │   │   │   └── std::move	[OUT-OF-TREE]
  │   │   └── WalSet::AddWal	[vim db/wal_edit.cc +107]
  │   │       ├── lower_bound
  │   │       ├── HasSyncedSize	[vim db/wal_edit.h +38]
  │   │       ├── Status::Corruption
  │   │       ├── str	[OUT-OF-TREE]
  │   │       ├── SetSyncedSizeInBytes	[vim db/wal_edit.h +40]
  │   │       ├── GetSyncedSizeInBytes	[vim db/wal_edit.h +42]
  │   │       ├── GetLogNumber
  │   │       ├── GetMetadata	[vim db/wal_edit.h +74]
  │   │       └── Status::OK
  │   ├── WalMetadata	[vim db/wal_edit.h +35]
  │   │   └── synced_size_bytes_	[OUT-OF-TREE]
  │   ├── file [+]
  │   │   ├── file	[vim file/sequence_file_reader.h +51]
  │   │   ├── file	[vim file/random_access_file_reader.h +134]
  │   │   ├── file	[vim db/log_writer.h +85]
  │   │   ├── file	[vim db/log_writer.h +86]
  │   │   ├── file	[vim db/log_reader.h +94]
  │   │   ├── file	[vim db/blob/blob_log_writer.h +62]
  │   │   └── file	[vim db/blob/blob_log_writer.h +64]
  │   ├── GetFileSize [+]
  │   │   ├── GetFileSize	[vim file/writable_file_writer.h +219]
  │   │   ├── GetFileSize	[vim include/rocksdb/env.h +851]
  │   │   ├── GetFileSize	[vim include/rocksdb/env.h +1292]
  │   │   │   └── GetFileSize
  │   │   ├── GetFileSize	[vim include/rocksdb/env.h +1545]
  │   │   │   └── GetFileSize
  │   │   ├── GetFileSize	[vim include/rocksdb/utilities/env_mirror.h +118]
  │   │   │   └── GetFileSize
  │   │   ├── GetFileSize	[vim include/rocksdb/file_system.h +835]
  │   │   ├── GetFileSize	[vim include/rocksdb/file_system.h +1142]
  │   │   │   └── GetFileSize
  │   │   ├── GetFileSize	[vim include/rocksdb/file_system.h +1367]
  │   │   │   └── GetFileSize
  │   │   ├── TraceWriterJniCallback::GetFileSize	[vim java/rocksjni/trace_writer_jnicallback.cc +93]
  │   │   │   ├── getJniEnv
  │   │   │   ├── CallLongMethod	[OUT-OF-TREE]
  │   │   │   ├── ExceptionCheck	[OUT-OF-TREE]
  │   │   │   ├── ExceptionDescribe	[OUT-OF-TREE]
  │   │   │   └── releaseJniEnv
  │   │   ├── GetFileSize	[vim env/fs_posix.cc +670]
  │   │   │   ├── stat	[OUT-OF-TREE]
  │   │   │   ├── c_str	[OUT-OF-TREE]
  │   │   │   ├── IOError
  │   │   │   └── IOStatus::OK
  │   │   ├── FileSystemTracingWrapper::GetFileSize	[vim env/file_system_tracer.cc +170]
  │   │   │   ├── timer	[OUT-OF-TREE]
  │   │   │   ├── Start
  │   │   │   ├── target
  │   │   │   ├── GetFileSize
  │   │   │   ├── ElapsedNanos	[vim util/stop_watch.h +100]
  │   │   │   ├── io_record	[OUT-OF-TREE]
  │   │   │   ├── NowNanos
  │   │   │   ├── ToString
  │   │   │   └── WriteIOOp
  │   │   ├── FSWritableFileTracingWrapper::GetFileSize	[vim env/file_system_tracer.cc +348]
  │   │   │   ├── timer	[OUT-OF-TREE]
  │   │   │   ├── Start
  │   │   │   ├── target
  │   │   │   ├── GetFileSize
  │   │   │   ├── ElapsedNanos	[vim util/stop_watch.h +100]
  │   │   │   ├── io_record	[OUT-OF-TREE]
  │   │   │   ├── NowNanos
  │   │   │   └── WriteIOOp
  │   │   ├── PosixMmapFile::GetFileSize	[vim env/io_posix.cc +1085]
  │   │   ├── PosixWritableFile::GetFileSize	[vim env/io_posix.cc +1288]
  │   │   ├── HdfsEnv::GetFileSize	[vim env/env_hdfs.cc +548]
  │   │   │   ├── hdfsGetPathInfo	[OUT-OF-TREE]
  │   │   │   ├── c_str	[OUT-OF-TREE]
  │   │   │   ├── hdfsFreeFileInfo	[OUT-OF-TREE]
  │   │   │   ├── Status::OK
  │   │   │   └── IOError
  │   │   ├── GetFileSize	[vim env/composite_env_wrapper.h +164]
  │   │   │   └── GetFileSize
  │   │   ├── GetFileSize	[vim env/composite_env_wrapper.h +430]
  │   │   │   └── GetFileSize
  │   │   ├── GetFileSize	[vim env/composite_env_wrapper.h +782]
  │   │   │   └── GetFileSize
  │   │   ├── GetFileSize	[vim env/composite_env_wrapper.h +1014]
  │   │   │   ├── status_to_io_status	[vim include/rocksdb/io_status.h +254]
  │   │   │   └── GetFileSize
  │   │   ├── GetFileSize	[vim env/env_chroot.cc +196]
  │   │   │   ├── EncodePath	[vim env/env_chroot.cc +284]
  │   │   │   └── EnvWrapper::GetFileSize
  │   │   ├── EncryptedWritableFile::GetFileSize	[vim env/env_encryption.cc +304]
  │   │   │   └── GetFileSize
  │   │   ├── GetFileSize	[vim env/env_encryption.cc +830]
  │   │   │   ├── EnvWrapper::GetFileSize
  │   │   │   ├── GetReadableProvider	[vim env/env_encryption.cc +432]
  │   │   │   └── CTREncryptionProvider::GetPrefixLength	[vim env/env_encryption.cc +1012]
  │   │   ├── GetFileSize	[vim env/mock_env.cc +352]
  │   │   │   └── Size
  │   │   ├── MockFileSystem::GetFileSize	[vim env/mock_env.cc +869]
  │   │   │   ├── NormalizeMockPath	[vim env/mock_env.cc +601]
  │   │   │   ├── IOStatus::PathNotFound
  │   │   │   ├── Size
  │   │   │   └── IOStatus::OK
  │   │   ├── GetFileSize	[vim utilities/env_timed.cc +99]
  │   │   │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │   │   └── EnvWrapper::GetFileSize
  │   │   ├── FileTraceWriter::GetFileSize	[vim utilities/trace/file_trace_reader_writer.cc +90]
  │   │   │   └── GetFileSize
  │   │   ├── GetFileSize	[vim utilities/env_mirror.cc +159]
  │   │   │   └── GetFileSize
  │   │   ├── GetFileSize	[vim utilities/env_librados.cc +463]
  │   │   │   └── LOG_DEBUG	[OUT-OF-TREE]
  │   │   ├── EnvLibrados::GetFileSize	[vim utilities/env_librados.cc +1280]
  │   │   │   ├── split
  │   │   │   ├── EnvLibrados::_GetFid	[vim utilities/env_librados.cc +724]
  │   │   │   ├── EnvLibrados::_GetIoctx	[vim utilities/env_librados.cc +847]
  │   │   │   ├── stat	[OUT-OF-TREE]
  │   │   │   ├── err_to_status	[vim utilities/env_librados.cc +41]
  │   │   │   ├── Status::OK
  │   │   │   ├── LOG_DEBUG	[OUT-OF-TREE]
  │   │   │   ├── ToString
  │   │   │   └── c_str	[OUT-OF-TREE]
  │   │   ├── GetFileSize	[vim utilities/blob_db/blob_file.h +185]
  │   │   ├── GetFileSize	[vim db/version_edit.h +139]
  │   │   ├── WinMmapFile::GetFileSize	[vim port/win/io_win.cc +528]
  │   │   ├── WinWritableFile::GetFileSize	[vim port/win/io_win.cc +978]
  │   │   │   └── GetFileNextWriteOffset	[vim port/win/io_win.h +319]
  │   │   └── WinEnv::GetFileSize	[vim port/win/env_win.cc +1398]
  │   │       └── GetFileSize
  │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │   ├── ReleaseWriter	[vim db/db_impl/db_impl.h +1306]
  │   ├── IsWalAddition	[vim db/version_edit.h +464]
  │   ├── LogAndApplyToDefaultColumnFamily	[vim db/version_set.h +920]
  │   │   ├── GetColumnFamilySet	[vim db/version_set.h +1189]
  │   │   ├── ColumnFamilySet::GetDefault	[vim db/column_family.cc +1462]
  │   │   ├── GetLatestMutableCFOptions	[vim db/column_family.h +338]
  │   │   └── LogAndApply [+]
  │   │       ├── LogAndApply	[vim db/version_set.h +937]
  │   │       ├── LogAndApply	[vim db/version_set.h +956]
  │   │       ├── LogAndApply	[vim db/version_set.h +1422]
  │   │       └── VersionSet::LogAndApply	[vim db/version_set.cc +4323]
  │   ├── IsIOError	[vim include/rocksdb/status.h +340]
  │   │   └── code [+]
  │   │       └── code	[vim include/rocksdb/status.h +94]
  │   ├── SetBGError [+]
  │   │   ├── ErrorHandler::SetBGError	[vim db/error_handler.cc +247]
  │   │   │   ├── AssertHeld
  │   │   │   ├── Status::OK
  │   │   │   ├── subcode
  │   │   │   ├── code
  │   │   │   ├── std::make_tuple	[OUT-OF-TREE]
  │   │   │   ├── Status
  │   │   │   ├── ErrorHandler::OverrideNoSpaceError	[vim db/error_handler.cc +413]
  │   │   │   ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │   │   ├── severity
  │   │   │   ├── Status::NoSpace
  │   │   │   └── ErrorHandler::RecoverFromNoSpace	[vim db/error_handler.cc +450]
  │   │   └── ErrorHandler::SetBGError	[vim db/error_handler.cc +327]
  │   │       ├── AssertHeld
  │   │       ├── Status::OK
  │   │       ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │       ├── ToString
  │   │       ├── c_str	[OUT-OF-TREE]
  │   │       ├── DBImpl::DisableFileDeletionsWithLock	[vim db/db_impl/db_impl_files.cc +44]
  │   │       ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │       ├── GetDataLoss	[vim include/rocksdb/io_status.h +63]
  │   │       ├── GetRetryable	[vim include/rocksdb/io_status.h +62]
  │   │       ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │       ├── bg_err	[OUT-OF-TREE]
  │   │       ├── severity
  │   │       ├── ErrorHandler::StartRecoverFromRetryableBGIOError	[vim db/error_handler.cc +540]
  │   │       └── SetBGError
  │   ├── io_status [+]
  │   │   ├── io_status	[vim table/plain/plain_table_builder.h +66]
  │   │   ├── io_status	[vim table/mock_table.cc +162]
  │   │   │   └── IOStatus::OK
  │   │   ├── io_status	[vim table/cuckoo/cuckoo_table_builder.h +49]
  │   │   ├── BlockBasedTableBuilder::io_status	[vim table/block_based/block_based_table_builder.cc +1338]
  │   │   │   └── GetIOStatus	[vim table/block_based/block_based_table_builder.cc +358]
  │   │   ├── io_status	[vim db/flush_job.h +96]
  │   │   ├── io_status	[vim db/compaction/compaction_job.h +105]
  │   │   └── io_status	[vim db/version_set.h +1203]
  │   └── SignalAll [+]
  │       ├── CondVar::SignalAll	[vim port/port_posix.cc +138]
  │       │   ├── PthreadCall
  │       │   └── pthread_cond_broadcast	[OUT-OF-TREE]
  │       ├── CondVar::SignalAll	[vim port/win/port_win.cc +130]
  │       │   └── notify_all	[OUT-OF-TREE]
  │       └── SignalAll	[vim monitoring/instrumented_mutex.h +85]
  │           └── SignalAll
  ├── DBImpl::MarkLogsNotSynced	[vim db/db_impl/db_impl.cc +1355]
  │   ├── AssertHeld [+]
  │   │   ├── Mutex::AssertHeld	[vim port/port_posix.cc +90]
  │   │   ├── AssertHeld	[vim port/win/port_win.h +153]
  │   │   ├── AssertHeld	[vim port/win/port_win.h +193]
  │   │   ├── AssertHeld	[vim port/port_posix.h +144]
  │   │   └── AssertHeld	[vim monitoring/instrumented_mutex.h +38]
  │   │       └── AssertHeld
  │   └── SignalAll [+]
  │       ├── CondVar::SignalAll	[vim port/port_posix.cc +138]
  │       │   ├── PthreadCall
  │       │   └── pthread_cond_broadcast	[OUT-OF-TREE]
  │       ├── CondVar::SignalAll	[vim port/win/port_win.cc +130]
  │       │   └── notify_all	[OUT-OF-TREE]
  │       └── SignalAll	[vim monitoring/instrumented_mutex.h +85]
  │           └── SignalAll
  ├── Unlock [+]
  │   ├── Unlock	[vim env/mock_env.cc +59]
  │   ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │   ├── Unlock	[vim port/win/port_win.h +144]
  │   └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  ├── FlushWAL [+]
  │   ├── FlushWAL	[vim include/rocksdb/db.h +1239]
  │   │   └── Status::NotSupported [+]
  │   │       ├── NotSupported	[vim include/rocksdb/io_status.h +69]
  │   │       │   ├── Slice
  │   │       │   └── IOStatus
  │   │       ├── NotSupported	[vim include/rocksdb/io_status.h +72]
  │   │       │   └── IOStatus
  │   │       ├── NotSupported	[vim include/rocksdb/status.h +181]
  │   │       │   ├── Slice
  │   │       │   └── Status
  │   │       └── NotSupported	[vim include/rocksdb/status.h +184]
  │   │           └── Status
  │   ├── FlushWAL	[vim include/rocksdb/utilities/stackable_db.h +334]
  │   │   └── FlushWAL
  │   └── DBImpl::FlushWAL	[vim db/db_impl/db_impl.cc +1191]
  │       ├── Writer::WriteBuffer	[vim db/log_writer.cc +40]
  │       │   └── Flush
  │       ├── ROCKS_LOG_ERROR	[OUT-OF-TREE]
  │       ├── ToString [+]
  │       │   ├── Configurable::ToString	[vim options/configurable.cc +458]
  │       │   │   └── SerializeOptions
  │       │   ├── Status::ToString	[vim util/status.cc +79]
  │       │   │   ├── code
  │       │   │   └── result	[OUT-OF-TREE]
  │       │   ├── ToString	[vim util/string_util.h +23]
  │       │   │   └── std::to_string	[OUT-OF-TREE]
  │       │   ├── Slice::ToString	[vim util/slice.cc +157]
  │       │   │   ├── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │       │   │   └── toHex	[vim util/slice.cc +120]
  │       │   ├── ToString	[vim include/rocksdb/configurable.h +180]
  │       │   │   └── ToString
  │       │   ├── ToString	[vim include/rocksdb/table_properties.h +146]
  │       │   │   └── Name
  │       │   ├── ToString	[vim include/rocksdb/utilities/ldb_cmd_execute_result.h +27]
  │       │   ├── ToString	[vim include/rocksdb/statistics.h +564]
  │       │   │   └── std::string	[OUT-OF-TREE]
  │       │   ├── ToString	[vim include/rocksdb/file_system.h +132]
  │       │   │   └── str	[OUT-OF-TREE]
  │       │   ├── ToString	[vim utilities/simulator_cache/sim_cache.cc +287]
  │       │   │   ├── std::to_string	[OUT-OF-TREE]
  │       │   │   ├── get_miss_counter	[vim utilities/simulator_cache/sim_cache.cc +272]
  │       │   │   └── get_hit_counter	[vim utilities/simulator_cache/sim_cache.cc +276]
  │       │   ├── CompactOnDeletionCollectorFactory::ToString	[vim utilities/table_properties_collectors/compact_on_deletion_collector.cc +105]
  │       │   │   ├── Name
  │       │   │   └── str	[OUT-OF-TREE]
  │       │   ├── PersistentCacheConfig::ToString	[vim utilities/persistent_cache/persistent_cache_tier.cc +16]
  │       │   │   └── c_str	[OUT-OF-TREE]
  │       │   ├── ToString	[vim table/block_based/filter_block.h +151]
  │       │   │   └── error_msg	[OUT-OF-TREE]
  │       │   ├── BlockBasedFilterBlockReader::ToString	[vim table/block_based/block_based_filter_block.cc +306]
  │       │   │   ├── FilterBlockReaderCommon::GetOrReadFilterBlock	[vim table/block_based/filter_block_reader_common.cc +66]
  │       │   │   ├── BlockBasedFilterBlockReader::ParseFieldsFromBlock	[vim table/block_based/block_based_filter_block.cc +221]
  │       │   │   ├── GetValue
  │       │   │   ├── std::string	[OUT-OF-TREE]
  │       │   │   ├── s_bo	[OUT-OF-TREE]
  │       │   │   ├── s_hd	[OUT-OF-TREE]
  │       │   │   ├── s_fb	[OUT-OF-TREE]
  │       │   │   ├── DecodeFixed32	[vim util/coding_lean.h +74]
  │       │   │   ├── ROCKSDB_NAMESPACE::ToString
  │       │   │   ├── Slice
  │       │   │   ├── AppendItem
  │       │   │   └── ToString
  │       │   ├── TableProperties::ToString	[vim table/table_properties.cc +72]
  │       │   │   ├── ROCKSDB_NAMESPACE::ToString
  │       │   │   ├── std::string	[OUT-OF-TREE]
  │       │   │   └── AppendProperty
  │       │   ├── BlockHandle::ToString	[vim table/format.cc +82]
  │       │   │   ├── EncodeTo
  │       │   │   ├── Slice
  │       │   │   └── ToString
  │       │   ├── IndexValue::ToString	[vim table/format.cc +136]
  │       │   │   ├── EncodeTo
  │       │   │   ├── Slice
  │       │   │   └── ToString
  │       │   ├── Footer::ToString	[vim table/format.cc +262]
  │       │   │   ├── IsLegacyFooterFormat	[vim table/format.cc +147]
  │       │   │   ├── ToString
  │       │   │   └── ROCKSDB_NAMESPACE::ToString
  │       │   ├── BackupStatistics::ToString	[vim utilities/backupable/backupable_db.cc +81]
  │       │   │   ├── BackupStatistics::GetNumberSuccessBackup	[vim utilities/backupable/backupable_db.cc +74]
  │       │   │   └── BackupStatistics::GetNumberFailBackup	[vim utilities/backupable/backupable_db.cc +77]
  │       │   ├── HistogramWindowingImpl::ToString	[vim monitoring/histogram_windowing.cc +98]
  │       │   │   └── ToString
  │       │   ├── PerfContext::ToString	[vim monitoring/perf_context.cc +450]
  │       │   ├── IOStatsContext::ToString	[vim monitoring/iostats_context.cc +43]
  │       │   │   ├── IOSTATS_CONTEXT_OUTPUT	[OUT-OF-TREE]
  │       │   │   ├── str	[OUT-OF-TREE]
  │       │   │   └── find_last_not_of	[OUT-OF-TREE]
  │       │   ├── HistogramStat::ToString	[vim monitoring/histogram.cc +182]
  │       │   │   ├── num
  │       │   │   ├── Average
  │       │   │   ├── StandardDeviation
  │       │   │   ├── min
  │       │   │   ├── Median
  │       │   │   ├── max
  │       │   │   ├── Percentile
  │       │   │   ├── bucket_at	[vim monitoring/histogram.h +73]
  │       │   │   ├── BucketLimit	[vim monitoring/histogram.h +42]
  │       │   │   └── push_back	[vim third-party/folly/folly/synchronization/ParkingLot.h +74]
  │       │   ├── HistogramImpl::ToString	[vim monitoring/histogram.cc +279]
  │       │   │   └── ToString
  │       │   └── StatisticsImpl::ToString	[vim monitoring/statistics.cc +380]
  │       │       ├── StatisticsImpl::getTickerCountLocked	[vim monitoring/statistics.cc +265]
  │       │       ├── StatisticsImpl::getHistogramImplLocked	[vim monitoring/statistics.cc +280]
  │       │       ├── Data
  │       │       ├── c_str	[OUT-OF-TREE]
  │       │       └── shrink_to_fit	[OUT-OF-TREE]
  │       ├── c_str	[OUT-OF-TREE]
  │       ├── DBImpl::IOStatusCheck	[vim db/db_impl/db_impl_write.cc +873]
  │       │   ├── IsBusy	[vim include/rocksdb/status.h +394]
  │       │   ├── IsIncomplete	[vim include/rocksdb/status.h +356]
  │       │   ├── IsIOFenced	[vim include/rocksdb/status.h +494]
  │       │   ├── Lock
  │       │   ├── SetBGError
  │       │   ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │       │   └── Unlock
  │       ├── std::move	[OUT-OF-TREE]
  │       ├── Status::OK [+]
  │       │   ├── OK	[vim include/rocksdb/io_status.h +67]
  │       │   │   └── IOStatus
  │       │   └── OK	[vim include/rocksdb/status.h +153]
  │       │       └── Status
  │       ├── ROCKS_LOG_DEBUG	[OUT-OF-TREE]
  │       └── SyncWAL [+]
  │           ├── SyncWAL	[vim include/rocksdb/utilities/stackable_db.h +332]
  │           ├── DBImpl::SyncWAL	[vim db/db_impl/db_impl.cc +1222]
  │           ├── SyncWAL	[vim db/db_impl/db_impl_secondary.h +195]
  │           └── SyncWAL	[vim db/db_impl/db_impl_readonly.h +110]
  ├── SyncWAL [+]
  │   ├── SyncWAL	[vim include/rocksdb/utilities/stackable_db.h +332]
  │   ├── DBImpl::SyncWAL	[vim db/db_impl/db_impl.cc +1222]
  │   ├── SyncWAL	[vim db/db_impl/db_impl_secondary.h +195]
  │   └── SyncWAL	[vim db/db_impl/db_impl_readonly.h +110]
  ├── WriteThread::CompleteParallelMemTableWriter	[vim db/write_thread.cc +596]
  │   ├── guard	[OUT-OF-TREE]
  │   ├── StateMutex	[vim db/write_thread.h +238]
  │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   ├── port::AsmVolatilePause [+]
  │   │   │   ├── AsmVolatilePause	[vim port/win/port_win.h +285]
  │   │   │   └── AsmVolatilePause	[vim port/port_posix.h +166]
  │   │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │   ├── Random::GetTLSInstance	[vim util/random.cc +25]
  │   │   │   ├── std::hash
  │   │   │   ├── std::this_thread::get_id
  │   │   │   └── Random	[vim util/random.h +39]
  │   │   ├── OneIn [+]
  │   │   │   ├── OneIn	[vim util/random.h +69]
  │   │   │   ├── OneIn	[vim util/random.h +131]
  │   │   │   └── OneIn	[vim util/random.h +163]
  │   │   ├── std::this_thread::yield	[OUT-OF-TREE]
  │   │   ├── std::chrono::steady_clock::now	[OUT-OF-TREE]
  │   │   ├── std::chrono::microseconds	[OUT-OF-TREE]
  │   │   ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   └── WriteThread::BlockingAwaitState	[vim db/write_thread.cc +34]
  │   │       ├── CreateMutex	[vim db/write_thread.h +193]
  │   │       ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │       ├── guard	[OUT-OF-TREE]
  │   │       ├── StateMutex	[vim db/write_thread.h +238]
  │   │       ├── StateCV	[vim db/write_thread.h +243]
  │   │       └── wait
  │   └── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  ├── SetLastSequence [+]
  │   ├── SetLastSequence	[vim db/version_edit.h +362]
  │   └── SetLastSequence	[vim db/version_set.h +1078]
  ├── DBImpl::MemTableInsertStatusCheck	[vim db/db_impl/db_impl_write.cc +887]
  │   ├── Lock [+]
  │   │   ├── Lock	[vim env/mock_env.cc +48]
  │   │   ├── TransactionDBMutexImpl::Lock	[vim utilities/transactions/transaction_db_mutex_impl.cc +64]
  │   │   ├── Mutex::Lock	[vim port/port_posix.cc +76]
  │   │   ├── Lock	[vim port/win/port_win.h +137]
  │   │   └── InstrumentedMutex::Lock	[vim monitoring/instrumented_mutex.cc +25]
  │   ├── IsBGWorkStopped	[vim db/error_handler.h +71]
  │   │   └── severity [+]
  │   │       └── severity	[vim include/rocksdb/status.h +137]
  │   ├── SetBGError [+]
  │   │   ├── ErrorHandler::SetBGError	[vim db/error_handler.cc +247]
  │   │   │   ├── AssertHeld
  │   │   │   ├── Status::OK
  │   │   │   ├── subcode
  │   │   │   ├── code
  │   │   │   ├── std::make_tuple	[OUT-OF-TREE]
  │   │   │   ├── Status
  │   │   │   ├── ErrorHandler::OverrideNoSpaceError	[vim db/error_handler.cc +413]
  │   │   │   ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │   │   ├── severity
  │   │   │   ├── Status::NoSpace
  │   │   │   └── ErrorHandler::RecoverFromNoSpace	[vim db/error_handler.cc +450]
  │   │   └── ErrorHandler::SetBGError	[vim db/error_handler.cc +327]
  │   │       ├── AssertHeld
  │   │       ├── Status::OK
  │   │       ├── ROCKS_LOG_WARN	[OUT-OF-TREE]
  │   │       ├── ToString
  │   │       ├── c_str	[OUT-OF-TREE]
  │   │       ├── DBImpl::DisableFileDeletionsWithLock	[vim db/db_impl/db_impl_files.cc +44]
  │   │       ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   │       ├── GetDataLoss	[vim include/rocksdb/io_status.h +63]
  │   │       ├── GetRetryable	[vim include/rocksdb/io_status.h +62]
  │   │       ├── EventHelpers::NotifyOnBackgroundError	[vim db/event_helpers.cc +41]
  │   │       ├── bg_err	[OUT-OF-TREE]
  │   │       ├── severity
  │   │       ├── ErrorHandler::StartRecoverFromRetryableBGIOError	[vim db/error_handler.cc +540]
  │   │       └── SetBGError
  │   ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   └── Unlock [+]
  │       ├── Unlock	[vim env/mock_env.cc +59]
  │       ├── Mutex::Unlock	[vim port/port_posix.cc +83]
  │       ├── Unlock	[vim port/win/port_win.h +144]
  │       └── Unlock	[vim monitoring/instrumented_mutex.h +34]
  ├── WriteThread::ExitAsBatchGroupLeader	[vim db/write_thread.cc +628]
  │   ├── PermitUncheckedError	[vim include/rocksdb/status.h +68]
  │   ├── WriteThread::CompleteFollower	[vim db/write_thread.cc +320]
  │   │   └── SetState [+]
  │   │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   ├── ShouldWriteToMemtable	[vim db/write_thread.h +228]
  │   │   └── CallbackFailed	[vim db/write_thread.h +224]
  │   ├── WriteThread::CompleteLeader	[vim db/write_thread.cc +305]
  │   │   └── SetState [+]
  │   │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │   │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  │   ├── WriteThread::LinkGroup	[vim db/write_thread.cc +257]
  │   │   └── compare_exchange_weak	[OUT-OF-TREE]
  │   ├── WriteThread::FindNextLeader	[vim db/write_thread.cc +294]
  │   ├── WriteThread::AwaitState	[vim db/write_thread.cc +62]
  │   │   ├── port::AsmVolatilePause [+]
  │   │   │   ├── AsmVolatilePause	[vim port/win/port_win.h +285]
  │   │   │   └── AsmVolatilePause	[vim port/port_posix.h +166]
  │   │   ├── PERF_TIMER_GUARD	[OUT-OF-TREE]
  │   │   ├── Random::GetTLSInstance	[vim util/random.cc +25]
  │   │   │   ├── std::hash
  │   │   │   ├── std::this_thread::get_id
  │   │   │   └── Random	[vim util/random.h +39]
  │   │   ├── OneIn [+]
  │   │   │   ├── OneIn	[vim util/random.h +69]
  │   │   │   ├── OneIn	[vim util/random.h +131]
  │   │   │   └── OneIn	[vim util/random.h +163]
  │   │   ├── std::this_thread::yield	[OUT-OF-TREE]
  │   │   ├── std::chrono::steady_clock::now	[OUT-OF-TREE]
  │   │   ├── std::chrono::microseconds	[OUT-OF-TREE]
  │   │   ├── TEST_SYNC_POINT_CALLBACK	[OUT-OF-TREE]
  │   │   └── WriteThread::BlockingAwaitState	[vim db/write_thread.cc +34]
  │   │       ├── CreateMutex	[vim db/write_thread.h +193]
  │   │       ├── compare_exchange_strong	[OUT-OF-TREE]
  │   │       ├── guard	[OUT-OF-TREE]
  │   │       ├── StateMutex	[vim db/write_thread.h +238]
  │   │       ├── StateCV	[vim db/write_thread.h +243]
  │   │       └── wait
  │   ├── compare_exchange_strong	[OUT-OF-TREE]
  │   ├── WriteThread::CreateMissingNewerLinks	[vim db/write_thread.cc +282]
  │   └── SetState [+]
  │       ├── SetState	[vim include/rocksdb/utilities/transaction.h +509]
  │       └── WriteThread::SetState	[vim db/write_thread.cc +210]
  └── FinalStatus	[vim db/write_thread.h +205]
  
