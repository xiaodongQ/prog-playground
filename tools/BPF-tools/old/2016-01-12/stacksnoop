#!/usr/bin/python
#
# stacksnoop	Trace ext4_sync_fs() function with stack trace.
#		For Linux, uses BCC, eBPF. Embedded C.
#
# Written as a proof of concept of stack tracing in bcc/eBPF.
#
# Copyright (c) 2016 Brendan Gregg.
# Licensed under the Apache License, Version 2.0 (the "License")
#
# 12-Jan-2016	Brendan Gregg	Created this.

from __future__ import print_function
from bcc import BPF

# define BPF program
bpf_text = """
#include <uapi/linux/ptrace.h>

void kprobe__ext4_sync_fs(struct pt_regs *ctx) {
	u64 bp = 0, ret = 0;
	int depth = 0;

	bpf_trace_printk("ext4_sync_fs():\\n");
	if (ctx->ip)
		bpf_trace_printk("     ip: %llx\\n", ctx->ip);
	bp = ctx->bp;

	// unrolled loop, 10 frames deep:
	PRINT_STACKFRAME_OR_RETURN
	PRINT_STACKFRAME_OR_RETURN
	PRINT_STACKFRAME_OR_RETURN
	PRINT_STACKFRAME_OR_RETURN
	PRINT_STACKFRAME_OR_RETURN
	PRINT_STACKFRAME_OR_RETURN
	PRINT_STACKFRAME_OR_RETURN
	PRINT_STACKFRAME_OR_RETURN
	PRINT_STACKFRAME_OR_RETURN
	PRINT_STACKFRAME_OR_RETURN
};
"""
sf_text = """
	if (bp) {
		if (bpf_probe_read(&ret, sizeof(ret), (void *)(bp+8)))
			return;
		bpf_trace_printk("   ret%d: %llx\\n", depth, ret);
		if (bpf_probe_read(&bp, sizeof(bp), (void *)bp))
			return;
		depth++;
	} else { return; }
"""
bpf_text = bpf_text.replace('PRINT_STACKFRAME_OR_RETURN', sf_text)

# initialize BPF
b = BPF(text=bpf_text)

# header
print("%-18s %s" % ("TIME(s)", "CALL"))

# format output
while 1:
	(task, pid, cpu, flags, ts, msg) = b.trace_fields()
	# parse the bpf_trace_printk() output by column location:
	if msg[0:3] == "   ":
		ip = b.ksym(int(msg[9:], 16))
		msg = msg + " " + ip
	print("%-18.9f %s" % (ts, msg))
