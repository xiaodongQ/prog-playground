<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Icicle Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>__x86_indirect_thunk_rax (18,308,358 samples, 0.08%)</title><rect x="1171.3" y="52" width="1.0" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1174.29" y="62.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Runnable, void  (2,573,050 samples, 0.01%)</title><rect x="1185.2" y="148" width="0.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1188.20" y="158.5" ></text>
</g>
<g >
<title>start_secondary (2,362,760 samples, 0.01%)</title><rect x="1182.8" y="132" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1185.78" y="142.5" ></text>
</g>
<g >
<title>[sysbench] (3,105,681 samples, 0.01%)</title><rect x="1171.1" y="68" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1174.13" y="78.5" ></text>
</g>
<g >
<title>cpu_startup_entry (63,591,825 samples, 0.28%)</title><rect x="1174.8" y="116" width="3.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1177.78" y="126.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (1,929,488 samples, 0.01%)</title><rect x="1181.5" y="52" width="0.1" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1184.53" y="62.5" ></text>
</g>
<g >
<title>acpi_idle_enter (2,071,013 samples, 0.01%)</title><rect x="1172.7" y="68" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1175.70" y="78.5" ></text>
</g>
<g >
<title>[sysbench] (3,046,524 samples, 0.01%)</title><rect x="1188.0" y="68" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.02" y="78.5" ></text>
</g>
<g >
<title>tick_sched_timer (2,159,697 samples, 0.01%)</title><rect x="1188.2" y="148" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1191.19" y="158.5" ></text>
</g>
<g >
<title>__update_load_avg_cfs_rq (5,134,148 samples, 0.02%)</title><rect x="1169.7" y="52" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1172.72" y="62.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (2,071,013 samples, 0.01%)</title><rect x="1172.7" y="164" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1175.70" y="174.5" ></text>
</g>
<g >
<title>cpuidle_enter (2,362,760 samples, 0.01%)</title><rect x="1182.8" y="84" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1185.78" y="94.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (2,159,697 samples, 0.01%)</title><rect x="1188.2" y="164" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1191.19" y="174.5" ></text>
</g>
<g >
<title>mysqld (2,548,378 samples, 0.01%)</title><rect x="1169.7" y="84" width="0.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1172.72" y="94.5" ></text>
</g>
<g >
<title>__update_load_avg_se (2,244,722 samples, 0.01%)</title><rect x="1170.0" y="52" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1172.99" y="62.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (2,071,013 samples, 0.01%)</title><rect x="1172.7" y="84" width="0.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1175.70" y="94.5" ></text>
</g>
<g >
<title>menu_select (2,000,799 samples, 0.01%)</title><rect x="1183.9" y="52" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1186.86" y="62.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (57,469,881 samples, 0.26%)</title><rect x="1175.1" y="148" width="3.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1178.10" y="158.5" ></text>
</g>
<g >
<title>interrupt_entry (3,465,383 samples, 0.02%)</title><rect x="1182.8" y="52" width="0.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1185.78" y="62.5" ></text>
</g>
<g >
<title>sysbench (22,086,207,737 samples, 98.01%)</title><rect x="11.4" y="68" width="1156.5" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="14.43" y="78.5" >sysbench</text>
</g>
<g >
<title>syscall (1,924,412 samples, 0.01%)</title><rect x="1181.5" y="68" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1184.53" y="78.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (2,362,760 samples, 0.01%)</title><rect x="1182.8" y="68" width="0.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1185.78" y="78.5" ></text>
</g>
<g >
<title>[unknown] (11,053,783 samples, 0.05%)</title><rect x="10.7" y="84" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.74" y="94.5" ></text>
</g>
<g >
<title>[sysbench] (22,099,295,353 samples, 98.06%)</title><rect x="10.7" y="52" width="1157.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="13.74" y="62.5" >[sysbench]</text>
</g>
<g >
<title>update_load_avg (2,405,374 samples, 0.01%)</title><rect x="1189.4" y="52" width="0.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1192.39" y="62.5" ></text>
</g>
<g >
<title>switch_fpu_return (3,590,469 samples, 0.02%)</title><rect x="1187.4" y="52" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1190.39" y="62.5" ></text>
</g>
<g >
<title>sysbench (2,159,697 samples, 0.01%)</title><rect x="1188.2" y="244" width="0.1" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1191.19" y="254.5" ></text>
</g>
<g >
<title>zsh (2,355,699 samples, 0.01%)</title><rect x="1189.0" y="68" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1191.99" y="78.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,685,010 samples, 0.01%)</title><rect x="1180.5" y="148" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1183.52" y="158.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (3,188,468 samples, 0.01%)</title><rect x="1172.8" y="68" width="0.2" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1175.82" y="78.5" ></text>
</g>
<g >
<title>[unknown] (11,053,783 samples, 0.05%)</title><rect x="10.7" y="68" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.74" y="78.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (63,591,825 samples, 0.28%)</title><rect x="1174.8" y="68" width="3.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1177.78" y="78.5" ></text>
</g>
<g >
<title>cpuidle_enter (63,591,825 samples, 0.28%)</title><rect x="1174.8" y="84" width="3.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1177.78" y="94.5" ></text>
</g>
<g >
<title>acpi_idle_enter (88,445,308 samples, 0.39%)</title><rect x="1174.8" y="52" width="4.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1177.78" y="62.5" ></text>
</g>
<g >
<title>pfs_memory_alloc_vc (2,573,050 samples, 0.01%)</title><rect x="1185.2" y="52" width="0.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1188.20" y="62.5" ></text>
</g>
<g >
<title>mysqld (2,179,891 samples, 0.01%)</title><rect x="1187.5" y="84" width="0.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1190.47" y="94.5" ></text>
</g>
<g >
<title>[unknown] (2,033,833 samples, 0.01%)</title><rect x="11.3" y="84" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.32" y="94.5" ></text>
</g>
<g >
<title>mysqld (1,924,412 samples, 0.01%)</title><rect x="1181.5" y="100" width="0.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1184.53" y="110.5" ></text>
</g>
<g >
<title>start_kernel (6,121,944 samples, 0.03%)</title><rect x="1174.8" y="132" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1177.78" y="142.5" ></text>
</g>
<g >
<title>sysbench (13,430,386 samples, 0.06%)</title><rect x="1170.2" y="68" width="0.7" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1173.20" y="78.5" ></text>
</g>
<g >
<title>Clone_persist_gtid::flush_gtids (2,573,050 samples, 0.01%)</title><rect x="1185.2" y="116" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1188.20" y="126.5" ></text>
</g>
<g >
<title>cpuidle_enter (2,071,013 samples, 0.01%)</title><rect x="1172.7" y="100" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1175.70" y="110.5" ></text>
</g>
<g >
<title>swapper (6,121,944 samples, 0.03%)</title><rect x="1174.8" y="164" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1177.78" y="174.5" ></text>
</g>
<g >
<title>sysbench (11,053,783 samples, 0.05%)</title><rect x="10.7" y="100" width="0.6" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="13.74" y="110.5" ></text>
</g>
<g >
<title>tick_sched_timer (5,412,116 samples, 0.02%)</title><rect x="1188.0" y="52" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1191.02" y="62.5" ></text>
</g>
<g >
<title>__switch_to_asm (4,506,962 samples, 0.02%)</title><rect x="1169.4" y="52" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1172.43" y="62.5" ></text>
</g>
<g >
<title>sysbench (2,033,833 samples, 0.01%)</title><rect x="11.3" y="100" width="0.1" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="14.32" y="110.5" ></text>
</g>
<g >
<title>my_malloc (2,573,050 samples, 0.01%)</title><rect x="1185.2" y="68" width="0.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1188.20" y="78.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;Malloc_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;binary_log::Uuid const, std::unique_ptr&lt;Sid_map::Node, My_free_deleter&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_buckets (2,573,050 samples, 0.01%)</title><rect x="1185.2" y="84" width="0.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1188.20" y="94.5" ></text>
</g>
<g >
<title>update_process_times (2,159,697 samples, 0.01%)</title><rect x="1188.2" y="116" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1191.19" y="126.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (2,362,760 samples, 0.01%)</title><rect x="1182.8" y="148" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1185.78" y="158.5" ></text>
</g>
<g >
<title>cpu_startup_entry (2,362,760 samples, 0.01%)</title><rect x="1182.8" y="116" width="0.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1185.78" y="126.5" ></text>
</g>
<g >
<title>perf_ibs_stop (2,159,697 samples, 0.01%)</title><rect x="1188.2" y="68" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1191.19" y="78.5" ></text>
</g>
<g >
<title>swapper (2,362,760 samples, 0.01%)</title><rect x="1182.8" y="164" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1185.78" y="174.5" ></text>
</g>
<g >
<title>__libc_fork (2,685,010 samples, 0.01%)</title><rect x="1180.5" y="164" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1183.52" y="174.5" ></text>
</g>
<g >
<title>sysbench (3,105,681 samples, 0.01%)</title><rect x="1171.1" y="84" width="0.2" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1174.13" y="94.5" ></text>
</g>
<g >
<title>sysbench (3,066,700 samples, 0.01%)</title><rect x="1171.3" y="84" width="0.2" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1174.29" y="94.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (15,214,309 samples, 0.07%)</title><rect x="1170.1" y="52" width="0.8" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1173.10" y="62.5" ></text>
</g>
<g >
<title>enqueue_entity (3,067,773 samples, 0.01%)</title><rect x="1181.3" y="52" width="0.2" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="1184.33" y="62.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (2,033,833 samples, 0.01%)</title><rect x="11.3" y="68" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.32" y="78.5" ></text>
</g>
<g >
<title>swapper (6,862,957 samples, 0.03%)</title><rect x="1171.9" y="68" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1174.87" y="78.5" ></text>
</g>
<g >
<title>sysbench (3,046,524 samples, 0.01%)</title><rect x="1188.0" y="84" width="0.2" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1191.02" y="94.5" ></text>
</g>
<g >
<title>swapper (2,880,907 samples, 0.01%)</title><rect x="1172.8" y="84" width="0.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1175.84" y="94.5" ></text>
</g>
<g >
<title>zsh (2,685,010 samples, 0.01%)</title><rect x="1180.5" y="180" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1183.52" y="190.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (2,573,050 samples, 0.01%)</title><rect x="1185.2" y="164" width="0.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1188.20" y="174.5" ></text>
</g>
<g >
<title>do_idle (2,071,013 samples, 0.01%)</title><rect x="1172.7" y="116" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1175.70" y="126.5" ></text>
</g>
<g >
<title>timekeeping_advance (2,046,939 samples, 0.01%)</title><rect x="1188.3" y="52" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1191.31" y="62.5" ></text>
</g>
<g >
<title>filemap_map_pages (3,870,793 samples, 0.02%)</title><rect x="1181.8" y="52" width="0.2" height="15.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="1184.78" y="62.5" ></text>
</g>
<g >
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (2,179,891 samples, 0.01%)</title><rect x="1187.5" y="68" width="0.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1190.47" y="78.5" ></text>
</g>
<g >
<title>copy_page (1,940,924 samples, 0.01%)</title><rect x="1180.4" y="52" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1183.38" y="62.5" ></text>
</g>
<g >
<title>perf_event_task_tick (2,159,697 samples, 0.01%)</title><rect x="1188.2" y="84" width="0.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1191.19" y="94.5" ></text>
</g>
<g >
<title>start_secondary (57,469,881 samples, 0.26%)</title><rect x="1175.1" y="132" width="3.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1178.10" y="142.5" ></text>
</g>
<g >
<title>swapper (57,469,881 samples, 0.26%)</title><rect x="1175.1" y="164" width="3.0" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1178.10" y="174.5" ></text>
</g>
<g >
<title>_do_fork (2,685,010 samples, 0.01%)</title><rect x="1180.5" y="116" width="0.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1183.52" y="126.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (6,121,944 samples, 0.03%)</title><rect x="1174.8" y="148" width="0.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1177.78" y="158.5" ></text>
</g>
<g >
<title>cpu_startup_entry (2,071,013 samples, 0.01%)</title><rect x="1172.7" y="132" width="0.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1175.70" y="142.5" ></text>
</g>
<g >
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (2,548,378 samples, 0.01%)</title><rect x="1169.7" y="68" width="0.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1172.72" y="78.5" ></text>
</g>
<g >
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (2,307,609 samples, 0.01%)</title><rect x="1170.9" y="68" width="0.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1173.92" y="78.5" ></text>
</g>
<g >
<title>do_lookup_x (3,693,542 samples, 0.02%)</title><rect x="1181.0" y="52" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1184.04" y="62.5" ></text>
</g>
<g >
<title>start_secondary (2,071,013 samples, 0.01%)</title><rect x="1172.7" y="148" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1175.70" y="158.5" ></text>
</g>
<g >
<title>all (22,535,607,245 samples, 100%)</title><rect x="10.0" y="36" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="46.5" ></text>
</g>
<g >
<title>tick_sched_handle (2,159,697 samples, 0.01%)</title><rect x="1188.2" y="132" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1191.19" y="142.5" ></text>
</g>
<g >
<title>swapper (24,853,483 samples, 0.11%)</title><rect x="1178.1" y="68" width="1.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1181.11" y="78.5" ></text>
</g>
<g >
<title>swapper (2,000,799 samples, 0.01%)</title><rect x="1183.9" y="68" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1186.86" y="78.5" ></text>
</g>
<g >
<title>do_idle (63,591,825 samples, 0.28%)</title><rect x="1174.8" y="100" width="3.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1177.78" y="110.5" ></text>
</g>
<g >
<title>newidle_balance (4,404,431 samples, 0.02%)</title><rect x="1184.5" y="52" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1187.48" y="62.5" ></text>
</g>
<g >
<title>mysqld (2,573,050 samples, 0.01%)</title><rect x="1185.2" y="180" width="0.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1188.20" y="190.5" ></text>
</g>
<g >
<title>unmap_page_range (4,010,935 samples, 0.02%)</title><rect x="1188.9" y="52" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1191.90" y="62.5" ></text>
</g>
<g >
<title>mysqld (2,643,405 samples, 0.01%)</title><rect x="1184.6" y="84" width="0.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1187.57" y="94.5" ></text>
</g>
<g >
<title>copy_process (2,685,010 samples, 0.01%)</title><rect x="1180.5" y="100" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1183.52" y="110.5" ></text>
</g>
<g >
<title>scheduler_tick (2,159,697 samples, 0.01%)</title><rect x="1188.2" y="100" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1191.19" y="110.5" ></text>
</g>
<g >
<title>Sid_map::Sid_map (2,573,050 samples, 0.01%)</title><rect x="1185.2" y="100" width="0.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1188.20" y="110.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (2,159,697 samples, 0.01%)</title><rect x="1188.2" y="180" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1191.19" y="190.5" ></text>
</g>
<g >
<title>copy_page_range (2,685,010 samples, 0.01%)</title><rect x="1180.5" y="68" width="0.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1183.52" y="78.5" ></text>
</g>
<g >
<title>__mod_node_page_state (2,530,538 samples, 0.01%)</title><rect x="1168.7" y="52" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1171.74" y="62.5" ></text>
</g>
<g >
<title>dup_mm (2,685,010 samples, 0.01%)</title><rect x="1180.5" y="84" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1183.52" y="94.5" ></text>
</g>
<g >
<title>select_task_rq_fair (2,228,475 samples, 0.01%)</title><rect x="1187.1" y="52" width="0.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1190.12" y="62.5" ></text>
</g>
<g >
<title>copy_pte_range.isra.93 (3,489,394 samples, 0.02%)</title><rect x="1180.5" y="52" width="0.2" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1183.48" y="62.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2,159,697 samples, 0.01%)</title><rect x="1188.2" y="212" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1191.19" y="222.5" ></text>
</g>
<g >
<title>[libpython3.6m.so.1.0] (6,234,933 samples, 0.03%)</title><rect x="10.4" y="52" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="13.36" y="62.5" ></text>
</g>
<g >
<title>do_idle (2,362,760 samples, 0.01%)</title><rect x="1182.8" y="100" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1185.78" y="110.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_r14 (3,105,681 samples, 0.01%)</title><rect x="1171.1" y="52" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1174.13" y="62.5" ></text>
</g>
<g >
<title>irq_work_run_list (2,144,614 samples, 0.01%)</title><rect x="1183.0" y="52" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1186.00" y="62.5" ></text>
</g>
<g >
<title>timerqueue_add (2,088,683 samples, 0.01%)</title><rect x="1188.4" y="52" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1191.41" y="62.5" ></text>
</g>
<g >
<title>Clone_persist_gtid::periodic_write (2,573,050 samples, 0.01%)</title><rect x="1185.2" y="132" width="0.1" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="1188.20" y="142.5" ></text>
</g>
<g >
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (2,643,405 samples, 0.01%)</title><rect x="1184.6" y="68" width="0.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1187.57" y="78.5" ></text>
</g>
<g >
<title>native_apic_mem_write (2,581,060 samples, 0.01%)</title><rect x="1184.1" y="52" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1187.14" y="62.5" ></text>
</g>
<g >
<title>swapper (33,881,661 samples, 0.15%)</title><rect x="1173.0" y="68" width="1.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1176.00" y="78.5" ></text>
</g>
<g >
<title>zsh (3,910,953 samples, 0.02%)</title><rect x="1167.9" y="68" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1170.90" y="78.5" ></text>
</g>
<g >
<title>[unknown] (1,924,412 samples, 0.01%)</title><rect x="1181.5" y="84" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1184.53" y="94.5" ></text>
</g>
<g >
<title>[unknown] (4,661,062 samples, 0.02%)</title><rect x="10.4" y="68" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.36" y="78.5" ></text>
</g>
<g >
<title>acpi_idle_do_entry (39,751,006 samples, 0.18%)</title><rect x="1172.7" y="52" width="2.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1175.70" y="62.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,685,010 samples, 0.01%)</title><rect x="1180.5" y="132" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1183.52" y="142.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2,159,697 samples, 0.01%)</title><rect x="1188.2" y="196" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1191.19" y="206.5" ></text>
</g>
<g >
<title>tuned (4,374,377 samples, 0.02%)</title><rect x="10.4" y="84" width="0.2" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="13.38" y="94.5" ></text>
</g>
<g >
<title>swapper (2,071,013 samples, 0.01%)</title><rect x="1172.7" y="180" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1175.70" y="190.5" ></text>
</g>
<g >
<title>__x64_sys_futex (3,085,162 samples, 0.01%)</title><rect x="1170.9" y="52" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1173.91" y="62.5" ></text>
</g>
<g >
<title>[sysbench] (2,159,697 samples, 0.01%)</title><rect x="1188.2" y="228" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.19" y="238.5" ></text>
</g>
<g >
<title>[zle.so] (3,910,953 samples, 0.02%)</title><rect x="1167.9" y="52" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1170.90" y="62.5" ></text>
</g>
<g >
<title>[sysbench] (3,066,700 samples, 0.01%)</title><rect x="1171.3" y="68" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1174.29" y="78.5" ></text>
</g>
<g >
<title>pick_next_task_fair (2,112,053 samples, 0.01%)</title><rect x="1185.3" y="52" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1188.34" y="62.5" ></text>
</g>
</g>
</svg>
