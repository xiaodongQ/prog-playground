=================================================================
==38913==ERROR: AddressSanitizer: heap-use-after-free on address 0x602000000010 at pc 0x00000040111b bp 0x7ffd47cb4710 sp 0x7ffd47cb4700
READ of size 4 at 0x602000000010 thread T0
    #0 0x40111a in simulate_dangling_pointer() /home/workspace/prog-playground/memory/leak/leak_test.cpp:64
    #1 0x4013ca in main /home/workspace/prog-playground/memory/leak/leak_test.cpp:103
    #2 0x7f7b0d74e492 in __libc_start_main ../csu/libc-start.c:314
    #3 0x400e0d in _start (/home/workspace/prog-playground/memory/leak/leak_test+0x400e0d)

0x602000000010 is located 0 bytes inside of 4-byte region [0x602000000010,0x602000000014)
freed by thread T0 here:
    #0 0x7f7b0e72e7e0 in __interceptor_free (/lib64/libasan.so.5+0xef7e0)
    #1 0x4010cf in simulate_dangling_pointer() /home/workspace/prog-playground/memory/leak/leak_test.cpp:58
    #2 0x4013ca in main /home/workspace/prog-playground/memory/leak/leak_test.cpp:103
    #3 0x7f7b0d74e492 in __libc_start_main ../csu/libc-start.c:314

previously allocated by thread T0 here:
    #0 0x7f7b0e72eba8 in __interceptor_malloc (/lib64/libasan.so.5+0xefba8)
    #1 0x401047 in simulate_dangling_pointer() /home/workspace/prog-playground/memory/leak/leak_test.cpp:49
    #2 0x4013ca in main /home/workspace/prog-playground/memory/leak/leak_test.cpp:103
    #3 0x7f7b0d74e492 in __libc_start_main ../csu/libc-start.c:314

SUMMARY: AddressSanitizer: heap-use-after-free /home/workspace/prog-playground/memory/leak/leak_test.cpp:64 in simulate_dangling_pointer()
Shadow bytes around the buggy address:
  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c047fff8000: fa fa[fd]fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
=================================================================
==38913==ERROR: AddressSanitizer: stack-buffer-underflow on address 0x7ffd47cb4750 at pc 0x000000401188 bp 0x7ffd47cb4710 sp 0x7ffd47cb4700
READ of size 4 at 0x7ffd47cb4750 thread T0
    #0 0x401187 in simulate_wild_pointer() /home/workspace/prog-playground/memory/leak/leak_test.cpp:81
    #1 0x4013d9 in main /home/workspace/prog-playground/memory/leak/leak_test.cpp:106
    #2 0x7f7b0d74e492 in __libc_start_main ../csu/libc-start.c:314
    #3 0x400e0d in _start (/home/workspace/prog-playground/memory/leak/leak_test+0x400e0d)

Address 0x7ffd47cb4750 is located in stack of thread T0 at offset 0 in frame
    #0 0x4011b1 in main /home/workspace/prog-playground/memory/leak/leak_test.cpp:84

  This frame has 2 object(s):
    [32, 36) 'max_chunks'
    [96, 104) 'leak_thread'
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-underflow /home/workspace/prog-playground/memory/leak/leak_test.cpp:81 in simulate_wild_pointer()
Shadow bytes around the buggy address:
  0x100028f8e890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100028f8e8a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100028f8e8b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100028f8e8c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100028f8e8d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x100028f8e8e0: 00 00 00 00 00 00 00 00 00 00[f1]f1 f1 f1 04 f2
  0x100028f8e8f0: f2 f2 f2 f2 f2 f2 00 f2 f2 f2 f3 f3 f3 f3 00 00
  0x100028f8e900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100028f8e910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100028f8e920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100028f8e930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
